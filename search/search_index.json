{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the official documentation for Gthulhu and Qumun - advanced Linux schedulers designed to optimize cloud-native workloads using the Linux Scheduler Extension (sched_ext) framework.</p>"},{"location":"#latest-news","title":"\ud83d\udcf0 Latest News","text":"<p>Gthulhu joins CNCF Landscape</p> <p>Gthulhu is now part of the CNCF (Cloud Native Computing Foundation) Landscape, joining the ecosystem of cloud-native technologies.</p> <p>Gthulhu joins eBPF Application Landscape</p> <p>Gthulhu has been added to the eBPF Application Landscape, recognized as an innovative eBPF-based scheduling solution.</p>"},{"location":"#overview","title":"Overview","text":"<p>Gthulhu is a next-generation scheduler designed for the cloud-native ecosystem, built with Golang and powered by the qumun framework.</p> <p>The name Gthulhu is inspired by Cthulhu, a mythical creature known for its many tentacles. Just as tentacles can grasp and steer, Gthulhu symbolizes the ability to take the helm and navigate the complex world of modern distributed systems \u2014 much like how Kubernetes uses a ship\u2019s wheel as its emblem.</p> <p>The prefix \u201cG\u201d comes from Golang, the language at the core of this project, highlighting both its technical foundation and its developer-friendly design.</p> <p>Underneath, Gthulhu runs on the qumun framework (qumun means \u201cheart\u201d in the Bunun language, an Indigenous people of Taiwan), reflecting the role of a scheduler as the beating heart of the operating system. This not only emphasizes its central importance in orchestrating workloads but also shares a piece of Taiwan\u2019s Indigenous culture with the global open-source community.</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>The project is inspired by the Andrea Righi's talk \"Crafting a Linux kernel scheduler in Rust\". So I spent sometime to re-implement the scx_rustland, which is called qumun (scx_goland). After I done all of infrastructure setup, I redefine the project's mission, I make Gthulhu to be a generic scheduling solution dedicated to cloud-native workloads.</p>"},{"location":"#what-it-does","title":"What it does","text":"<p>Gthulhu simplfies the transformation from user's intents to scheduling policies. User can use machine friendly language (e.g. json) or use AI agent with MCP to communicate with Gthulhu, then Gthulhu will optimize specific workloads based on what you gave!</p>"},{"location":"#demo","title":"DEMO","text":"<p>Click the image below to see our DEMO on YouTube!</p>"},{"location":"#product-roadmap","title":"Product Roadmap","text":"<pre><code>timeline\n        title Gthulhu 2025 Roadmap\n        section 2025 Q1 - Q2  Gthulhu -- bare metal \n          scx_goland (qumun) : \u2611\ufe0f  7x24 test : \u2611\ufe0f  CI/CD pipeline\n          Gthulhu : \u2611\ufe0f  CI/CD pipeline : \u2611\ufe0f  Official doc\n          K8s integration : \u2611\ufe0f  Helm chart support : \u2611\ufe0f  API Server\n        section 2025 Q3 - Q4  Cloud-Native Scheduling Solution\n          Gthulhu : \u2611\ufe0f plugin mode : \u2611\ufe0f  Running on Ubuntu 25.04\n          K8s integration : \u2611\ufe0f  Container image release : \u2611\ufe0f  MCP tool : Multiple node management system\n          Release 1 : \u2611\ufe0f  R1 DEMO (free5GC) : \u2611\ufe0f  R1 DEMO (MCP) : R1 DEMO (Agent Builder)\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[User Applications] --&gt; B[Linux Kernel]\n    B --&gt; C[sched_ext Framework]\n    C --&gt; D[BPF Scheduler Program]\n    D --&gt; E[User Space Scheduler]\n    E --&gt; F[Go Scheduling Logic]\n    F --&gt; G[Qumun]\n\n    subgraph \"Kernel Space\"\n        B\n        C\n        D\n    end\n\n    subgraph \"User Space\"\n        E\n        F\n        G\n    end\n</code></pre>"},{"location":"#community","title":"Community","text":""},{"location":"#get-involved","title":"Get Involved","text":"<ul> <li>\ud83d\udcac Discussions: GitHub Discussions</li> <li>\ud83d\udc1b Issues: GitHub Issues</li> <li>\ud83d\udce7 Contact: Project Maintainers</li> <li>\ud83d\udcf0 Media Coverage: Check out Media Coverage &amp; Mentions to see project impact</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing Guide to get started.</p>"},{"location":"#license","title":"License","text":"<p>This software is distributed under the terms of the GNU General Public License version 2.</p> <p>Getting Started</p> <p>New to Gthulhu? Start with our Installation Guide and learn How It Works.</p> <p>Learn More</p> <p>Explore the Development History to understand technical challenges and solutions.</p> <p>Need Help?</p> <p>Check our FAQ for common questions or create an issue on GitHub.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides complete API reference documentation for Gthulhu and Qumun.</p>"},{"location":"api-reference/#qumun-api","title":"Qumun API","text":""},{"location":"api-reference/#core-module","title":"Core Module","text":""},{"location":"api-reference/#coreloadsched","title":"<code>core.LoadSched()</code>","text":"<p>Load BPF scheduler program.</p> <pre><code>func LoadSched(bpfObjectFile string) *BPFModule\n</code></pre> <p>Parameters: - <code>bpfObjectFile</code>: Path to BPF object file (e.g., <code>main.bpf.o</code>)</p> <p>Returns: - <code>*BPFModule</code>: BPF module instance</p> <p>Example: <pre><code>bpfModule := core.LoadSched(\"main.bpf.o\")\ndefer bpfModule.Close()\n</code></pre></p>"},{"location":"api-reference/#bpfmoduleassignuserschedpid","title":"<code>BPFModule.AssignUserSchedPid()</code>","text":"<p>Set the PID of the user-space scheduler.</p> <pre><code>func (bm *BPFModule) AssignUserSchedPid(pid int) error\n</code></pre> <p>Parameters: - <code>pid</code>: Process ID of the user-space scheduler</p> <p>Example: <pre><code>pid := os.Getpid()\nerr := bpfModule.AssignUserSchedPid(pid)\nif err != nil {\n    log.Printf(\"AssignUserSchedPid failed: %v\", err)\n}\n</code></pre></p>"},{"location":"api-reference/#bpfmoduleattach","title":"<code>BPFModule.Attach()</code>","text":"<p>Attach BPF program to kernel.</p> <pre><code>func (bm *BPFModule) Attach() error\n</code></pre> <p>Example: <pre><code>if err := bpfModule.Attach(); err != nil {\n    log.Panicf(\"bpfModule attach failed: %v\", err)\n}\n</code></pre></p>"},{"location":"api-reference/#bpfmodulereceiveprocexitevt","title":"<code>BPFModule.ReceiveProcExitEvt()</code>","text":"<p>Receive process exit events.</p> <pre><code>func (bm *BPFModule) ReceiveProcExitEvt() int\n</code></pre> <p>Returns: - <code>int</code>: PID of exited process, or -1 if no events</p> <p>Example: <pre><code>go func() {\n    for {\n        if pid := bpfModule.ReceiveProcExitEvt(); pid != -1 {\n            sched.DeletePidFromTaskInfo(pid)\n        } else {\n            time.Sleep(100 * time.Millisecond)\n        }\n    }\n}()\n</code></pre></p>"},{"location":"api-reference/#cache-module-util-package","title":"Cache Module (<code>util</code> package)","text":""},{"location":"api-reference/#cacheinitcachedomains","title":"<code>cache.InitCacheDomains()</code>","text":"<p>Initialize CPU cache domains.</p> <pre><code>func InitCacheDomains(bpfModule *core.BPFModule) error\n</code></pre> <p>Parameters: - <code>bpfModule</code>: BPF module instance</p> <p>Example: <pre><code>err := cache.InitCacheDomains(bpfModule)\nif err != nil {\n    log.Panicf(\"InitCacheDomains failed: %v\", err)\n}\n</code></pre></p>"},{"location":"api-reference/#scheduler-module-sched-package","title":"Scheduler Module (<code>sched</code> package)","text":""},{"location":"api-reference/#scheddeletepidfromtaskinfo","title":"<code>sched.DeletePidFromTaskInfo()</code>","text":"<p>Delete specified PID from task information.</p> <pre><code>func DeletePidFromTaskInfo(pid int)\n</code></pre> <p>Parameters: - <code>pid</code>: Process ID to delete</p>"},{"location":"api-reference/#bpf-program-api","title":"BPF Program API","text":""},{"location":"api-reference/#map-structures","title":"Map Structures","text":""},{"location":"api-reference/#task_info_map","title":"<code>task_info_map</code>","text":"<p>Hash map storing task information.</p> <pre><code>struct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, MAX_TASKS);\n    __type(key, pid_t);\n    __type(value, struct task_info);\n} task_info_map SEC(\".maps\");\n</code></pre>"},{"location":"api-reference/#struct-task_info","title":"<code>struct task_info</code>","text":"<p>Task information structure.</p> <pre><code>struct task_info {\n    __u64 vruntime;                    // Virtual runtime\n    __u32 weight;                      // Task weight\n    __u32 slice_ns;                    // Time slice (nanoseconds)\n    __u64 exec_start;                  // Execution start time\n    __u64 sum_exec_runtime;            // Cumulative execution time\n    __u32 voluntary_ctxt_switches;     // Voluntary context switches\n    __u32 nonvoluntary_ctxt_switches;  // Non-voluntary context switches\n};\n</code></pre>"},{"location":"api-reference/#bpf-program-entry-points","title":"BPF Program Entry Points","text":""},{"location":"api-reference/#sched_ext_ops","title":"<code>sched_ext_ops</code>","text":"<p>Scheduler operations structure.</p> <pre><code>SEC(\".struct_ops.link\")\nstruct sched_ext_ops gthulhu_ops = {\n    .select_cpu         = (void *)gthulhu_select_cpu,\n    .enqueue            = (void *)gthulhu_enqueue,\n    .dispatch           = (void *)gthulhu_dispatch,\n    .running            = (void *)gthulhu_running,\n    .stopping           = (void *)gthulhu_stopping,\n    .enable             = (void *)gthulhu_enable,\n    .init               = (void *)gthulhu_init,\n    .exit               = (void *)gthulhu_exit,\n    .name               = \"gthulhu\",\n};\n</code></pre>"},{"location":"api-reference/#core-functions","title":"Core Functions","text":""},{"location":"api-reference/#gthulhu_select_cpu","title":"<code>gthulhu_select_cpu()</code>","text":"<p>Select appropriate CPU core.</p> <pre><code>s32 BPF_STRUCT_OPS(gthulhu_select_cpu, struct task_struct *p, \n                   s32 prev_cpu, u64 wake_flags)\n</code></pre> <p>Parameters: - <code>p</code>: Task structure pointer - <code>prev_cpu</code>: Previous CPU number - <code>wake_flags</code>: Wake-up flags</p> <p>Returns: - <code>s32</code>: Selected CPU number</p>"},{"location":"api-reference/#gthulhu_enqueue","title":"<code>gthulhu_enqueue()</code>","text":"<p>Enqueue task.</p> <pre><code>void BPF_STRUCT_OPS(gthulhu_enqueue, struct task_struct *p, u64 enq_flags)\n</code></pre>"},{"location":"api-reference/#gthulhu_dispatch","title":"<code>gthulhu_dispatch()</code>","text":"<p>Dispatch task for execution.</p> <pre><code>void BPF_STRUCT_OPS(gthulhu_dispatch, s32 cpu, struct task_struct *prev)\n</code></pre>"},{"location":"api-reference/#configuration-options","title":"Configuration Options","text":""},{"location":"api-reference/#environment-variables","title":"Environment Variables","text":"Variable Description Default Type <code>GTHULHU_DEBUG</code> Enable debug mode <code>false</code> bool <code>GTHULHU_LOG_LEVEL</code> Log level <code>INFO</code> string <code>GTHULHU_MAX_TASKS</code> Maximum number of tasks <code>4096</code> int"},{"location":"api-reference/#runtime-parameters","title":"Runtime Parameters","text":""},{"location":"api-reference/#time-slice-configuration","title":"Time Slice Configuration","text":"<pre><code>// Base time slice (nanoseconds)\n#define BASE_SLICE_NS    5000000ULL  // 5ms\n\n// Minimum time slice\n#define MIN_SLICE_NS     1000000ULL  // 1ms\n\n// Maximum time slice\n#define MAX_SLICE_NS    20000000ULL  // 20ms\n</code></pre>"},{"location":"api-reference/#weight-configuration","title":"Weight Configuration","text":"<pre><code>// Weight table corresponding to nice values\nstatic const int prio_to_weight[40] = {\n /* -20 */     88761,     71755,     56483,     46273,     36291,\n /* -15 */     29154,     23254,     18705,     14949,     11916,\n /* -10 */      9548,      7620,      6100,      4904,      3906,\n /*  -5 */      3121,      2501,      1991,      1586,      1277,\n /*   0 */      1024,       820,       655,       526,       423,\n /*   5 */       335,       272,       215,       172,       137,\n /*  10 */       110,        87,        70,        56,        45,\n /*  15 */        36,        29,        23,        18,        15,\n};\n</code></pre>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":""},{"location":"api-reference/#common-error-codes","title":"Common Error Codes","text":"Error Code Description Solution <code>-EPERM</code> Permission denied Run with root privileges <code>-ENOENT</code> BPF file not found Verify BPF object file path <code>-EINVAL</code> Invalid parameters Check function parameters <code>-ENOMEM</code> Out of memory Increase system memory"},{"location":"api-reference/#error-handling-example","title":"Error Handling Example","text":"<pre><code>// Error handling pattern\nif err := bpfModule.Attach(); err != nil {\n    switch {\n    case strings.Contains(err.Error(), \"permission denied\"):\n        log.Fatal(\"Root privileges required\")\n    case strings.Contains(err.Error(), \"no such file\"):\n        log.Fatal(\"BPF file does not exist\")\n    default:\n        log.Fatalf(\"Unknown error: %v\", err)\n    }\n}\n</code></pre>"},{"location":"api-reference/#debugging-api","title":"Debugging API","text":""},{"location":"api-reference/#statistics-information","title":"Statistics Information","text":"<pre><code>// Get scheduler statistics\ntype SchedulerStats struct {\n    TotalTasks          uint64\n    ActiveTasks         uint64\n    ContextSwitches     uint64\n    AverageLatency      time.Duration\n    CPUUtilization      float64\n}\n\nfunc GetSchedulerStats() *SchedulerStats {\n    // Implementation details...\n}\n</code></pre>"},{"location":"api-reference/#debug-tool-functions","title":"Debug Tool Functions","text":"<pre><code>// BPF debug macros\n#define bpf_debug(fmt, args...) \\\n    bpf_trace_printk(fmt, sizeof(fmt), ##args)\n\n// Trace task state changes\nstatic void trace_task_state(struct task_struct *p, const char *event) {\n    bpf_debug(\"Task %d: %s (vruntime=%llu)\\n\", \n              p-&gt;pid, event, get_task_vruntime(p));\n}\n</code></pre>"},{"location":"api-reference/#performance-tuning-api","title":"Performance Tuning API","text":""},{"location":"api-reference/#dynamic-parameter-adjustment","title":"Dynamic Parameter Adjustment","text":"<pre><code>// Adjust scheduling parameters\ntype SchedulingParams struct {\n    BaseSliceNs      uint64\n    MinSliceNs       uint64  \n    MaxSliceNs       uint64\n    LatencyFactor    float64\n    WeightMultiplier float64\n}\n\nfunc UpdateSchedulingParams(params *SchedulingParams) error {\n    // Implementation details...\n}\n</code></pre>"},{"location":"api-reference/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// Performance counters\nstruct perf_counters {\n    __u64 dispatch_count;\n    __u64 enqueue_count;\n    __u64 context_switch_count;\n    __u64 total_runtime;\n    __u64 idle_time;\n};\n</code></pre> <p>API Version</p> <p>Current API Version: v0.1.x API Stability: Alpha (may have breaking changes)</p> <p>More Examples</p> <p>For more usage examples, please refer to the <code>examples/</code> directory in the project source code.</p>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>Welcome to contribute to the Gthulhu project! This guide will help you understand how to participate in project development.</p>"},{"location":"contributing/#before-you-begin","title":"Before You Begin","text":""},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the CNCF Code of Conduct.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<p>Before starting to contribute, we recommend reading the Development History to understand the project's technical background and challenges encountered.</p> <p>You can contribute to the project in various ways:</p> <pre><code>graph LR\n    A[Ways to Contribute] --&gt; B[Code]\n    A --&gt; C[Documentation]\n    A --&gt; D[Testing]\n    A --&gt; E[Bug Reports]\n    A --&gt; F[Feature Requests]\n    A --&gt; G[Community Support]\n\n    B --&gt; B1[New Features]\n    B --&gt; B2[Bug Fixes]\n    B --&gt; B3[Performance Optimization]\n\n    C --&gt; C1[API Documentation]\n    C --&gt; C2[User Guides]\n    C --&gt; C3[Tutorial Articles]\n</code></pre>"},{"location":"contributing/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"contributing/#required-tools","title":"Required Tools","text":"<p>Ensure your development environment has the following tools:</p> Tool Version Installation Go 1.22+ Download Clang 17+ <code>apt install clang-17</code> Git Latest <code>apt install git</code> Make Latest <code>apt install make</code> Docker Latest Install Docker"},{"location":"contributing/#clone-the-project","title":"Clone the Project","text":"<pre><code># 1. Fork the project (click Fork button on GitHub)\n# 2. Clone your fork\ngit clone https://github.com/your-username/Gthulhu.git\ncd Gthulhu\n\n# 3. Add upstream repository\ngit remote add upstream https://github.com/Gthulhu/Gthulhu.git\n\n# 4. Verify remote settings\ngit remote -v\n</code></pre>"},{"location":"contributing/#build-the-project","title":"Build the Project","text":"<pre><code># Install dependencies\nmake dep\n\n# Initialize submodules\ngit submodule init\ngit submodule sync  \ngit submodule update\n\n# Build project\nmake build\n\n# Run tests\nmake test\n\n# Code linting\nmake lint\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#1-create-feature-branch","title":"1. Create Feature Branch","text":"<pre><code># Create new branch from latest main\ngit checkout main\ngit pull upstream main\ngit checkout -b feature/your-feature-name\n\n# Or for bug fixes\ngit checkout -b fix/issue-number-description\n</code></pre>"},{"location":"contributing/#2-code-development","title":"2. Code Development","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Go code: Follow <code>gofmt</code> and <code>golint</code> standards</li> <li>C code: Follow Linux kernel code style</li> <li>Commit messages: Use semantic commit messages</li> </ul> <pre><code># Format Go code\ngofmt -w .\n\n# Run linter\nmake lint\n\n# Run tests\nmake test\n</code></pre>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<pre><code># Format: &lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n#\n# Types:\n# - feat: new feature\n# - fix: bug fix\n# - docs: documentation update\n# - style: code formatting\n# - refactor: code refactoring\n# - test: test related\n# - chore: build or auxiliary tools\n\n# Examples:\nfeat(scheduler): add CPU topology aware scheduling\nfix(bpf): resolve memory leak in task cleanup\ndocs(api): update API reference documentation\n</code></pre>"},{"location":"contributing/#3-testing","title":"3. Testing","text":""},{"location":"contributing/#run-test-suite","title":"Run Test Suite","text":"<pre><code># Run all tests\nmake test\n\n# Run specific tests\ngo test ./internal/sched/\n\n# Run benchmark tests\ngo test -bench=. ./...\n\n# Test coverage\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n</code></pre>"},{"location":"contributing/#manual-testing","title":"Manual Testing","text":"<pre><code># Build and test\nmake build\nsudo ./main &amp;\n\n# Run stress tests\nstress-ng --cpu 4 --timeout 60s\n\n# Check performance\nperf stat -e context-switches,cpu-migrations,page-faults sudo ./main\n\n# Stop test\nsudo pkill -f \"./main\"\n</code></pre>"},{"location":"contributing/#4-commit-changes","title":"4. Commit Changes","text":"<pre><code># Add changed files\ngit add .\n\n# Commit changes\ngit commit -m \"feat(scheduler): add CPU topology aware scheduling\n\n- Implement cache-aware CPU selection\n- Add NUMA node preference logic  \n- Improve task migration decisions\n\nCloses #123\"\n\n# Push to your fork\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"contributing/#5-create-pull-request","title":"5. Create Pull Request","text":"<ol> <li>Go to GitHub: Visit your fork's page</li> <li>Create PR: Click \"New Pull Request\"</li> <li>Fill Template: Use the provided PR template</li> <li>Wait for Review: Maintainers will review your code</li> </ol>"},{"location":"contributing/#pr-template-example","title":"PR Template Example","text":"<pre><code>## Description\nBrief description of changes in this PR.\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Performance improvement\n- [ ] Documentation update\n- [ ] Code refactoring\n\n## Testing\n- [ ] Ran existing test suite\n- [ ] Added new test cases\n- [ ] Manually tested functionality\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Commit messages are clear\n- [ ] Updated relevant documentation\n- [ ] Changes are backward compatible\n\n## Related Issues\nFixes #123\n</code></pre>"},{"location":"contributing/#code-review","title":"Code Review","text":""},{"location":"contributing/#review-standards","title":"Review Standards","text":"<p>Code reviews will check the following aspects:</p> <ol> <li>Correctness: Is the code logic correct</li> <li>Performance: Are there performance issues</li> <li>Security: Are there security risks</li> <li>Readability: Is the code easy to understand</li> <li>Maintainability: Is the code structure reasonable</li> </ol>"},{"location":"contributing/#responding-to-review-comments","title":"Responding to Review Comments","text":"<pre><code># Modify code based on review comments\ngit add .\ngit commit -m \"address review comments: improve error handling\"\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"contributing/#common-review-comments","title":"Common Review Comments","text":"<ol> <li> <p>Error Handling: <pre><code>// \u274c Poor error handling\nresult, _ := someFunction()\n\n// \u2705 Proper error handling\nresult, err := someFunction()\nif err != nil {\n    return fmt.Errorf(\"failed to do something: %w\", err)\n}\n</code></pre></p> </li> <li> <p>Memory Management: <pre><code>// \u274c Memory leak\nchar *buffer = malloc(size);\n// ... use buffer\n// forgot to free memory\n\n// \u2705 Proper memory management\nchar *buffer = malloc(size);\nif (!buffer) return -ENOMEM;\n// ... use buffer\nfree(buffer);\n</code></pre></p> </li> <li> <p>Concurrency Safety: <pre><code>// \u274c Race condition\nvar counter int\ngo func() { counter++ }()\ngo func() { counter++ }()\n\n// \u2705 Use mutex\nvar mu sync.Mutex\nvar counter int\ngo func() {\n    mu.Lock()\n    counter++\n    mu.Unlock()\n}()\n</code></pre></p> </li> </ol>"},{"location":"contributing/#special-contribution-types","title":"Special Contribution Types","text":""},{"location":"contributing/#documentation-contributions","title":"Documentation Contributions","text":"<p>Documentation improvements are equally important:</p> <pre><code># Clone documentation project\ngit clone https://github.com/Gthulhu/docs.git\ncd docs\n\n# Install MkDocs\npip install mkdocs mkdocs-material\n\n# Local preview\nmkdocs serve\n\n# Edit documentation files\n# docs/your-page.md\n</code></pre>"},{"location":"contributing/#testing-contributions","title":"Testing Contributions","text":"<p>Add test cases:</p> <pre><code>// Example: Add benchmark test\nfunc BenchmarkScheduleTask(b *testing.B) {\n    scheduler := NewScheduler()\n    task := &amp;Task{PID: 123, Weight: 1024}\n\n    b.ResetTimer()\n    for i := 0; i &lt; b.N; i++ {\n        scheduler.ScheduleTask(task)\n    }\n}\n\n// Example: Add integration test\nfunc TestSchedulerIntegration(t *testing.T) {\n    // Set up test environment\n    scheduler := NewScheduler()\n\n    // Test cases\n    testCases := []struct{\n        name     string\n        tasks    []*Task\n        expected int\n    }{\n        // Test cases...\n    }\n\n    for _, tc := range testCases {\n        t.Run(tc.name, func(t *testing.T) {\n            // Execute test...\n        })\n    }\n}\n</code></pre>"},{"location":"contributing/#bpf-program-contributions","title":"BPF Program Contributions","text":"<p>Modifying BPF programs requires special attention:</p> <pre><code>// 1. Ensure BPF verifier passes\nstatic __always_inline int validate_task(struct task_struct *p) {\n    if (!p) return -EINVAL;\n    // Other validations...\n    return 0;\n}\n\n// 2. Use BPF helper functions\nSEC(\"struct_ops/select_cpu\")\ns32 BPF_STRUCT_OPS(gthulhu_select_cpu, struct task_struct *p, s32 prev_cpu, u64 wake_flags) {\n    // Use BPF helper\n    u32 cpu = bpf_get_smp_processor_id();\n\n    // Boundary check\n    if (cpu &gt;= MAX_CPUS) return prev_cpu;\n\n    return select_best_cpu(p, prev_cpu);\n}\n\n// 3. Add trace points\nbpf_trace_printk(\"Task %d scheduled on CPU %d\\n\", p-&gt;pid, cpu);\n</code></pre>"},{"location":"contributing/#release-process","title":"Release Process","text":""},{"location":"contributing/#version-numbering-rules","title":"Version Numbering Rules","text":"<p>Follow Semantic Versioning:</p> <pre><code>MAJOR.MINOR.PATCH\n\nExample: 1.0.0, 1.1.0, 1.1.1\n</code></pre> <ul> <li>MAJOR: Incompatible API changes</li> <li>MINOR: Backward-compatible feature additions</li> <li>PATCH: Backward-compatible bug fixes</li> </ul>"},{"location":"contributing/#release-checklist","title":"Release Checklist","text":"<p>Before release, confirm:</p> <ul> <li>[ ] All tests pass</li> <li>[ ] Documentation updated</li> <li>[ ] CHANGELOG updated</li> <li>[ ] Version number updated</li> <li>[ ] GitHub Release created</li> <li>[ ] Docker image updated</li> </ul>"},{"location":"contributing/#community-participation","title":"Community Participation","text":""},{"location":"contributing/#contact-methods","title":"Contact Methods","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: Technical discussions and Q&amp;A</li> <li>Email: Important matters contact</li> </ul>"},{"location":"contributing/#community-activities","title":"Community Activities","text":"<ul> <li>Monthly Meetings: Online technical discussion meetings</li> <li>Code Reviews: Mutual review and learning</li> <li>Tech Sharing: Share usage experiences and best practices</li> </ul>"},{"location":"contributing/#recognition-and-thanks","title":"Recognition and Thanks","text":""},{"location":"contributing/#contributors-list","title":"Contributors List","text":"<p>All contributors will be recognized in the following places:</p> <ul> <li>Contributors section in README.md</li> <li>GitHub Contributors page</li> <li>Thanks list in release notes</li> </ul>"},{"location":"contributing/#special-contributions","title":"Special Contributions","text":"<p>For major contributions, we will provide:</p> <ul> <li>Project Committer privileges</li> <li>Technical blog byline opportunities</li> <li>Conference speaking invitations</li> </ul> <p>Welcome to Contribute</p> <p>Thank you for considering contributing to the Gthulhu project! Every contribution, no matter how big or small, is very important to the project's development.</p> <p>Need Help?</p> <p>If you encounter any problems during the contribution process, please feel free to seek help in GitHub Issues or contact project maintainers. We're happy to assist you!</p>"},{"location":"development-history/","title":"Development History","text":"<p>Author</p> <p>Yi Chen [GitHub], Founder of Gthulhu ychen.desl@gmail.com</p> <p>This page documents the development history, technical challenges, and solutions of the Gthulhu and Qumun projects.</p>"},{"location":"development-history/#project-origins","title":"Project Origins","text":"<p>Having been a long-time lurker in Professor Jserv's system software community, I learned about Linux's upcoming support for eBPF-based schedulers during the early development of sched_ext (scx). Later, I discovered Andrea Righi's presentation \"Crafting a Linux kernel scheduler in Rust\" at Rust Lab 2024, which revealed that scx had already included an eBPF scheduler called \"scx_rustland\" that performs scheduling policy decisions in userspace.</p> <p>This inspired the idea of recreating this scheduler using Golang, for several reasons:</p> <ul> <li>Open-source libbpfgo was available for use</li> <li>Golang has a lower development complexity compared to Rust  </li> <li>Using Golang for K8s operator development is more convenient</li> </ul>"},{"location":"development-history/#infrastructure-setup","title":"Infrastructure Setup","text":"<p>Before beginning the reconstruction work, some infrastructure needed to be established:</p> <ol> <li>libbpfgo Support Assessment: Could it support scx-type eBPF programs? Were the API implementations complete?</li> <li>Skeleton Tools: Was there a convenient way for golang applications to use eBPF skeletons?</li> </ol> <p>Initially, I was overly optimistic, thinking that simply enabling libbpfgo to support struct-ops map attachment would allow recreating what scx_rustland does in golang. But reality was far from ideal.</p>"},{"location":"development-history/#technical-contributions-and-fixes","title":"Technical Contributions and Fixes","text":""},{"location":"development-history/#patch-1-libbpfgo-struct-ops-support","title":"Patch #1: libbpfgo struct-ops Support","text":"<p>Link: feat: add AttachStructOps() #476 for aquasecurity/libbpfgo</p> <p>The primary task for developing scx-based schedulers using golang was enabling golang applications to manage struct-ops type BPF Maps. However, libbpfgo didn't support the relevant APIs, so libbpfgo needed to be extended.</p> <p>Main changes:</p> <pre><code>func (m *BPFMap) AttachStructOps() error {\n    if m.Type().String() != MapTypeStructOps.String() {\n        return errors.New(\"Map type should be BPF_MAP_TYPE_STRUCT_OPS\")\n    }\n    linkC, errno := C.bpf_map__attach_struct_ops(m.bpfMap)\n    if linkC == nil {\n        return fmt.Errorf(\"Map attach failed: %v\", &amp;errno)\n    }\n    return nil\n}\n</code></pre> <p>Most time was spent writing selftests, choosing to use golang to write the user space agent for scx-simple as the selftest for this patch.</p> <p>Additionally, the project's CI Runner used kernel version v6.8, but scheduler extension requires v6.12+ kernels. After discussion, arighi's suggestion to use virtme-ng for testing was accepted.</p>"},{"location":"development-history/#patch-2-user-ring-buffer-support","title":"Patch #2: User Ring Buffer Support","text":"<p>Link: support user ring buffer #480 for aquasecurity/libbpfgo</p> <p>When attempting to implement scx_goland, I discovered that libbpfgo lacked API support for user-ring-buffer type BPF maps.</p> <p>The scx_rustland_core architecture diagram shows that scx_goland (scx_rustland) heavily relies on user-ring-buffer maps (which work like ring buffers but with reverse transmission order, allowing user space applications to pass messages to BPF programs).</p> <p>With these two patches, golang gained the ability to load scx eBPF programs and pass scheduling decisions to eBPF schedulers.</p>"},{"location":"development-history/#patch-3-ebpf-documentation-fix","title":"Patch #3: eBPF Documentation Fix","text":"<p>Link: chore: update BPF_PROG_TEST_RUN.md for isovalent/ebpf-docs</p> <p>Since Linux kernel v5.14, the kernel supports <code>BPF_PROG_TYPE_SYSCALL</code> type eBPF programs. Note that these can only be executed through system calls, specifically the BPF system call.</p> <p>To execute <code>BPF_PROG_TYPE_SYSCALL</code> type eBPF programs, eBPF provides <code>BPF_PROG_TEST_RUN</code>, which can invoke the following types of eBPF programs:</p> <ul> <li><code>BPF_PROG_TYPE_SOCK_OPS</code></li> <li><code>BPF_PROG_TYPE_SYSCALL</code></li> <li><code>BPF_PROG_TYPE_RAW_TRACEPOINT</code></li> <li><code>BPF_PROG_TYPE_TRACING</code></li> <li><code>BPF_PROG_TYPE_SOCKET_FILTER</code></li> <li><code>BPF_PROG_TYPE_SCHED_CLS</code></li> <li><code>BPF_PROG_TYPE_SCHED_ACT</code></li> <li><code>BPF_PROG_TYPE_XDP</code></li> <li><code>BPF_PROG_TYPE_CGROUP_SKB</code></li> <li><code>BPF_PROG_TYPE_LWT_IN</code></li> <li><code>BPF_PROG_TYPE_LWT_OUT</code></li> <li><code>BPF_PROG_TYPE_LWT_XMIT</code></li> <li><code>BPF_PROG_TYPE_LWT_SEG6LOCAL</code></li> <li><code>BPF_PROG_TYPE_FLOW_DISSECTOR</code></li> </ul> <p>In scx_goland (scx_rustland), <code>BPF_PROG_TYPE_SYSCALL</code> type programs allow user-space programs to call customized functions to select a CPU for newly awakened tasks (the select_cpu hook mentioned in scheduler_extension documentation):</p> <pre><code>/*\n * Select and wake-up an idle CPU for a specific task from the user-space\n * scheduler.\n */\nSEC(\"syscall\")\nint rs_select_cpu(struct task_cpu_arg *input)\n{\n    struct task_struct *p;\n    int cpu;\n\n    p = bpf_task_from_pid(input-&gt;pid);\n    if (!p)\n        return -EINVAL;\n\n    bpf_rcu_read_lock();\n    cpu = pick_idle_cpu(p, input-&gt;cpu);\n    bpf_rcu_read_unlock();\n\n    bpf_task_release(p);\n\n    /*\n     * Wake-up the CPU if idle. Use SCX_KICK_IDLE to prevent unecessary\n     * rescheduling events in case the CPU is already awake (since we don't\n     * know exactly what the user-space scheduler is doing we can't\n     * implicitly assume that the target CPU is idle here).\n     */\n    if (cpu &gt;= 0)\n        scx_bpf_kick_cpu(cpu, SCX_KICK_IDLE);\n\n    return cpu;\n}\n</code></pre> <p>Important Discovery: When using the <code>BPF_PROG_TEST_RUN</code> command and consulting eBPF-docs, I learned that <code>BPF_PROG_TYPE_SYSCALL</code> type eBPF programs only required passing the <code>ctx_in</code> parameter. However, this information was incorrect - actually <code>ctx_size_in</code> also needs to be provided for <code>BPF_PROG_TYPE_SYSCALL</code> type eBPF programs to execute successfully.</p> <p>This issue caused significant delays (I once suspected libbpfgo was poorly implemented), before finally discovering it was a documentation problem. The eBPF documentation regarding <code>ctx_size_in</code> has now been corrected, saving other developers from this pitfall.</p>"},{"location":"development-history/#issues-encountered-during-porting","title":"Issues Encountered During Porting","text":""},{"location":"development-history/#page-fault-problem","title":"Page Fault Problem","text":"<p>While modifying infrastructure took some time, the progress of patches didn't actually affect scheduler development, since forked repos could be used before PR merges.</p> <p>However, after adding the necessary APIs to libbpfgo, I encountered a system freeze problem. This occurred after scx_goland loaded, causing the system to freeze for about five seconds before recovering (exactly matching the watchdog timeout for removing schedulers).</p> <p>Initially, I suspected that the newly added user_ringbuffer wasn't successfully communicating dispatched tasks to the eBPF program, but unit tests disproved this hypothesis.</p> <p>After much thought without finding a solution, I consulted Andrea Righi, who revealed that golang-developed user-space agents encounter page fault problems (Andrea Righi was certain because he encountered the same issue when developing scx_rustland, solving it by using a buddy allocator to avoid page faults).</p> <p>When user-space agents experience page faults, all task allocation stops, and since page faults rely on kthreads for resolution, this creates a deadlock.</p> <p>Solution Evaluation:</p> <ol> <li>Use TinyGo for compilation</li> <li>Implement buddy allocator in golang (following the same approach)</li> <li>Have all kthreads scheduled directly by eBPF</li> </ol> <p>The first two approaches would require more time, so considering time costs, I chose solution #3:</p> <pre><code>void BPF_STRUCT_OPS(goland_enqueue, struct task_struct *p, u64 enq_flags)\n{\n    struct queued_task_ctx *task;\n\n    // ...\n\n    /*\n     * WORKAROUND: Dispatch user-space scheduler to the shared DSQ to avoid\n     * starvation on user space scheduler goroutine(s).\n     */\n    if (is_belong_usersched_task(p)) {\n        scx_bpf_dsq_insert_vtime(p, SHARED_DSQ,\n            SCX_SLICE_INF, -1ULL, 0);\n        __sync_fetch_and_add(&amp;nr_kernel_dispatches, 1);\n        kick_task_cpu(p);\n        return;\n    }\n    // ...\n}\n</code></pre>"},{"location":"development-history/#golang-runtime-complexity-problem","title":"Golang Runtime Complexity Problem","text":"<p>After avoiding page faults, I found the scheduler still froze. After some time, I realized this was a golang runtime problem.</p> <p>Using scx_rustland as an example, the user space agent tells the eBPF program its PID, allowing the user space agent to be scheduled directly by the eBPF scheduler without going through the agent. However, when recreating the agent in golang, I overlooked golang runtime complexity - even with <code>GOMAXPROC</code> set to 1, golang runtime still creates multiple Ms (one M corresponds to one Kernel Scheduling Entry).</p> <p>Therefore, scheduling only a single process won't allow the golang agent to work properly - we need all associated Ms to be scheduled directly by the eBPF scheduler:</p> <pre><code>/*\n * Return true if the target task @p belongs to the user-space scheduler.\n */\nstatic inline bool is_belong_usersched_task(const struct task_struct *p)\n{\n    return p-&gt;tgid == usersched_pid;\n}\n</code></pre> <p>This function checks if a task's tgid belongs to the golang agent, and if so, schedules it directly via eBPF scheduler during the <code>.enqueue</code> hook:</p> <pre><code> /*\n  * WORKAROUND: Dispatch user-space scheduler to the shared DSQ to avoid\n  * starvation on user space scheduler goroutine(s).\n  */\n if (is_belong_usersched_task(p)) {\n  scx_bpf_dsq_insert_vtime(p, SHARED_DSQ,\n      SCX_SLICE_INF, -1ULL, 0);\n  __sync_fetch_and_add(&amp;nr_kernel_dispatches, 1);\n  kick_task_cpu(p);\n  return;\n }\n</code></pre>"},{"location":"development-history/#technical-architecture-diagram","title":"Technical Architecture Diagram","text":"<p>Golang Runtime's G-M-P Model:</p> <pre><code>graph TB\n    subgraph \"Golang Runtime\"\n        G1[Goroutine 1] --&gt; M1[OS Thread 1]\n        G2[Goroutine 2] --&gt; M1\n        G3[Goroutine 3] --&gt; M2[OS Thread 2]\n        G4[Goroutine 4] --&gt; M2\n\n        M1 --&gt; P1[Processor 1]\n        M2 --&gt; P2[Processor 2]\n    end\n\n    subgraph \"eBPF Scheduler\"\n        P1 --&gt; S[SCX Scheduler]\n        P2 --&gt; S\n        S --&gt; K[Kernel Space]\n    end\n</code></pre>"},{"location":"development-history/#summary","title":"Summary","text":"<p>Through a series of efforts, the \"fantasy\" of developing Linux schedulers using golang was realized (though current implementation performance is suboptimal):</p> <p>Project Link: https://github.com/Gthulhu/scx_goland_core</p>"},{"location":"development-history/#future-considerations","title":"Future Considerations","text":"<p>Initially, I hoped scx_goland_core could be accepted by the scx project, but considering the following points, I temporarily abandoned this idea:</p> <ol> <li>Maintenance Burden: Contributing to upstream means future changes would require significant time investment, preventing rapid patch progress based on requirements</li> <li>Project Integration: scx_goland_core is just one infrastructure component for achieving the ultimate goal. I expect corresponding golang scheduler implementations and k8s operators to be in the same project. Unless scx can accept all derivative projects, contributing to upstream at this point would affect future development flexibility</li> </ol>"},{"location":"development-history/#technical-challenges-summary","title":"Technical Challenges Summary","text":"Challenge Problem Description Solution Status struct-ops Support libbpfgo lacks struct-ops map support Contributed PR #476 \u2705 Resolved User Ring Buffer Missing user-ring-buffer API Contributed PR #480 \u2705 Resolved Documentation Error BPF_PROG_TEST_RUN docs missing ctx_size_in Fixed official docs \u2705 Resolved Page Fault Golang agent causes system freeze kthread direct eBPF scheduling \u2705 Mitigated Runtime Complexity Golang M:N model causes scheduling issues tgid group scheduling \u2705 Resolved <p>Get Involved</p> <p>If you're interested in this project, feel free to try submitting patches! :)</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>This page collects common questions and answers encountered when using Gthulhu and Qumun.</p>"},{"location":"faq/#installation-related-questions","title":"Installation Related Questions","text":""},{"location":"faq/#q-how-can-i-confirm-my-kernel-supports-sched_ext","title":"Q: How can I confirm my kernel supports sched_ext?","text":"<p>A: You can check using the following methods:</p> <pre><code># Method 1: Check kernel configuration\ngrep -r \"CONFIG_SCHED_CLASS_EXT\" /boot/config-$(uname -r)\n\n# Method 2: Check /proc/config.gz\nzcat /proc/config.gz | grep \"CONFIG_SCHED_CLASS_EXT\"\n\n# Method 3: Check sched_ext directory\nls /sys/kernel/sched_ext/ 2&gt;/dev/null\n</code></pre> <p>If the output contains <code>CONFIG_SCHED_CLASS_EXT=y</code>, your kernel supports sched_ext.</p>"},{"location":"faq/#q-what-should-i-do-when-getting-libbpf-not-found-error-during-compilation","title":"Q: What should I do when getting \"libbpf not found\" error during compilation?","text":"<p>A: This is usually because libbpf is not properly installed. Please follow these steps to resolve:</p> <pre><code># Ubuntu/Debian\nsudo apt install libbpf-dev\n\n# CentOS/RHEL/Fedora\nsudo dnf install libbpf-devel\n\n# Or manually compile libbpf\ngit clone https://github.com/libbpf/libbpf.git\ncd libbpf/src\nmake\nsudo make install\n</code></pre>"},{"location":"faq/#q-why-is-clang-17-required","title":"Q: Why is Clang 17+ required?","text":"<p>A: Clang 17+ provides more complete BPF support, including:</p> <ul> <li>Better BPF CO-RE (Compile Once, Run Everywhere) support</li> <li>Latest BPF instruction set support</li> <li>More stable BPF program compilation</li> </ul> <p>If your system doesn't have Clang 17+, you can install it like this:</p> <pre><code># Ubuntu/Debian\nsudo apt install clang-17\n\n# Set environment variables\nexport CC=clang-17\nexport CXX=clang++-17\n</code></pre>"},{"location":"faq/#runtime-related-questions","title":"Runtime Related Questions","text":""},{"location":"faq/#q-getting-operation-not-permitted-error-when-running","title":"Q: Getting \"Operation not permitted\" error when running","text":"<p>A: This is a permission issue. BPF program loading requires root privileges:</p> <pre><code># Correct way to run\nsudo ./main\n\n# Or use Docker\ndocker run --privileged=true --pid host --rm gthulhu:latest /gthulhu/main\n</code></pre>"},{"location":"faq/#q-what-to-do-if-the-system-becomes-slow-after-starting-the-scheduler","title":"Q: What to do if the system becomes slow after starting the scheduler?","text":"<p>A: This might be due to the following reasons:</p> <ol> <li> <p>Scheduling parameters not suitable for your workload: <pre><code># Check system load\ntop\nhtop\n\n# Check context switch frequency\nvmstat 1\n</code></pre></p> </li> <li> <p>Insufficient memory: <pre><code># Check memory usage\nfree -h\ncat /proc/meminfo\n</code></pre></p> </li> <li> <p>BPF program performance issues: <pre><code># Check BPF program statistics\nsudo bpftool prog show\nsudo bpftool prog profile\n</code></pre></p> </li> </ol> <p>Solutions: - Stop the scheduler: <code>sudo pkill -f \"./main\"</code> - Check system logs: <code>dmesg | tail -50</code> - Adjust scheduling parameters or report the issue</p>"},{"location":"faq/#q-how-to-stop-the-scheduler","title":"Q: How to stop the scheduler?","text":"<p>A: You can stop the scheduler using the following methods:</p> <pre><code># Method 1: Ctrl+C (if running in foreground)\n^C\n\n# Method 2: Send SIGTERM signal\nsudo pkill -TERM -f \"./main\"\n\n# Method 3: Send SIGINT signal\nsudo pkill -INT -f \"./main\"\n\n# Method 4: Force kill (not recommended)\nsudo pkill -KILL -f \"./main\"\n</code></pre>"},{"location":"faq/#performance-related-questions","title":"Performance Related Questions","text":""},{"location":"faq/#q-how-to-monitor-scheduler-performance","title":"Q: How to monitor scheduler performance?","text":"<p>A: You can use various tools to monitor scheduler performance:</p> <ol> <li> <p>System tools: <pre><code># Monitor CPU usage\nhtop\n\n# Monitor context switches\nvmstat 1\n\n# Monitor scheduling latency\nperf sched record -- sleep 10\nperf sched latency\n</code></pre></p> </li> <li> <p>BPF tools: <pre><code># Check BPF program status\nsudo bpftool prog list | grep sched\n\n# Check BPF map contents\nsudo bpftool map dump name task_info_map\n</code></pre></p> </li> <li> <p>Built-in scheduler monitoring: <pre><code># View scheduler logs\njournalctl -f -u gthulhu\n\n# View BPF trace messages\nsudo cat /sys/kernel/debug/tracing/trace_pipe\n</code></pre></p> </li> </ol>"},{"location":"faq/#q-what-advantages-does-the-scheduler-have-compared-to-cfs","title":"Q: What advantages does the scheduler have compared to CFS?","text":"<p>A: Main advantages of Gthulhu scheduler:</p> Feature CFS Gthulhu Latency Optimization Basic Specialized Task Classification Unified processing Automatic classification CPU Topology Awareness Limited Complete support Dynamic Adjustment Static parameters Real-time adjustment User-space Extension Not supported Fully supported"},{"location":"faq/#q-how-to-adjust-scheduler-parameters","title":"Q: How to adjust scheduler parameters?","text":"<p>A: Currently supported adjustment methods:</p> <ol> <li> <p>Environment variables: <pre><code>export GTHULHU_DEBUG=true\nexport GTHULHU_LOG_LEVEL=DEBUG\nsudo -E ./main\n</code></pre></p> </li> <li> <p>Compile-time parameters (modify <code>main.bpf.c</code>): <pre><code>// Adjust base time slice\n#define BASE_SLICE_NS    3000000ULL  // 3ms instead of 5ms\n</code></pre></p> </li> <li> <p>Runtime API (planned): <pre><code>// Future support for dynamic adjustment\nparams := &amp;SchedulingParams{\n    BaseSliceNs: 3000000,\n    LatencyFactor: 1.5,\n}\nUpdateSchedulingParams(params)\n</code></pre></p> </li> </ol>"},{"location":"faq/#debugging-related-questions","title":"Debugging Related Questions","text":""},{"location":"faq/#q-how-to-enable-debug-mode","title":"Q: How to enable debug mode?","text":"<p>A: You can enable debugging through the following methods:</p> <ol> <li> <p>Environment variables: <pre><code>export GTHULHU_DEBUG=true\nexport GTHULHU_LOG_LEVEL=DEBUG\nsudo -E ./main\n</code></pre></p> </li> <li> <p>BPF tracing: <pre><code># Terminal 1: Start scheduler\nsudo ./main\n\n# Terminal 2: View BPF traces\nsudo cat /sys/kernel/debug/tracing/trace_pipe\n</code></pre></p> </li> <li> <p>System logs: <pre><code># View kernel logs\ndmesg -w\n\n# View systemd logs\njournalctl -f\n</code></pre></p> </li> </ol>"},{"location":"faq/#q-what-to-do-when-encountering-bpf-verifier-errors","title":"Q: What to do when encountering BPF verifier errors?","text":"<p>A: BPF verifier errors usually indicate program issues:</p> <ol> <li> <p>Check error messages: <pre><code># View detailed errors\ndmesg | grep -i bpf\n</code></pre></p> </li> <li> <p>Common issues:</p> </li> <li>Unbounded loops: Ensure all loops have clear exit conditions</li> <li>Memory out of bounds: Check array accesses are within range</li> <li> <p>Pointer usage: Ensure pointers are NULL-checked before use</p> </li> <li> <p>Verify BPF program: <pre><code># Use bpftool to verify\nsudo bpftool prog load main.bpf.o /sys/fs/bpf/test_prog\n</code></pre></p> </li> </ol>"},{"location":"faq/#q-how-to-report-issues","title":"Q: How to report issues?","text":"<p>A: If you encounter problems, please follow these steps:</p> <ol> <li> <p>Collect system information: <pre><code># System information\nuname -a\ncat /etc/os-release\n\n# Kernel version and configuration\nuname -r\ngrep CONFIG_SCHED_CLASS_EXT /boot/config-$(uname -r)\n\n# Go version\ngo version\n\n# Clang version\nclang --version\n</code></pre></p> </li> <li> <p>Collect error logs: <pre><code># Scheduler logs\nsudo ./main 2&gt;&amp;1 | tee gthulhu.log\n\n# System logs\ndmesg &gt; dmesg.log\njournalctl --since \"1 hour ago\" &gt; journal.log\n</code></pre></p> </li> <li> <p>Submit GitHub Issue:</p> </li> <li>Go to Gthulhu Issues</li> <li>Choose appropriate issue template</li> <li>Attach system information and error logs</li> <li>Describe reproduction steps</li> </ol>"},{"location":"faq/#development-related-questions","title":"Development Related Questions","text":""},{"location":"faq/#q-how-to-participate-in-development","title":"Q: How to participate in development?","text":"<p>A: Welcome to participate in development! Please refer to:</p> <ol> <li>View contributing guide: contributing.md</li> <li> <p>Understand code structure: <pre><code>Gthulhu/\n\u251c\u2500\u2500 main.go              # Main program\n\u251c\u2500\u2500 main.bpf.c          # BPF program\n\u251c\u2500\u2500 internal/sched/     # Scheduling logic\n\u2514\u2500\u2500 api/               # API services\n</code></pre></p> </li> <li> <p>Set up development environment: <pre><code>git clone https://github.com/Gthulhu/Gthulhu.git\ncd Gthulhu\nmake dep\nmake build\nmake test\n</code></pre></p> </li> </ol>"},{"location":"faq/#q-how-to-add-custom-scheduling-policies","title":"Q: How to add custom scheduling policies?","text":"<p>A: You can customize through the following methods:</p> <ol> <li> <p>Modify BPF program (<code>main.bpf.c</code>): <pre><code>// Add custom CPU selection logic\ns32 custom_select_cpu(struct task_struct *p, s32 prev_cpu, u64 wake_flags) {\n    // Your logic\n    return selected_cpu;\n}\n</code></pre></p> </li> <li> <p>Modify Go program (<code>main.go</code>): <pre><code>// Add custom task handling logic\nfunc handleCustomTask(taskInfo *TaskInfo) {\n    // Your logic\n}\n</code></pre></p> </li> <li> <p>Use Qumun API: <pre><code>// Implement CustomScheduler interface\ntype MyScheduler struct{}\n\nfunc (s *MyScheduler) ScheduleTask(task *Task) *ScheduleDecision {\n    // Your scheduling logic\n    return decision\n}\n</code></pre></p> </li> </ol>"},{"location":"faq/#compatibility-issues","title":"Compatibility Issues","text":""},{"location":"faq/#q-which-linux-distributions-are-supported","title":"Q: Which Linux distributions are supported?","text":"<p>A: Theoretically supports all distributions with the following conditions:</p> <ul> <li>Kernel version: 6.12+</li> <li>sched_ext support: Enabled</li> <li>Architecture: x86_64</li> </ul> <p>Tested distributions: - Ubuntu 24.04+ - Fedora 39+ - Arch Linux (latest)</p> <p>Planned support: - CentOS/RHEL 9+ - openSUSE Tumbleweed - Debian 13+</p>"},{"location":"faq/#q-can-it-run-in-containers","title":"Q: Can it run in containers?","text":"<p>A: Yes, but requires special permissions:</p> <pre><code># Docker execution\ndocker run --privileged=true --pid host --rm gthulhu:latest\n\n# Podman execution\npodman run --privileged --pid host --rm gthulhu:latest\n\n# Kubernetes execution (requires special configuration)\n# Please refer to examples/kubernetes/ directory\n</code></pre>"},{"location":"faq/#q-does-it-conflict-with-other-schedulers","title":"Q: Does it conflict with other schedulers?","text":"<p>A: Gthulhu will replace the system default scheduler, therefore:</p> <ul> <li>Cannot run simultaneously with other sched_ext schedulers</li> <li>Will not affect real-time scheduling classes (SCHED_FIFO, SCHED_RR)</li> <li>Will replace CFS scheduler functionality</li> </ul> <p>Problem not resolved?</p> <p>If your problem is not answered here, please:</p> <ol> <li>Check GitHub Issues</li> <li>Search existing problems and solutions</li> <li>If not found, please create a new issue</li> </ol>"},{"location":"how-it-works/","title":"How It Works","text":"<p>This page provides detailed information about the core working principles and technical architecture of Gthulhu and Qumun schedulers.</p>"},{"location":"how-it-works/#overall-architecture","title":"Overall Architecture","text":""},{"location":"how-it-works/#dual-component-design","title":"Dual-Component Design","text":"<p>Gthulhu scheduler adopts a modern dual-component architecture:</p> <p></p>"},{"location":"how-it-works/#1-bpf-scheduler","title":"1. BPF Scheduler","text":"<p>A BPF scheduler implemented based on the Linux kernel's sched_ext framework, responsible for low-level scheduling functions such as task queue management, CPU selection logic, and scheduling execution. The BPF scheduler communicates with the user-space Gthulhu scheduler through two types of eBPF Maps: ring buffer and user ring buffer.</p>"},{"location":"how-it-works/#2-gthulhu-user-space-scheduler","title":"2. Gthulhu (User Space Scheduler)","text":"<p>The Gthulhu scheduler, developed using the qumun framework, receives information about tasks to be scheduled from the ring buffer eBPF Map and makes decisions based on scheduling policies. Finally, the scheduling results are sent back to the BPF Scheduler through the user ring buffer eBPF Map.</p> <p></p> <p>The Gthulhu scheduler supports a plugin-based design, allowing developers to extend and customize scheduling policies according to their needs. Gthulhu/plugin currently implements two schedulers:</p> <ul> <li>Simple Scheduler: A simple scheduler implemented with reference to scx_simple, with core logic of approximately 200 lines.</li> <li>Gthulhu Scheduler: A virtual runtime-based scheduler with latency-sensitive optimization and CPU topology-aware features.</li> </ul>"},{"location":"how-it-works/#cpu-topology-aware-scheduling","title":"CPU Topology-Aware Scheduling","text":""},{"location":"how-it-works/#hierarchical-cpu-selection","title":"Hierarchical CPU Selection","text":"<pre><code>graph TB\n    A[Task Needs CPU] --&gt; AA{Single CPU Allowed?}\n    AA --&gt;|Yes| AB[Check if CPU is Idle]\n    AA --&gt;|No| B{SMT System?}\n\n    AB --&gt;|Idle| AC[Use Previous CPU]\n    AB --&gt;|Not Idle| AD[Fail with EBUSY]\n\n    B --&gt;|Yes| C{Previous CPU Full-Idle Core?}\n    B --&gt;|No| G{Previous CPU Idle?}\n\n    C --&gt;|Yes| D[Use Previous CPU]\n    C --&gt;|No| E{Full-Idle CPU in L2 Cache?}\n\n    E --&gt;|Yes| F[Use CPU in Same L2 Cache]\n    E --&gt;|No| H{Full-Idle CPU in L3 Cache?}\n\n    H --&gt;|Yes| I[Use CPU in Same L3 Cache]\n    H --&gt;|No| J{Any Full-Idle Core Available?}\n\n    J --&gt;|Yes| K[Use Any Full-Idle Core]\n    J --&gt;|No| G\n\n    G --&gt;|Yes| L[Use Previous CPU]\n    G --&gt;|No| M{Any Idle CPU in L2 Cache?}\n\n    M --&gt;|Yes| N[Use CPU in Same L2 Cache]\n    M --&gt;|No| O{Any Idle CPU in L3 Cache?}\n\n    O --&gt;|Yes| P[Use CPU in Same L3 Cache]\n    O --&gt;|No| Q{Any Idle CPU Available?}\n\n    Q --&gt;|Yes| R[Use Any Idle CPU]\n    Q --&gt;|No| S[Return EBUSY]\n</code></pre>"},{"location":"how-it-works/#api-and-scheduling-policy-design","title":"API and Scheduling Policy Design","text":"<p>Gthulhu implements a flexible mechanism to dynamically adjust its scheduling behavior through a RESTful API interface. This allows operators to fine-tune the scheduler's performance characteristics without restarting or recompiling the code.</p>"},{"location":"how-it-works/#api-architecture","title":"API Architecture","text":"<p>The API server provides endpoints for retrieving and setting scheduling strategies:</p> <pre><code>graph TB\n    A[Gthulhu Scheduler] --&gt;|Periodic Requests| B[API Server]\n    C[Operators/Admins] --&gt;|Configure Strategies| B\n    B --&gt;|Return Strategies| A\n    A --&gt;|Apply Strategies| D[Task Scheduling]\n\n    subgraph \"External Management\"\n        C\n    end\n\n    subgraph \"Scheduling System\"\n        A\n        D\n    end\n</code></pre>"},{"location":"how-it-works/#api-endpoints","title":"API Endpoints","text":"<p>The API server exposes two primary endpoints for scheduling strategy management:</p> <ul> <li>GET /api/v1/scheduling/strategies: Retrieves current scheduling strategies</li> <li>POST /api/v1/scheduling/strategies: Sets new scheduling strategies</li> </ul>"},{"location":"how-it-works/#scheduling-strategy-data-model","title":"Scheduling Strategy Data Model","text":"<p>A scheduling strategy is represented using the following structure:</p> <pre><code>{\n  \"scheduling\": [\n    {\n      \"priority\": true,\n      \"execution_time\": 20000000,\n      \"pid\": 12345\n    },\n    {\n      \"priority\": false,\n      \"execution_time\": 10000000,\n      \"selectors\": [\n        {\n          \"key\": \"tier\",\n          \"value\": \"control-plane\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>Key components of a scheduling strategy:</p> <ol> <li>Priority (<code>boolean</code>): When true, the task's virtual runtime is set to the minimum value, effectively giving it the highest scheduling priority</li> <li>Execution Time (<code>uint64</code>): Custom time slice in nanoseconds for the task</li> <li>PID (<code>int</code>): Process ID to which the strategy applies</li> <li>Selectors (<code>array</code>): Optional Kubernetes label selectors for targeting groups of processes</li> </ol>"},{"location":"how-it-works/#strategy-application-flow","title":"Strategy Application Flow","text":"<p>The process of fetching and applying scheduling strategies follows this sequence:</p> <pre><code>sequenceDiagram\n    participant S as Scheduler\n    participant A as API Server\n    participant T as Task Pool\n\n    S-&gt;&gt;S: Initialize scheduler\n    S-&gt;&gt;S: Start strategy fetcher\n\n    loop Every interval seconds\n        S-&gt;&gt;A: Request current strategies\n        A-&gt;&gt;S: Return strategy list\n        S-&gt;&gt;S: Update strategy map\n    end\n\n    Note over S,T: During task scheduling\n    T-&gt;&gt;S: Task needs scheduling\n    S-&gt;&gt;S: Check if task has custom strategy\n    S-&gt;&gt;S: Apply priority setting if needed\n    S-&gt;&gt;S: Apply custom execution time if specified\n    S-&gt;&gt;T: Schedule task with applied strategy\n</code></pre>"},{"location":"how-it-works/#kubernetes-integration","title":"Kubernetes Integration","text":"<p>For containerized environments, Gthulhu can map scheduling strategies to specific pods using label selectors:</p> <ol> <li>Label Selector Resolution: The API server translates label selectors into specific PIDs by scanning the system for matching pods</li> <li>PID Mapping: Each pod's processes are identified and associated with the appropriate scheduling strategy</li> <li>Dynamic Updates: As pods are created, destroyed, or moved, the scheduler adapts by periodically refreshing its strategies</li> </ol>"},{"location":"how-it-works/#strategy-prioritization-logic","title":"Strategy Prioritization Logic","text":"<p>When applying scheduling strategies, Gthulhu follows these rules:</p> <ol> <li>Direct PID Match: Strategies that explicitly specify a PID have highest precedence</li> <li>Label Selector Match: Strategies using label selectors apply to all matching processes</li> <li>Default Behavior: Processes without specific strategies use the standard scheduling algorithm</li> </ol>"},{"location":"how-it-works/#configuration-parameters","title":"Configuration Parameters","text":"<p>The strategy fetching behavior can be configured through the scheduler's configuration file:</p> <pre><code>api:\n  url: \"http://api-server:8080\"   # API server endpoint\n  interval: 10                    # Refresh interval in seconds\n</code></pre> <p>This architecture allows for dynamic, fine-grained control over scheduling behavior without interrupting the scheduler's operation.</p>"},{"location":"how-it-works/#bpf-and-user-space-communication","title":"BPF and User Space Communication","text":""},{"location":"how-it-works/#communication-mechanism","title":"Communication Mechanism","text":"<pre><code>sequenceDiagram\n    participant K as BPF (Kernel Space)\n    participant U as Go (User Space)\n\n    K-&gt;&gt;U: Task Creation Event\n    U-&gt;&gt;U: Analyze Task Characteristics\n    U-&gt;&gt;K: Set Scheduling Parameters\n    K-&gt;&gt;K: Apply Scheduling Decision\n    K-&gt;&gt;U: Statistics Update\n    U-&gt;&gt;U: Dynamic Strategy Adjustment\n</code></pre>"},{"location":"how-it-works/#debugging-and-monitoring","title":"Debugging and Monitoring","text":""},{"location":"how-it-works/#bpf-tracing","title":"BPF Tracing","text":"<pre><code># Monitor BPF program execution\nsudo cat /sys/kernel/debug/tracing/trace_pipe\n\n# Check BPF statistics\nsudo bpftool prog show\nsudo bpftool map dump name task_info_map\n</code></pre>"},{"location":"how-it-works/#differences-from-cfs","title":"Differences from CFS","text":"Feature CFS (Completely Fair Scheduler) Gthulhu Scheduling Policy Virtual runtime based Virtual runtime + latency optimization Task Classification Unified processing Automatic classification optimization CPU Selection Basic load balancing Topology-aware + cache affinity Dynamic Adjustment Limited Comprehensive adaptive adjustment Extensibility Kernel built-in User-space extensible"},{"location":"how-it-works/#future-development-directions","title":"Future Development Directions","text":"<ol> <li>Machine Learning Integration: Use ML models to predict task behavior</li> <li>Container-Aware Scheduling: Optimization for containerized environments</li> <li>Energy Optimization: Integration of power management considerations</li> <li>Real-Time Task Support: Support for hard real-time task scheduling</li> </ol> <p>Deep Dive</p> <p>For more implementation details, refer to the API Reference and source code comments.</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide helps you install and configure Gthulhu and Qumun.</p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":""},{"location":"installation/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>CPU: x86_64 architecture processor</li> <li>Memory: At least 4GB RAM</li> <li>Storage: At least 10GB free space</li> </ul>"},{"location":"installation/#software-requirements","title":"Software Requirements","text":"<p>Kernel Version Requirement</p> <p>Linux Kernel 6.12+ with sched_ext enabled is required. Please make sure your kernel meets this requirement.</p>"},{"location":"installation/#required-packages","title":"Required Packages","text":"Package Version Requirement Purpose Go 1.22+ User-space scheduler development LLVM/Clang 17+ BPF program compilation libbpf Latest BPF library make - Build tool git - Version control"},{"location":"installation/#check-kernel-support","title":"Check Kernel Support","text":"<pre><code># Check kernel version\nuname -r\n\n# Check sched_ext support\ngrep -r \"CONFIG_SCHED_CLASS_EXT\" /boot/config-$(uname -r) || \\\ncat /proc/config.gz | gunzip | grep \"CONFIG_SCHED_CLASS_EXT\"\n\n# Check BPF support\ngrep -r \"CONFIG_BPF\" /boot/config-$(uname -r) | head -5\n</code></pre>"},{"location":"installation/#install-gthulhu-on-ubuntu-2504","title":"Install Gthulhu on Ubuntu 25.04","text":"<p>To save time, we skip kernel compilation/installation and use Ubuntu 25.04 which directly supports sched_ext: https://canonical.com/blog/canonical-releases-ubuntu-25-04-plucky-puffin</p> <p>Use the following script to install required packages:</p> <pre><code>sudo apt-get update\nsudo apt-get install --yes bsdutils\nsudo apt-get install --yes build-essential\nsudo apt-get install --yes pkgconf\nsudo apt-get install --yes llvm-17 clang-17 clang-format-17\nsudo apt-get install --yes libbpf-dev libelf-dev libzstd-dev zlib1g-dev\nsudo apt-get install --yes virtme-ng\nsudo apt-get install --yes gcc-multilib\nsudo apt-get install --yes systemtap-sdt-dev\nsudo apt-get install --yes python3 python3-pip ninja-build\nsudo apt-get install --yes libseccomp-dev protobuf-compiler\nsudo apt-get install --yes meson cmake\nsudo apt-get install --yes cargo\nfor tool in \"clang\" \"clang-format\" \"llc\" \"llvm-strip\"\ndo\n  sudo rm -f /usr/bin/$tool\n  sudo ln -s /usr/bin/$tool-17 /usr/bin/$tool\ndone\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env\n</code></pre> <p>These packages include everything needed to build scx.</p> <p>Before building Gthulhu, install Golang:</p> <pre><code>wget https://go.dev/dl/go1.24.2.linux-amd64.tar.gz\nsudo tar -C /usr/local -xzf go1.24.2.linux-amd64.tar.gz\n</code></pre> <p>Add the following to ~/.profile:</p> <pre><code>export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$GOROOT/bin:$GOPATH/bin:$PATH\n</code></pre> <p>After adding, run source ~/.profile to apply the changes.</p> <p>After the prerequisites are installed, install Gthulhu:</p> <pre><code>git clone https://github.com/Gthulhu/Gthulhu.git\ncd Gthulhu\nmake dep\ngit submodule init\ngit submodule sync\ngit submodule update\ncd scx\nmeson setup build --prefix ~\nmeson compile -C build\ncd ..\ncd libbpfgo\nmake\ncd ..\nmake\n</code></pre> <p>After compilation, Gthulhu should run successfully on your system:</p> <p></p> <p>You can observe Gthulhu\u2019s output to see how many tasks are currently being scheduled by Gthulhu.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#issue-1-undefined-reference-to-eu_search_tree_init","title":"Issue 1: <code>undefined reference to eu_search_tree_init</code>","text":"<p>If you encounter this, it\u2019s because the system is using the elfutils version of libelf. You can download and compile libelf yourself to resolve it: <pre><code>sudo apt remove --purge elfutils libelf-dev\ncd ~\ngit clone https://github.com/arachsys/libelf.git\ncd libelf\nmake\nsudo make install\n</code></pre></p>"},{"location":"installation/#issue-2-error-program-clang-not-found-or-not-executable","title":"Issue 2: <code>ERROR: Program 'clang' not found or not executable</code>","text":"<p>If you see this when running meson setup build --prefix ~, try: <pre><code>sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-17 100\nsudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-17 100\n</code></pre></p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, you can:</p> <ul> <li>\ud83d\udcd6 Read How It Works (how-it-works.md) to understand the scheduler\u2019s mechanisms</li> <li>\ud83c\udfaf See Project Goals (project-goals.md) for design principles</li> <li>\ud83d\udd27 Refer to the API Reference (api-reference.md) for custom development</li> </ul> <p>Installation Complete</p> <p>Congratulations! You have successfully installed the Gthulhu scheduler. If you encounter any issues, check the FAQ (faq.md) or open an issue on GitHub.</p>"},{"location":"k8s/","title":"Deploying Gthulhu with Kubernetes","text":"<p>This document explains how to deploy the Gthulhu scheduler and API server in a Kubernetes environment.</p>"},{"location":"k8s/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the installation and setup of Microk8s, and ensure <code>kubectl</code> works properly.</li> <li>Enable Microk8s' built-in container registry. For details, see: How to use the built-in registry.</li> <li>Enable Microk8s RBAC functionality using <code>microk8s enable rbac</code></li> </ul>"},{"location":"k8s/#building-gthulhu-docker-images","title":"Building Gthulhu Docker Images","text":"<p>First, obtain the Gthulhu project source code: <pre><code>$ git clone --recursive https://github.com/Gthulhu/Gthulhu.git\n</code></pre></p> <p>Next, refer to the Gthulhu Installation Guide to complete the Gthulhu compilation. After completion, use the following commands to build and push Docker images to the local Microk8s registry:</p> <pre><code>$ make image\n$ cd api\n$ make image\n$ cd ..\n$ docker push 127.0.0.1:32000/gthulhu-api:latest\n$ docker push 127.0.0.1:32000/gthulhu:latest\n</code></pre>"},{"location":"k8s/#deploying-gthulhu-to-kubernetes","title":"Deploying Gthulhu to Kubernetes","text":"<p>Next, use the following commands to deploy Gthulhu to the Kubernetes cluster:</p> <pre><code>$ cd chart\n$ helm install gthulhu gthulhu\n</code></pre> <p>If no errors occur, you should be able to see that the Gthulhu pods have started successfully:</p> <pre><code>$ kubectl get po | grep gthulhu\ngthulhu-api-72ts9                              1/1     Running   0              9s\ngthulhu-scheduler-lph8h                        1/1     Running   0              9s\n</code></pre> <p>Check the scheduler logs to confirm it's working properly:</p> <pre><code>$ kubectl logs gthulhu-scheduler-lph8h\n2025/09/22 13:15:09 Scheduler config: SLICE_NS_DEFAULT=5000000, SLICE_NS_MIN=500000\n2025/09/22 13:15:09 Debug mode enabled\n2025/09/22 13:15:09 Early processing disabled\nlibbpf: struct_ops goland: member priv not found in kernel, skipping it as it's set to zero\nmap: cpu_ctx_stor, type: BPF_MAP_TYPE_PERCPU_ARRAY, fd: 3\nmap: task_ctx_stor, type: BPF_MAP_TYPE_TASK_STORAGE, fd: 7\nmap: queued, type: BPF_MAP_TYPE_RINGBUF, fd: 8\nmap: dispatched, type: BPF_MAP_TYPE_USER_RINGBUF, fd: 9\nmap: priority_tasks, type: BPF_MAP_TYPE_HASH, fd: 10\nmap: running_task, type: BPF_MAP_TYPE_HASH, fd: 11\nmap: usersched_timer, type: BPF_MAP_TYPE_ARRAY, fd: 12\nmap: main_bpf.rodata, type: BPF_MAP_TYPE_ARRAY, fd: 13\nmap: .data.uei_dump, type: BPF_MAP_TYPE_ARRAY, fd: 14\nmap: main_bpf.data, type: BPF_MAP_TYPE_ARRAY, fd: 15\nmap: main_bpf.bss, type: BPF_MAP_TYPE_ARRAY, fd: 16\nmap: goland, type: BPF_MAP_TYPE_STRUCT_OPS, fd: 17\n2025/09/22 13:15:09 Topology: map[L2:map[0-1:[0 1] 10-11:[10 11] 12-13:[12 13] 14-15:[14 15] 16-19:[16 17 18 19] 2-3:[2 3] 4-5:[4 5] 6-7:[6 7] 8-9:[8 9]] L3:map[0-19:[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]]]\n2025/09/22 13:15:09 UserSched's Pid: 2716543\n2025/09/22 13:15:09 API config: URL=http://gthulhu-api:80/api/v1/scheduling/strategies, Interval=5 seconds\n2025/09/22 13:15:09 Started scheduling strategy fetcher with JWT authentication, interval 5 seconds\n2025/09/22 13:15:09 scheduler started\n2025/09/22 13:15:09 Failed to fetch initial scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:14 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:19 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:19 bss data: {\"usersched_last_run_at\":3212826452599740,\"nr_queued\":0,\"nr_scheduled\":0,\"nr_running\":1,\"nr_online_cpus\":20,\"nr_user_dispatches\":90846,\"nr_kernel_dispatches\":5,\"nr_cancel_dispatches\":0,\"nr_bounce_dispatches\":0,\"nr_failed_dispatches\":0,\"nr_sched_congested\":0}\n2025/09/22 13:15:19 Failed to send metrics: failed to send metrics request: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:24 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:29 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:29 bss data: {\"usersched_last_run_at\":3212826452599740,\"nr_queued\":1,\"nr_scheduled\":0,\"nr_running\":2,\"nr_online_cpus\":20,\"nr_user_dispatches\":174142,\"nr_kernel_dispatches\":9,\"nr_cancel_dispatches\":0,\"nr_bounce_dispatches\":0,\"nr_failed_dispatches\":0,\"nr_sched_congested\":0}\n2025/09/22 13:15:29 Failed to send metrics: failed to send metrics request: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:34 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:39 bss data: {\"usersched_last_run_at\":3212826452599740,\"nr_queued\":0,\"nr_scheduled\":0,\"nr_running\":2,\"nr_online_cpus\":20,\"nr_user_dispatches\":263151,\"nr_kernel_dispatches\":11,\"nr_cancel_dispatches\":0,\"nr_bounce_dispatches\":0,\"nr_failed_dispatches\":0,\"nr_sched_congested\":0}\n2025/09/22 13:15:39 Successfully sent metrics to API server\n2025/09/22 13:15:45 Scheduling strategies updated: 4 strategies\n2025/09/22 13:15:45 Updated strategy map with 4 strategies\n2025/09/22 13:15:45 Scheduling strategies updated: 4 strategies\n2025/09/22 13:15:45 Updated strategy map with 4 strategies\n2025/09/22 13:15:49 bss data: {\"usersched_last_run_at\":3212826452599740,\"nr_queued\":0,\"nr_scheduled\":0,\"nr_running\":9,\"nr_online_cpus\":20,\"nr_user_dispatches\":367610,\"nr_kernel_dispatches\":15,\"nr_cancel_dispatches\":0,\"nr_bounce_dispatches\":0,\"nr_failed_dispatches\":0,\"nr_sched_congested\":0}\n2025/09/22 13:15:49 Successfully sent metrics to API server\n2025/09/22 13:15:49 Scheduling strategies updated: 4 strategies\n</code></pre> <p>If you can see logs similar to the above, it means Gthulhu is successfully running in the Kubernetes cluster.</p> <p>Learn More</p> <p>The Helm chart provided by Gthulhu uses DaemonSet as the pod generator to ensure that each node runs a Gthulhu scheduler service.</p>"},{"location":"mentioned/","title":"@ Mentioned","text":"<p>This page collects articles and coverage of the Gthulhu and Qumun projects from various media outlets, blogs, and websites.</p>"},{"location":"mentioned/#conference-talks","title":"Conference Talks","text":""},{"location":"mentioned/#coscup-2025-develop-a-linux-scheduler-using-golang","title":"COSCUP 2025: Develop a Linux Scheduler using Golang!","text":"<p>Published: August 2025 Author: Ian Chen (Founder of Gthulhu) Platform: COSCUP Official Website Link: COSCUP 2025</p>"},{"location":"mentioned/#news-coverage","title":"News Coverage","text":""},{"location":"mentioned/#jdon","title":"Jdon","text":"<p>Published: 2025 Author: banq Platform: Jdon Blog Link: www.jdon.com</p>"},{"location":"mentioned/#echo-news-93","title":"Echo News #93","text":"<p>Published: 2025  Author: Bill Mulligan Platform: LinkedIn Link: Echo News #93 Echo News Issue #93 featured the Gthulhu' MCP server project, highlighting our innovative work in the Linux scheduler space.</p>"},{"location":"mentioned/#echo-news-85","title":"Echo News #85","text":"<p>Published: 2025  Author: Bill Mulligan Platform: LinkedIn and eBPF.io Newsletter Link: Echo News #85 https://ebpf.io/newsletter/</p> <p>Echo News Issue #85 featured the Gthulhu project, highlighting our innovative work in the Linux scheduler space.</p>"},{"location":"mentioned/#technical-blogs","title":"Technical Blogs","text":""},{"location":"mentioned/#free5gc-project-blog","title":"Free5GC Project Blog","text":""},{"location":"mentioned/#article-1-hands-on-with-sched_ext-building-custom-ebpf-cpu-schedulers","title":"Article 1: Hands-On with sched_ext: Building Custom eBPF CPU Schedulers","text":"<p>Published: May 9, 2025 Platform: The free5GC Official Blog Link: Hands-On with sched_ext: Building Custom eBPF CPU Schedulers</p>"},{"location":"mentioned/#article-2-exploring-sched_ext-bpf-powered-cpu-schedulers-in-the-linux-kernel","title":"Article 2: Exploring sched_ext: BPF-Powered CPU Schedulers in the Linux Kernel","text":"<p>Published: March 5, 2025 Platform: The free5GC Official Blog Link: Exploring sched_ext: BPF-Powered CPU Schedulers in the Linux Kernel</p>"},{"location":"mentioned/#article-3-improving-network-performance-with-custom-ebpf-based-schedulers","title":"Article 3: Improving Network Performance with Custom eBPF-based Schedulers","text":"<p>Published: July 25, 2025 Platform: The free5GC Official Blog Link: Improving Network Performance with Custom eBPF-based Schedulers</p>"},{"location":"mentioned/#community-feedback","title":"Community Feedback","text":"<p>Share Your Content</p> <p>If you see any mention of the Gthulhu project anywhere, please let us know through:</p> <ul> <li>Opening an Issue on GitHub</li> <li>Emailing the project maintainers</li> <li>Sharing in GitHub Discussions</li> </ul>"},{"location":"mentioned/#citation-format","title":"Citation Format","text":"<p>If you want to cite the Gthulhu project in academic papers, technical articles, or blog posts, you can use the following formats:</p>"},{"location":"mentioned/#bibtex-format","title":"BibTeX Format","text":"<pre><code>@misc{gthulhu2025,\n  title={Gthulhu: A Cloud-Native Linux Scheduler based on sched\\_ext},\n  author={Gthulhu Development Team},\n  year={2025},\n  url={https://github.com/Gthulhu/Gthulhu},\n  note={Open-source Linux scheduler project}\n}\n</code></pre>"},{"location":"mentioned/#ieee-format","title":"IEEE Format","text":"<pre><code>Gthulhu Development Team, \"Gthulhu: A Cloud-Native Linux Scheduler based on sched_ext,\" 2025. [Online]. Available: https://github.com/Gthulhu/Gthulhu\n</code></pre>"},{"location":"mentioned/#apa-format","title":"APA Format","text":"<pre><code>Gthulhu Development Team. (2025). Gthulhu: A Cloud-Native Linux Scheduler based on sched_ext. Retrieved from https://github.com/Gthulhu/Gthulhu\n</code></pre>"},{"location":"mentioned/#media-resources","title":"Media Resources","text":"<p>If you're a journalist, blogger, or content creator looking to cover the Gthulhu project, we're happy to provide:</p> <ul> <li>\ud83d\uddbc\ufe0f Project logos and image resources</li> <li>\ud83d\udcca Technical presentations and materials</li> <li>\ud83c\udfa4 Project team interview opportunities</li> <li>\ud83d\udcdd Official statements and press releases</li> </ul> <p>Please contact us through GitHub Issues or reach out to the project maintainers.</p> <p>Stay Updated</p> <p>This page is regularly updated with the latest media coverage and community mentions. You can also follow our GitHub project for the latest news.</p>"},{"location":"project-goals/","title":"Project Goals","text":"<p>This page introduces the design philosophy, development objectives, and future vision of the Gthulhu and Qumun projects.</p>"},{"location":"project-goals/#project-vision","title":"Project Vision","text":"<p>Inspired by scx_rustland, Ian rebuilt this eBPF-based scheduler using Golang and named it Gthulhu. Gthulhu aims to be a flexible and efficient CPU scheduler. Regular users can optimize application latency or throughput through configuration. For advanced developers, Gthulhu provides a plugin mechanism, allowing custom scheduling strategies to be implemented in user space and decisions to be delivered to the Linux Kernel via eBPF programs. This enables the Linux scheduler to better adapt to the demands of modern workloads.</p>"},{"location":"project-goals/#development-principles","title":"Development Principles","text":"<ol> <li>Stay in sync with scx: scx is a scheduler extension framework in the Linux Kernel. Gthulhu will continue to follow scx\u2019s development to ensure compatibility with the latest Kernel versions. Moreover, Gthulhu leverages the power of the community to make scheduler implementations easier to share and reuse.</li> <li>As permissive licensing as possible: Gthulhu uses GPL only where necessary, while other parts adopt the more permissive Apache license, allowing developers greater freedom to use and modify the code.</li> <li>Easy to extend and customize: Gthulhu is designed with various application scenarios in mind, providing multiple configuration options and a plugin mechanism so users can tailor scheduling strategies to their needs.</li> <li>Cloud-native oriented: Gthulhu focuses on supporting cloud-native applications, especially containerized workloads, and integrates seamlessly with container orchestration platforms such as Kubernetes.</li> </ol>"},{"location":"project-goals/#target-application-scenarios","title":"Target Application Scenarios","text":"<ol> <li>Low-latency applications: Gthulhu can optimize the performance of low-latency applications, such as communication systems [1], games, and financial trading systems.</li> <li>High-throughput workloads: Gthulhu supports high-throughput workloads, such as big data processing and machine learning tasks, ensuring these applications can fully utilize system resources.</li> <li>Multi-node distributed systems: Gthulhu can coordinate resource allocation in multi-node distributed systems, improving overall system performance and stability.</li> </ol> <p>Project Mission</p> <p>We believe that through continuous technological innovation and open community collaboration, Gthulhu will become an important force in the Linux scheduler field, providing better performance and experience for modern applications.</p> <p>Contributing</p> <p>If you share our goals and vision, you are welcome to join our developer community! See the Contribution Guide to learn how to participate in project development.</p>"},{"location":"zh/","title":"\u9996\u9801","text":"<p>\u6b61\u8fce\u4f86\u5230 Gthulhu \u548c Qumun \u7684\u5b98\u65b9\u6587\u6a94\uff01</p>"},{"location":"zh/#latest-news","title":"\ud83d\udcf0 Latest News","text":"<p>Gthulhu \u52a0\u5165 CNCF Landscape</p> <p>Gthulhu \u73fe\u5df2\u6210\u70ba CNCF (Cloud Native Computing Foundation) Landscape \u7684\u4e00\u90e8\u5206\uff0c\u52a0\u5165\u96f2\u539f\u751f\u6280\u8853\u751f\u614b\u7cfb\u7d71\u3002</p> <p>Gthulhu \u52a0\u5165 eBPF Application Landscape</p> <p>Gthulhu \u5df2\u88ab\u7d0d\u5165 eBPF Application Landscape\uff0c\u88ab\u8a8d\u53ef\u70ba\u5275\u65b0\u7684\u57fa\u65bc eBPF \u7684\u8abf\u5ea6\u89e3\u6c7a\u65b9\u6848\u3002</p>"},{"location":"zh/#_1","title":"\u6982\u89bd","text":"<p>Gthulhu \u662f\u70ba\u96f2\u539f\u751f\u751f\u614b\u6253\u9020\u7684\u4e0b\u4e00\u4ee3\u8abf\u5ea6\u5668\uff0c\u4ee5 Go \u8a9e\u8a00\u958b\u767c\uff0c\u4e26\u7531 qumun \u6846\u67b6\u9a45\u52d5\u3002</p> <p>\u540d\u7a31 Gthulhu \u9748\u611f\u4f86\u81ea\u795e\u8a71\u751f\u7269\u514b\u8607\u9b6f\uff08Cthulhu\uff09\uff0c\u5176\u591a\u689d\u89f8\u624b\u8c61\u5fb5\u638c\u8235\u8207\u638c\u63a7\u3002\u6b63\u5982\u89f8\u624b\u53ef\u6293\u63e1\u8207\u5f15\u5c0e\uff0cGthulhu \u4ee3\u8868\u5728\u73fe\u4ee3\u5206\u6563\u5f0f\u7cfb\u7d71\u7684\u8907\u96dc\u4e16\u754c\u88e1\u638c\u8235\u524d\u884c\u7684\u80fd\u529b\u2014\u2014\u5c31\u50cf Kubernetes \u4ee5\u8239\u8235\u4f5c\u70ba\u5176\u5fbd\u7ae0\u4e00\u6a23\u3002</p> <p>\u5b57\u9996\u300cG\u300d\u6e90\u81ea\u672c\u5c08\u6848\u7684\u6838\u5fc3\u8a9e\u8a00 Go\uff0c\u7a81\u986f\u5176\u6280\u8853\u57fa\u790e\u8207\u5c0d\u958b\u767c\u8005\u53cb\u5584\u7684\u8a2d\u8a08\u3002</p> <p>\u5728\u5e95\u5c64\uff0cGthulhu \u904b\u884c\u65bc qumun \u6846\u67b6\u4e4b\u4e0a\uff08qumun \u5728\u53f0\u7063\u539f\u4f4f\u6c11\u65cf\u5e03\u8fb2\u8a9e\u4e2d\u610f\u70ba\u300c\u5fc3\u81df\u300d\uff09\uff0c\u547c\u61c9\u8abf\u5ea6\u5668\u4f5c\u70ba\u4f5c\u696d\u7cfb\u7d71\u300c\u5fc3\u81df\u300d\u7684\u89d2\u8272\u3002\u9019\u4e0d\u50c5\u5f37\u8abf\u5176\u5728\u5354\u8abf\u5de5\u4f5c\u8ca0\u8f09\u4e0a\u7684\u6838\u5fc3\u5730\u4f4d\uff0c\u4e5f\u5411\u5168\u7403\u958b\u6e90\u793e\u7fa4\u5206\u4eab\u4e00\u90e8\u5206\u53f0\u7063\u539f\u4f4f\u6c11\u65cf\u6587\u5316\u3002</p>"},{"location":"zh/#_2","title":"\u9748\u611f\u4f86\u6e90","text":"<p>\u672c\u5c08\u6848\u53d7 Andrea Righi \u7684\u6f14\u8b1b\u300cCrafting a Linux kernel scheduler in Rust\u300d\u555f\u767c\u3002\u65bc\u662f\u6211\u82b1\u6642\u9593\u91cd\u5beb scx_rustland\uff0c\u547d\u540d\u70ba qumun\uff08scx_goland\uff09\u3002\u5728\u5b8c\u6210\u57fa\u790e\u8a2d\u65bd\u67b6\u69cb\u5f8c\uff0c\u6211\u91cd\u65b0\u5b9a\u7fa9\u4e86\u5c08\u6848\u4f7f\u547d\uff0c\u8b93 Gthulhu \u6210\u70ba\u9762\u5411\u96f2\u539f\u751f\u5de5\u4f5c\u8ca0\u8f09\u7684\u901a\u7528\u8abf\u5ea6\u89e3\u6c7a\u65b9\u6848\u3002</p>"},{"location":"zh/#_3","title":"\u529f\u80fd\u8207\u50f9\u503c","text":"<p>Gthulhu \u7c21\u5316\u4e86\u5f9e\u4f7f\u7528\u8005\u610f\u5716\u5230\u8abf\u5ea6\u7b56\u7565\u7684\u8f49\u63db\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u4f7f\u7528\u6a5f\u5668\u53cb\u5584\u7684\u683c\u5f0f\uff08\u4f8b\u5982 JSON\uff09\uff0c\u6216\u900f\u904e\u5177\u5099 MCP \u7684 AI \u4ee3\u7406\u8207 Gthulhu \u6e9d\u901a\uff0c\u4e4b\u5f8c Gthulhu \u6703\u6839\u64da\u60a8\u7684\u8f38\u5165\u70ba\u7279\u5b9a\u5de5\u4f5c\u8ca0\u8f09\u9032\u884c\u6700\u4f73\u5316\u3002</p>"},{"location":"zh/#demo","title":"DEMO","text":"<p>\u9ede\u64ca\u4e0b\u65b9\u9023\u7d50\u89c0\u770b\u6211\u5011\u5728 YouTube \u4e0a\u7684 DEMO\uff01</p>"},{"location":"zh/#_4","title":"\u67b6\u69cb\u8a2d\u8a08","text":"<p>\u9019\u5957\u8abf\u5ea6\u5668\u7cfb\u7d71\u63a1\u7528\u96d9\u7d44\u4ef6\u67b6\u69cb\uff1a</p> <ol> <li>BPF \u7d44\u4ef6: \u5be6\u4f5c\u4f4e\u968e sched-ext \u529f\u80fd\uff0c\u5728\u6838\u5fc3\u7a7a\u9593\u904b\u884c</li> <li>\u4f7f\u7528\u8005\u7a7a\u9593\u8abf\u5ea6\u5668: \u4f7f\u7528 Go \u8a9e\u8a00\u958b\u767c\uff0c\u5be6\u4f5c\u5be6\u969b\u7684\u8abf\u5ea6\u7b56\u7565</li> </ol> <pre><code>graph TB\n    A[\u4f7f\u7528\u8005\u7a7a\u9593\u61c9\u7528\u7a0b\u5f0f] --&gt; B[Go \u8abf\u5ea6\u5668]\n    B --&gt; C[BPF \u7a0b\u5f0f]\n    C --&gt; D[Linux \u6838\u5fc3 sched_ext]\n    D --&gt; E[CPU \u6838\u5fc3]\n</code></pre>"},{"location":"zh/#_5","title":"\u958b\u6e90\u6388\u6b0a","text":"<p>\u672c\u5c08\u6848\u63a1\u7528 GNU General Public License version 2 \u6388\u6b0a\u3002</p>"},{"location":"zh/#_6","title":"\u793e\u7fa4\u8207\u652f\u63f4","text":"<ul> <li>GitHub: Gthulhu | Qumun</li> <li>\u554f\u984c\u56de\u5831: \u8acb\u5728 GitHub Issues \u4e2d\u56de\u5831\u554f\u984c</li> <li>\u529f\u80fd\u8acb\u6c42: \u6b61\u8fce\u63d0\u4ea4 Pull Request \u6216\u958b\u555f Issue \u8a0e\u8ad6</li> <li>\u5a92\u9ad4\u5831\u5c0e: \u67e5\u770b \u5a92\u9ad4\u5831\u5c0e\u8207\u63d0\u53ca \u4e86\u89e3\u5c08\u6848\u7684\u5f71\u97ff\u529b</li> </ul>"},{"location":"zh/#_7","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\ud83d\udcd6 \u67e5\u770b \u5de5\u4f5c\u539f\u7406 \u4e86\u89e3\u6280\u8853\u7d30\u7bc0</li> <li>\ud83c\udfaf \u95b1\u8b80 \u5c08\u6848\u76ee\u6a19 \u4e86\u89e3\u767c\u5c55\u65b9\u5411</li> <li>\ud83d\udcdc \u700f\u89bd \u958b\u767c\u6b77\u7a0b \u4e86\u89e3\u6280\u8853\u6311\u6230\u8207\u89e3\u6c7a\u65b9\u6848</li> <li>\ud83d\udee0\ufe0f \u53c3\u8003 API \u6587\u6a94 \u9032\u884c\u958b\u767c</li> </ul>"},{"location":"zh/api-reference/","title":"API \u53c3\u8003","text":"<p>\u672c\u9801\u9762\u63d0\u4f9b Gthulhu \u548c Qumun \u7684\u5b8c\u6574 API \u53c3\u8003\u6587\u6a94\u3002</p>"},{"location":"zh/api-reference/#_1","title":"\u6838\u5fc3\u6a21\u7d44","text":""},{"location":"zh/api-reference/#coreloadsched","title":"<code>core.LoadSched()</code>","text":"<p>\u8f09\u5165 BPF \u8abf\u5ea6\u5668\u7a0b\u5f0f\u3002</p> <pre><code>func LoadSched(bpfObjectFile string) *BPFModule\n</code></pre> <p>\u53c3\u6578: - <code>bpfObjectFile</code>: BPF \u7269\u4ef6\u6a94\u6848\u8def\u5f91 (\u5982: <code>main.bpf.o</code>)</p> <p>\u56de\u50b3\u503c: - <code>*BPFModule</code>: BPF \u6a21\u7d44\u5be6\u4f8b</p> <p>\u7bc4\u4f8b: <pre><code>bpfModule := core.LoadSched(\"main.bpf.o\")\ndefer bpfModule.Close()\n</code></pre></p>"},{"location":"zh/api-reference/#bpfmoduleassignuserschedpid","title":"<code>BPFModule.AssignUserSchedPid()</code>","text":"<p>\u8a2d\u5b9a\u4f7f\u7528\u8005\u7a7a\u9593\u8abf\u5ea6\u5668\u7684 PID\u3002</p> <pre><code>func (bm *BPFModule) AssignUserSchedPid(pid int) error\n</code></pre> <p>\u53c3\u6578: - <code>pid</code>: \u4f7f\u7528\u8005\u7a7a\u9593\u8abf\u5ea6\u5668\u7684\u7a0b\u5e8f ID</p> <p>\u7bc4\u4f8b: <pre><code>pid := os.Getpid()\nerr := bpfModule.AssignUserSchedPid(pid)\nif err != nil {\n    log.Printf(\"AssignUserSchedPid failed: %v\", err)\n}\n</code></pre></p>"},{"location":"zh/api-reference/#bpfmoduleattach","title":"<code>BPFModule.Attach()</code>","text":"<p>\u9644\u52a0 BPF \u7a0b\u5f0f\u5230\u6838\u5fc3\u3002</p> <pre><code>func (bm *BPFModule) Attach() error\n</code></pre> <p>\u7bc4\u4f8b: <pre><code>if err := bpfModule.Attach(); err != nil {\n    log.Panicf(\"bpfModule attach failed: %v\", err)\n}\n</code></pre></p>"},{"location":"zh/api-reference/#bpfmodulereceiveprocexitevt","title":"<code>BPFModule.ReceiveProcExitEvt()</code>","text":"<p>\u63a5\u6536\u7a0b\u5e8f\u9000\u51fa\u4e8b\u4ef6\u3002</p> <pre><code>func (bm *BPFModule) ReceiveProcExitEvt() int\n</code></pre> <p>\u56de\u50b3\u503c: - <code>int</code>: \u9000\u51fa\u7a0b\u5e8f\u7684 PID\uff0c\u5982\u679c\u6c92\u6709\u4e8b\u4ef6\u5247\u56de\u50b3 -1</p> <p>\u7bc4\u4f8b: <pre><code>go func() {\n    for {\n        if pid := bpfModule.ReceiveProcExitEvt(); pid != -1 {\n            sched.DeletePidFromTaskInfo(pid)\n        } else {\n            time.Sleep(100 * time.Millisecond)\n        }\n    }\n}()\n</code></pre></p>"},{"location":"zh/api-reference/#util","title":"\u5feb\u53d6\u6a21\u7d44 (<code>util</code> \u5957\u4ef6)","text":""},{"location":"zh/api-reference/#cacheinitcachedomains","title":"<code>cache.InitCacheDomains()</code>","text":"<p>\u521d\u59cb\u5316 CPU \u5feb\u53d6\u57df\u3002</p> <pre><code>func InitCacheDomains(bpfModule *core.BPFModule) error\n</code></pre> <p>\u53c3\u6578: - <code>bpfModule</code>: BPF \u6a21\u7d44\u5be6\u4f8b</p> <p>\u7bc4\u4f8b: <pre><code>err := cache.InitCacheDomains(bpfModule)\nif err != nil {\n    log.Panicf(\"InitCacheDomains failed: %v\", err)\n}\n</code></pre></p>"},{"location":"zh/api-reference/#sched","title":"\u8abf\u5ea6\u6a21\u7d44 (<code>sched</code> \u5957\u4ef6)","text":""},{"location":"zh/api-reference/#scheddeletepidfromtaskinfo","title":"<code>sched.DeletePidFromTaskInfo()</code>","text":"<p>\u5f9e\u4efb\u52d9\u8cc7\u8a0a\u4e2d\u522a\u9664\u6307\u5b9a PID\u3002</p> <pre><code>func DeletePidFromTaskInfo(pid int)\n</code></pre> <p>\u53c3\u6578: - <code>pid</code>: \u8981\u522a\u9664\u7684\u7a0b\u5e8f ID</p>"},{"location":"zh/api-reference/#bpf-api","title":"BPF \u7a0b\u5f0f API","text":""},{"location":"zh/api-reference/#map","title":"Map \u7d50\u69cb","text":""},{"location":"zh/api-reference/#task_info_map","title":"<code>task_info_map</code>","text":"<p>\u5132\u5b58\u4efb\u52d9\u8cc7\u8a0a\u7684 Hash Map\u3002</p> <pre><code>struct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, MAX_TASKS);\n    __type(key, pid_t);\n    __type(value, struct task_info);\n} task_info_map SEC(\".maps\");\n</code></pre>"},{"location":"zh/api-reference/#struct-task_info","title":"<code>struct task_info</code>","text":"<p>\u4efb\u52d9\u8cc7\u8a0a\u7d50\u69cb\u9ad4\u3002</p> <pre><code>struct task_info {\n    __u64 vruntime;                    // \u865b\u64ec\u57f7\u884c\u6642\u9593\n    __u32 weight;                      // \u4efb\u52d9\u6b0a\u91cd\n    __u32 slice_ns;                    // \u6642\u9593\u7247 (\u5948\u79d2)\n    __u64 exec_start;                  // \u57f7\u884c\u958b\u59cb\u6642\u9593\n    __u64 sum_exec_runtime;            // \u7d2f\u8a08\u57f7\u884c\u6642\u9593\n    __u32 voluntary_ctxt_switches;     // \u81ea\u9858\u4e0a\u4e0b\u6587\u5207\u63db\u6b21\u6578\n    __u32 nonvoluntary_ctxt_switches;  // \u975e\u81ea\u9858\u4e0a\u4e0b\u6587\u5207\u63db\u6b21\u6578\n};\n</code></pre>"},{"location":"zh/api-reference/#bpf","title":"BPF \u7a0b\u5f0f\u9032\u5165\u9ede","text":""},{"location":"zh/api-reference/#sched_ext_ops","title":"<code>sched_ext_ops</code>","text":"<p>\u8abf\u5ea6\u5668\u64cd\u4f5c\u7d50\u69cb\u9ad4\u3002</p> <pre><code>SEC(\".struct_ops.link\")\nstruct sched_ext_ops gthulhu_ops = {\n    .select_cpu         = (void *)gthulhu_select_cpu,\n    .enqueue            = (void *)gthulhu_enqueue,\n    .dispatch           = (void *)gthulhu_dispatch,\n    .running            = (void *)gthulhu_running,\n    .stopping           = (void *)gthulhu_stopping,\n    .enable             = (void *)gthulhu_enable,\n    .init               = (void *)gthulhu_init,\n    .exit               = (void *)gthulhu_exit,\n    .name               = \"gthulhu\",\n};\n</code></pre>"},{"location":"zh/api-reference/#_2","title":"\u6838\u5fc3\u51fd\u6578","text":""},{"location":"zh/api-reference/#gthulhu_select_cpu","title":"<code>gthulhu_select_cpu()</code>","text":"<p>\u9078\u64c7\u9069\u5408\u7684 CPU \u6838\u5fc3\u3002</p> <pre><code>s32 BPF_STRUCT_OPS(gthulhu_select_cpu, struct task_struct *p, \n                   s32 prev_cpu, u64 wake_flags)\n</code></pre> <p>\u53c3\u6578: - <code>p</code>: \u4efb\u52d9\u7d50\u69cb\u9ad4\u6307\u6a19 - <code>prev_cpu</code>: \u524d\u4e00\u500b CPU \u7de8\u865f - <code>wake_flags</code>: \u559a\u9192\u6a19\u8a8c</p> <p>\u56de\u50b3\u503c: - <code>s32</code>: \u9078\u4e2d\u7684 CPU \u7de8\u865f</p>"},{"location":"zh/api-reference/#gthulhu_enqueue","title":"<code>gthulhu_enqueue()</code>","text":"<p>\u5c07\u4efb\u52d9\u52a0\u5165\u4f47\u5217\u3002</p> <pre><code>void BPF_STRUCT_OPS(gthulhu_enqueue, struct task_struct *p, u64 enq_flags)\n</code></pre>"},{"location":"zh/api-reference/#gthulhu_dispatch","title":"<code>gthulhu_dispatch()</code>","text":"<p>\u8abf\u5ea6\u4efb\u52d9\u57f7\u884c\u3002</p> <pre><code>void BPF_STRUCT_OPS(gthulhu_dispatch, s32 cpu, struct task_struct *prev)\n</code></pre>"},{"location":"zh/api-reference/#_3","title":"\u914d\u7f6e\u9078\u9805","text":""},{"location":"zh/api-reference/#_4","title":"\u74b0\u5883\u8b8a\u6578","text":"\u8b8a\u6578\u540d \u8aaa\u660e \u9810\u8a2d\u503c \u985e\u578b <code>GTHULHU_DEBUG</code> \u555f\u7528\u8abf\u8a66\u6a21\u5f0f <code>false</code> bool <code>GTHULHU_LOG_LEVEL</code> \u65e5\u8a8c\u7b49\u7d1a <code>INFO</code> string <code>GTHULHU_MAX_TASKS</code> \u6700\u5927\u4efb\u52d9\u6578 <code>4096</code> int"},{"location":"zh/api-reference/#_5","title":"\u57f7\u884c\u6642\u53c3\u6578","text":""},{"location":"zh/api-reference/#_6","title":"\u6642\u9593\u7247\u8a2d\u5b9a","text":"<pre><code>// \u57fa\u790e\u6642\u9593\u7247 (\u5948\u79d2)\n#define BASE_SLICE_NS    5000000ULL  // 5ms\n\n// \u6700\u5c0f\u6642\u9593\u7247\n#define MIN_SLICE_NS     1000000ULL  // 1ms\n\n// \u6700\u5927\u6642\u9593\u7247\n#define MAX_SLICE_NS    20000000ULL  // 20ms\n</code></pre>"},{"location":"zh/api-reference/#_7","title":"\u6b0a\u91cd\u8a2d\u5b9a","text":"<pre><code>// Nice \u503c\u5c0d\u61c9\u7684\u6b0a\u91cd\u8868\nstatic const int prio_to_weight[40] = {\n /* -20 */     88761,     71755,     56483,     46273,     36291,\n /* -15 */     29154,     23254,     18705,     14949,     11916,\n /* -10 */      9548,      7620,      6100,      4904,      3906,\n /*  -5 */      3121,      2501,      1991,      1586,      1277,\n /*   0 */      1024,       820,       655,       526,       423,\n /*   5 */       335,       272,       215,       172,       137,\n /*  10 */       110,        87,        70,        56,        45,\n /*  15 */        36,        29,        23,        18,        15,\n};\n</code></pre>"},{"location":"zh/api-reference/#_8","title":"\u932f\u8aa4\u8655\u7406","text":""},{"location":"zh/api-reference/#_9","title":"\u5e38\u898b\u932f\u8aa4\u78bc","text":"\u932f\u8aa4\u78bc \u8aaa\u660e \u89e3\u6c7a\u65b9\u6848 <code>-EPERM</code> \u6b0a\u9650\u4e0d\u8db3 \u4f7f\u7528 root \u6b0a\u9650\u57f7\u884c <code>-ENOENT</code> BPF \u6a94\u6848\u4e0d\u5b58\u5728 \u78ba\u8a8d BPF \u7269\u4ef6\u6a94\u6848\u8def\u5f91 <code>-EINVAL</code> \u7121\u6548\u53c3\u6578 \u6aa2\u67e5\u51fd\u6578\u53c3\u6578 <code>-ENOMEM</code> \u8a18\u61b6\u9ad4\u4e0d\u8db3 \u589e\u52a0\u7cfb\u7d71\u8a18\u61b6\u9ad4"},{"location":"zh/api-reference/#_10","title":"\u932f\u8aa4\u8655\u7406\u7bc4\u4f8b","text":"<pre><code>// \u932f\u8aa4\u8655\u7406\u6a21\u5f0f\nif err := bpfModule.Attach(); err != nil {\n    switch {\n    case strings.Contains(err.Error(), \"permission denied\"):\n        log.Fatal(\"\u9700\u8981 root \u6b0a\u9650\")\n    case strings.Contains(err.Error(), \"no such file\"):\n        log.Fatal(\"BPF \u6a94\u6848\u4e0d\u5b58\u5728\")\n    default:\n        log.Fatalf(\"\u672a\u77e5\u932f\u8aa4: %v\", err)\n    }\n}\n</code></pre>"},{"location":"zh/api-reference/#api_1","title":"\u8abf\u8a66 API","text":""},{"location":"zh/api-reference/#_11","title":"\u7d71\u8a08\u8cc7\u8a0a","text":"<pre><code>// \u7372\u53d6\u8abf\u5ea6\u5668\u7d71\u8a08\u8cc7\u8a0a\ntype SchedulerStats struct {\n    TotalTasks          uint64\n    ActiveTasks         uint64\n    ContextSwitches     uint64\n    AverageLatency      time.Duration\n    CPUUtilization      float64\n}\n\nfunc GetSchedulerStats() *SchedulerStats {\n    // \u5be6\u4f5c\u7d30\u7bc0...\n}\n</code></pre>"},{"location":"zh/api-reference/#_12","title":"\u8abf\u8a66\u5de5\u5177\u51fd\u6578","text":"<pre><code>// BPF \u8abf\u8a66\u5de8\u96c6\n#define bpf_debug(fmt, args...) \\\n    bpf_trace_printk(fmt, sizeof(fmt), ##args)\n\n// \u8ffd\u8e64\u4efb\u52d9\u72c0\u614b\u8b8a\u5316\nstatic void trace_task_state(struct task_struct *p, const char *event) {\n    bpf_debug(\"Task %d: %s (vruntime=%llu)\\n\", \n              p-&gt;pid, event, get_task_vruntime(p));\n}\n</code></pre>"},{"location":"zh/api-reference/#api_2","title":"\u6548\u80fd\u8abf\u512a API","text":""},{"location":"zh/api-reference/#_13","title":"\u52d5\u614b\u53c3\u6578\u8abf\u6574","text":"<pre><code>// \u8abf\u6574\u8abf\u5ea6\u53c3\u6578\ntype SchedulingParams struct {\n    BaseSliceNs      uint64\n    MinSliceNs       uint64  \n    MaxSliceNs       uint64\n    LatencyFactor    float64\n    WeightMultiplier float64\n}\n\nfunc UpdateSchedulingParams(params *SchedulingParams) error {\n    // \u5be6\u4f5c\u7d30\u7bc0...\n}\n</code></pre>"},{"location":"zh/api-reference/#_14","title":"\u6548\u80fd\u76e3\u63a7","text":"<pre><code>// \u6548\u80fd\u8a08\u6578\u5668\nstruct perf_counters {\n    __u64 dispatch_count;\n    __u64 enqueue_count;\n    __u64 context_switch_count;\n    __u64 total_runtime;\n    __u64 idle_time;\n};\n</code></pre> <p>API \u7248\u672c</p> <p>\u7576\u524d API \u7248\u672c: v0.1.x API \u7a69\u5b9a\u6027: Alpha (\u53ef\u80fd\u6703\u6709\u7834\u58de\u6027\u8b8a\u66f4)</p> <p>\u66f4\u591a\u7bc4\u4f8b</p> <p>\u66f4\u591a\u4f7f\u7528\u7bc4\u4f8b\u8acb\u53c3\u8003\u5c08\u6848\u539f\u59cb\u78bc\u4e2d\u7684 <code>examples/</code> \u76ee\u9304\u3002</p>"},{"location":"zh/contributing/","title":"\u8ca2\u737b\u6307\u5357","text":"<p>\u6b61\u8fce\u60a8\u70ba Gthulhu \u5c08\u6848\u505a\u51fa\u8ca2\u737b\uff01\u672c\u6307\u5357\u5c07\u5354\u52a9\u60a8\u4e86\u89e3\u5982\u4f55\u53c3\u8207\u5c08\u6848\u958b\u767c\u3002</p>"},{"location":"zh/contributing/#_2","title":"\u958b\u59cb\u4e4b\u524d","text":""},{"location":"zh/contributing/#_3","title":"\u884c\u70ba\u6e96\u5247","text":"<p>\u6211\u5011\u9075\u5faa CNCF \u884c\u70ba\u6e96\u5247\u3002</p>"},{"location":"zh/contributing/#_4","title":"\u8ca2\u737b\u65b9\u5f0f","text":"<p>\u5728\u958b\u59cb\u8ca2\u737b\u4e4b\u524d\uff0c\u5efa\u8b70\u5148\u95b1\u8b80 \u958b\u767c\u6b77\u7a0b \u4ee5\u4e86\u89e3\u5c08\u6848\u7684\u6280\u8853\u80cc\u666f\u548c\u66fe\u7d93\u9047\u5230\u7684\u6311\u6230\u3002</p> <p>\u60a8\u53ef\u4ee5\u901a\u904e\u591a\u7a2e\u65b9\u5f0f\u70ba\u5c08\u6848\u505a\u51fa\u8ca2\u737b\uff1a</p> <pre><code>graph LR\n    A[\u8ca2\u737b\u65b9\u5f0f] --&gt; B[\u7a0b\u5f0f\u78bc]\n    A --&gt; C[\u6587\u6a94]\n    A --&gt; D[\u6e2c\u8a66]\n    A --&gt; E[\u554f\u984c\u56de\u5831]\n    A --&gt; F[\u529f\u80fd\u5efa\u8b70]\n    A --&gt; G[\u793e\u7fa4\u652f\u63f4]\n\n    B --&gt; B1[\u65b0\u529f\u80fd]\n    B --&gt; B2[\u932f\u8aa4\u4fee\u5fa9]\n    B --&gt; B3[\u6548\u80fd\u6700\u4f73\u5316]\n\n    C --&gt; C1[API \u6587\u6a94]\n    C --&gt; C2[\u4f7f\u7528\u6307\u5357]\n    C --&gt; C3[\u6559\u5b78\u6587\u7ae0]\n</code></pre>"},{"location":"zh/contributing/#_5","title":"\u958b\u767c\u74b0\u5883\u8a2d\u5b9a","text":""},{"location":"zh/contributing/#_6","title":"\u5fc5\u8981\u5de5\u5177","text":"<p>\u78ba\u4fdd\u60a8\u7684\u958b\u767c\u74b0\u5883\u5177\u5099\u4ee5\u4e0b\u5de5\u5177\uff1a</p> \u5de5\u5177 \u7248\u672c\u9700\u6c42 \u5b89\u88dd\u65b9\u5f0f Go 1.22+ \u4e0b\u8f09\u5b89\u88dd Clang 17+ <code>apt install clang-17</code> Git \u6700\u65b0 <code>apt install git</code> Make \u6700\u65b0 <code>apt install make</code> Docker \u6700\u65b0 \u5b89\u88dd Docker"},{"location":"zh/contributing/#_7","title":"\u514b\u9686\u5c08\u6848","text":"<pre><code># 1. Fork \u5c08\u6848 (\u5728 GitHub \u4e0a\u9ede\u64ca Fork \u6309\u9215)\n# 2. \u514b\u9686\u60a8\u7684 fork\ngit clone https://github.com/\u60a8\u7684\u7528\u6236\u540d/Gthulhu.git\ncd Gthulhu\n\n# 3. \u65b0\u589e\u4e0a\u6e38\u5009\u5eab\ngit remote add upstream https://github.com/Gthulhu/Gthulhu.git\n\n# 4. \u9a57\u8b49 remote \u8a2d\u5b9a\ngit remote -v\n</code></pre>"},{"location":"zh/contributing/#_8","title":"\u5efa\u7f6e\u5c08\u6848","text":"<pre><code># \u5b89\u88dd\u76f8\u4f9d\u5957\u4ef6\nmake dep\n\n# \u521d\u59cb\u5316 submodules\ngit submodule init\ngit submodule sync  \ngit submodule update\n\n# \u5efa\u7f6e\u5c08\u6848\nmake build\n\n# \u57f7\u884c\u6e2c\u8a66\nmake test\n\n# \u7a0b\u5f0f\u78bc\u6aa2\u67e5\nmake lint\n</code></pre>"},{"location":"zh/contributing/#_9","title":"\u958b\u767c\u5de5\u4f5c\u6d41\u7a0b","text":""},{"location":"zh/contributing/#1","title":"1. \u5efa\u7acb\u529f\u80fd\u5206\u652f","text":"<pre><code># \u5f9e\u6700\u65b0\u7684 main \u5206\u652f\u5efa\u7acb\u65b0\u5206\u652f\ngit checkout main\ngit pull upstream main\ngit checkout -b feature/your-feature-name\n\n# \u6216\u8005\u4fee\u5fa9\u932f\u8aa4\ngit checkout -b fix/issue-number-description\n</code></pre>"},{"location":"zh/contributing/#2","title":"2. \u7a0b\u5f0f\u78bc\u958b\u767c","text":""},{"location":"zh/contributing/#_10","title":"\u7a0b\u5f0f\u78bc\u98a8\u683c","text":"<ul> <li>Go \u7a0b\u5f0f\u78bc\uff1a\u9075\u5faa <code>gofmt</code> \u548c <code>golint</code> \u6a19\u6e96</li> <li>C \u7a0b\u5f0f\u78bc\uff1a\u9075\u5faa Linux \u6838\u5fc3\u7a0b\u5f0f\u78bc\u98a8\u683c</li> <li>\u63d0\u4ea4\u8a0a\u606f\uff1a\u4f7f\u7528\u8a9e\u610f\u5316\u63d0\u4ea4\u8a0a\u606f</li> </ul> <pre><code># \u683c\u5f0f\u5316 Go \u7a0b\u5f0f\u78bc\ngofmt -w .\n\n# \u57f7\u884c linter\nmake lint\n\n# \u57f7\u884c\u6e2c\u8a66\nmake test\n</code></pre>"},{"location":"zh/contributing/#_11","title":"\u63d0\u4ea4\u8a0a\u606f\u683c\u5f0f","text":"<pre><code># \u683c\u5f0f: &lt;\u985e\u578b&gt;(&lt;\u7bc4\u570d&gt;): &lt;\u63cf\u8ff0&gt;\n#\n# \u985e\u578b:\n# - feat: \u65b0\u529f\u80fd\n# - fix: \u932f\u8aa4\u4fee\u5fa9\n# - docs: \u6587\u6a94\u66f4\u65b0\n# - style: \u7a0b\u5f0f\u78bc\u683c\u5f0f\u5316\n# - refactor: \u7a0b\u5f0f\u78bc\u91cd\u69cb\n# - test: \u6e2c\u8a66\u76f8\u95dc\n# - chore: \u5efa\u7f6e\u6216\u8f14\u52a9\u5de5\u5177\n\n# \u7bc4\u4f8b:\nfeat(scheduler): add CPU topology aware scheduling\nfix(bpf): resolve memory leak in task cleanup\ndocs(api): update API reference documentation\n</code></pre>"},{"location":"zh/contributing/#3","title":"3. \u6e2c\u8a66","text":""},{"location":"zh/contributing/#_12","title":"\u57f7\u884c\u6e2c\u8a66\u5957\u4ef6","text":"<pre><code># \u57f7\u884c\u6240\u6709\u6e2c\u8a66\nmake test\n\n# \u57f7\u884c\u7279\u5b9a\u6e2c\u8a66\ngo test ./internal/sched/\n\n# \u57f7\u884c\u57fa\u6e96\u6e2c\u8a66\ngo test -bench=. ./...\n\n# \u6e2c\u8a66\u8986\u84cb\u7387\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n</code></pre>"},{"location":"zh/contributing/#_13","title":"\u624b\u52d5\u6e2c\u8a66","text":"<pre><code># \u5efa\u7f6e\u4e26\u6e2c\u8a66\nmake build\nsudo ./main &amp;\n\n# \u57f7\u884c\u58d3\u529b\u6e2c\u8a66\nstress-ng --cpu 4 --timeout 60s\n\n# \u6aa2\u67e5\u6548\u80fd\nperf stat -e context-switches,cpu-migrations,page-faults sudo ./main\n\n# \u505c\u6b62\u6e2c\u8a66\nsudo pkill -f \"./main\"\n</code></pre>"},{"location":"zh/contributing/#4","title":"4. \u63d0\u4ea4\u8b8a\u66f4","text":"<pre><code># \u6dfb\u52a0\u8b8a\u66f4\u6a94\u6848\ngit add .\n\n# \u63d0\u4ea4\u8b8a\u66f4\ngit commit -m \"feat(scheduler): add CPU topology aware scheduling\n\n- Implement cache-aware CPU selection\n- Add NUMA node preference logic  \n- Improve task migration decisions\n\nCloses #123\"\n\n# \u63a8\u9001\u5230\u60a8\u7684 fork\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"zh/contributing/#5-pull-request","title":"5. \u5efa\u7acb Pull Request","text":"<ol> <li>\u524d\u5f80 GitHub\uff1a\u8a2a\u554f\u60a8 fork \u7684\u9801\u9762</li> <li>\u5efa\u7acb PR\uff1a\u9ede\u64ca \"New Pull Request\"</li> <li>\u586b\u5beb\u6a21\u677f\uff1a\u4f7f\u7528\u63d0\u4f9b\u7684 PR \u6a21\u677f</li> <li>\u7b49\u5f85\u5be9\u67e5\uff1a\u7dad\u8b77\u8005\u6703\u5be9\u67e5\u60a8\u7684\u7a0b\u5f0f\u78bc</li> </ol>"},{"location":"zh/contributing/#pr","title":"PR \u6a21\u677f\u7bc4\u4f8b","text":"<pre><code>## \u8b8a\u66f4\u8aaa\u660e\n\u7c21\u8981\u63cf\u8ff0\u9019\u500b PR \u7684\u8b8a\u66f4\u5167\u5bb9\u3002\n\n## \u8b8a\u66f4\u985e\u578b\n- [ ] \u932f\u8aa4\u4fee\u5fa9\n- [ ] \u65b0\u529f\u80fd\n- [ ] \u6548\u80fd\u6539\u9032\n- [ ] \u6587\u6a94\u66f4\u65b0\n- [ ] \u7a0b\u5f0f\u78bc\u91cd\u69cb\n\n## \u6e2c\u8a66\n- [ ] \u5df2\u57f7\u884c\u73fe\u6709\u6e2c\u8a66\u5957\u4ef6\n- [ ] \u5df2\u65b0\u589e\u65b0\u7684\u6e2c\u8a66\u6848\u4f8b\n- [ ] \u5df2\u624b\u52d5\u6e2c\u8a66\u529f\u80fd\n\n## \u6aa2\u67e5\u6e05\u55ae\n- [ ] \u7a0b\u5f0f\u78bc\u7b26\u5408\u98a8\u683c\u6307\u5357\n- [ ] \u63d0\u4ea4\u8a0a\u606f\u6e05\u6670\u660e\u78ba \n- [ ] \u5df2\u66f4\u65b0\u76f8\u95dc\u6587\u6a94\n- [ ] \u8b8a\u66f4\u5411\u5f8c\u517c\u5bb9\n\n## \u76f8\u95dc Issue\nFixes #123\n</code></pre>"},{"location":"zh/contributing/#_14","title":"\u7a0b\u5f0f\u78bc\u5be9\u67e5","text":""},{"location":"zh/contributing/#_15","title":"\u5be9\u67e5\u6a19\u6e96","text":"<p>\u7a0b\u5f0f\u78bc\u5be9\u67e5\u5c07\u6aa2\u67e5\u4ee5\u4e0b\u65b9\u9762\uff1a</p> <ol> <li>\u6b63\u78ba\u6027\uff1a\u7a0b\u5f0f\u78bc\u908f\u8f2f\u662f\u5426\u6b63\u78ba</li> <li>\u6548\u80fd\uff1a\u662f\u5426\u6709\u6548\u80fd\u554f\u984c</li> <li>\u5b89\u5168\u6027\uff1a\u662f\u5426\u5b58\u5728\u5b89\u5168\u98a8\u96aa</li> <li>\u53ef\u8b80\u6027\uff1a\u7a0b\u5f0f\u78bc\u662f\u5426\u6613\u65bc\u7406\u89e3</li> <li>\u53ef\u7dad\u8b77\u6027\uff1a\u7a0b\u5f0f\u78bc\u7d50\u69cb\u662f\u5426\u5408\u7406</li> </ol>"},{"location":"zh/contributing/#_16","title":"\u56de\u61c9\u5be9\u67e5\u610f\u898b","text":"<pre><code># \u6839\u64da\u5be9\u67e5\u610f\u898b\u4fee\u6539\u7a0b\u5f0f\u78bc\ngit add .\ngit commit -m \"address review comments: improve error handling\"\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"zh/contributing/#_17","title":"\u5e38\u898b\u5be9\u67e5\u610f\u898b","text":"<ol> <li> <p>\u932f\u8aa4\u8655\u7406\uff1a <pre><code>// \u274c \u4e0d\u597d\u7684\u932f\u8aa4\u8655\u7406\nresult, _ := someFunction()\n\n// \u2705 \u6b63\u78ba\u7684\u932f\u8aa4\u8655\u7406\nresult, err := someFunction()\nif err != nil {\n    return fmt.Errorf(\"failed to do something: %w\", err)\n}\n</code></pre></p> </li> <li> <p>\u8a18\u61b6\u9ad4\u7ba1\u7406\uff1a <pre><code>// \u274c \u8a18\u61b6\u9ad4\u6d29\u6f0f\nchar *buffer = malloc(size);\n// ... \u4f7f\u7528 buffer\n// \u5fd8\u8a18\u91cb\u653e\u8a18\u61b6\u9ad4\n\n// \u2705 \u6b63\u78ba\u7684\u8a18\u61b6\u9ad4\u7ba1\u7406\nchar *buffer = malloc(size);\nif (!buffer) return -ENOMEM;\n// ... \u4f7f\u7528 buffer\nfree(buffer);\n</code></pre></p> </li> <li> <p>\u4e26\u767c\u5b89\u5168\uff1a <pre><code>// \u274c \u7af6\u614b\u689d\u4ef6\nvar counter int\ngo func() { counter++ }()\ngo func() { counter++ }()\n\n// \u2705 \u4f7f\u7528\u4e92\u65a5\u9396\nvar mu sync.Mutex\nvar counter int\ngo func() {\n    mu.Lock()\n    counter++\n    mu.Unlock()\n}()\n</code></pre></p> </li> </ol>"},{"location":"zh/contributing/#_18","title":"\u7279\u6b8a\u8ca2\u737b\u985e\u578b","text":""},{"location":"zh/contributing/#_19","title":"\u6587\u6a94\u8ca2\u737b","text":"<p>\u6587\u6a94\u6539\u9032\u540c\u6a23\u91cd\u8981\uff1a</p> <pre><code># \u514b\u9686\u6587\u6a94\u5c08\u6848\ngit clone https://github.com/Gthulhu/docs.git\ncd docs\n\n# \u5b89\u88dd MkDocs\npip install mkdocs mkdocs-material\n\n# \u672c\u5730\u9810\u89bd\nmkdocs serve\n\n# \u7de8\u8f2f\u6587\u6a94\u6a94\u6848\n# docs/your-page.md\n</code></pre>"},{"location":"zh/contributing/#_20","title":"\u6e2c\u8a66\u8ca2\u737b","text":"<p>\u65b0\u589e\u6e2c\u8a66\u7528\u4f8b\uff1a</p> <pre><code>// \u7bc4\u4f8b\uff1a\u65b0\u589e\u57fa\u6e96\u6e2c\u8a66\nfunc BenchmarkScheduleTask(b *testing.B) {\n    scheduler := NewScheduler()\n    task := &amp;Task{PID: 123, Weight: 1024}\n\n    b.ResetTimer()\n    for i := 0; i &lt; b.N; i++ {\n        scheduler.ScheduleTask(task)\n    }\n}\n\n// \u7bc4\u4f8b\uff1a\u65b0\u589e\u6574\u5408\u6e2c\u8a66\nfunc TestSchedulerIntegration(t *testing.T) {\n    // \u8a2d\u5b9a\u6e2c\u8a66\u74b0\u5883\n    scheduler := NewScheduler()\n\n    // \u6e2c\u8a66\u6848\u4f8b\n    testCases := []struct{\n        name     string\n        tasks    []*Task\n        expected int\n    }{\n        // \u6e2c\u8a66\u6848\u4f8b...\n    }\n\n    for _, tc := range testCases {\n        t.Run(tc.name, func(t *testing.T) {\n            // \u57f7\u884c\u6e2c\u8a66...\n        })\n    }\n}\n</code></pre>"},{"location":"zh/contributing/#bpf","title":"BPF \u7a0b\u5f0f\u8ca2\u737b","text":"<p>\u4fee\u6539 BPF \u7a0b\u5f0f\u9700\u8981\u7279\u5225\u6ce8\u610f\uff1a</p> <pre><code>// 1. \u78ba\u4fdd BPF \u9a57\u8b49\u5668\u901a\u904e\nstatic __always_inline int validate_task(struct task_struct *p) {\n    if (!p) return -EINVAL;\n    // \u5176\u4ed6\u9a57\u8b49...\n    return 0;\n}\n\n// 2. \u4f7f\u7528 BPF helper \u51fd\u6578\nSEC(\"struct_ops/select_cpu\")\ns32 BPF_STRUCT_OPS(gthulhu_select_cpu, struct task_struct *p, s32 prev_cpu, u64 wake_flags) {\n    // \u4f7f\u7528 BPF helper\n    u32 cpu = bpf_get_smp_processor_id();\n\n    // \u908a\u754c\u6aa2\u67e5\n    if (cpu &gt;= MAX_CPUS) return prev_cpu;\n\n    return select_best_cpu(p, prev_cpu);\n}\n\n// 3. \u6dfb\u52a0\u8ffd\u8e64\u9ede\nbpf_trace_printk(\"Task %d scheduled on CPU %d\\n\", p-&gt;pid, cpu);\n</code></pre>"},{"location":"zh/contributing/#_21","title":"\u767c\u5e03\u6d41\u7a0b","text":""},{"location":"zh/contributing/#_22","title":"\u7248\u672c\u865f\u898f\u5247","text":"<p>\u9075\u5faa \u8a9e\u610f\u5316\u7248\u672c\uff1a</p> <pre><code>MAJOR.MINOR.PATCH\n\n\u4f8b\u5982: 1.0.0, 1.1.0, 1.1.1\n</code></pre> <ul> <li>MAJOR\uff1a\u4e0d\u76f8\u5bb9\u7684 API \u8b8a\u66f4</li> <li>MINOR\uff1a\u5411\u5f8c\u76f8\u5bb9\u7684\u529f\u80fd\u65b0\u589e</li> <li>PATCH\uff1a\u5411\u5f8c\u76f8\u5bb9\u7684\u932f\u8aa4\u4fee\u5fa9</li> </ul>"},{"location":"zh/contributing/#_23","title":"\u767c\u5e03\u6aa2\u67e5\u6e05\u55ae","text":"<p>\u767c\u5e03\u524d\u78ba\u8a8d\uff1a</p> <ul> <li>[ ] \u6240\u6709\u6e2c\u8a66\u901a\u904e</li> <li>[ ] \u6587\u6a94\u5df2\u66f4\u65b0</li> <li>[ ] CHANGELOG \u5df2\u66f4\u65b0</li> <li>[ ] \u7248\u672c\u865f\u5df2\u66f4\u65b0</li> <li>[ ] \u5efa\u7acb GitHub Release</li> <li>[ ] \u66f4\u65b0 Docker \u6620\u50cf\u6a94</li> </ul>"},{"location":"zh/contributing/#_24","title":"\u793e\u7fa4\u53c3\u8207","text":""},{"location":"zh/contributing/#_25","title":"\u806f\u7e6b\u65b9\u5f0f","text":"<ul> <li>GitHub Issues\uff1a\u554f\u984c\u56de\u5831\u548c\u529f\u80fd\u8acb\u6c42</li> <li>GitHub Discussions\uff1a\u6280\u8853\u8a0e\u8ad6\u548c\u554f\u7b54</li> <li>Email\uff1a\u91cd\u8981\u4e8b\u9805\u806f\u7d61</li> </ul>"},{"location":"zh/contributing/#_26","title":"\u793e\u7fa4\u6d3b\u52d5","text":"<ul> <li>\u6bcf\u6708\u6703\u8b70\uff1a\u7dda\u4e0a\u6280\u8853\u8a0e\u8ad6\u6703\u8b70</li> <li>\u7a0b\u5f0f\u78bc\u5be9\u67e5\uff1a\u4e92\u76f8\u5be9\u67e5\u548c\u5b78\u7fd2</li> <li>\u6280\u8853\u5206\u4eab\uff1a\u5206\u4eab\u4f7f\u7528\u7d93\u9a57\u548c\u6700\u4f73\u5be6\u8e10</li> </ul>"},{"location":"zh/contributing/#_27","title":"\u8a8d\u53ef\u8207\u611f\u8b1d","text":""},{"location":"zh/contributing/#_28","title":"\u8ca2\u737b\u8005\u5217\u8868","text":"<p>\u6240\u6709\u8ca2\u737b\u8005\u90fd\u6703\u5728\u4ee5\u4e0b\u5730\u65b9\u88ab\u8a8d\u53ef\uff1a</p> <ul> <li>README.md \u7684\u8ca2\u737b\u8005\u7ae0\u7bc0</li> <li>GitHub Contributors \u9801\u9762</li> <li>\u767c\u5e03\u8aaa\u660e\u4e2d\u7684\u611f\u8b1d\u540d\u55ae</li> </ul>"},{"location":"zh/contributing/#_29","title":"\u7279\u6b8a\u8ca2\u737b","text":"<p>\u5c0d\u65bc\u91cd\u5927\u8ca2\u737b\uff0c\u6211\u5011\u6703\u63d0\u4f9b\uff1a</p> <ul> <li>\u5c08\u6848 Committer \u6b0a\u9650</li> <li>\u6280\u8853\u90e8\u843d\u683c\u7f72\u540d\u6a5f\u6703</li> <li>\u6703\u8b70\u6f14\u8b1b\u9080\u8acb</li> </ul> <p>\u6b61\u8fce\u8ca2\u737b</p> <p>\u611f\u8b1d\u60a8\u8003\u616e\u70ba Gthulhu \u5c08\u6848\u505a\u51fa\u8ca2\u737b\uff01\u6bcf\u4e00\u500b\u8ca2\u737b\uff0c\u7121\u8ad6\u5927\u5c0f\uff0c\u90fd\u5c0d\u5c08\u6848\u7684\u767c\u5c55\u975e\u5e38\u91cd\u8981\u3002</p> <p>\u9700\u8981\u5e6b\u52a9\uff1f</p> <p>\u5982\u679c\u60a8\u5728\u8ca2\u737b\u904e\u7a0b\u4e2d\u9047\u5230\u4efb\u4f55\u554f\u984c\uff0c\u8acb\u96a8\u6642\u5728 GitHub Issues \u4e2d\u5c0b\u6c42\u5e6b\u52a9\uff0c\u6216\u806f\u7e6b\u5c08\u6848\u7dad\u8b77\u8005\u3002\u6211\u5011\u5f88\u6a02\u610f\u5354\u52a9\u60a8\uff01</p>"},{"location":"zh/development-history/","title":"\u958b\u767c\u6b77\u7a0b","text":"<p>\u4f5c\u8005</p> <p>Yi Chen [GitHub], Gthulhu \u5c08\u6848\u767c\u8d77\u4eba ychen.desl@gmail.com</p> <p>\u672c\u9801\u9762\u8a18\u9304\u4e86 Gthulhu \u548c Qumun \u5c08\u6848\u7684\u958b\u767c\u6b77\u7a0b\u3001\u6280\u8853\u6311\u6230\u53ca\u89e3\u6c7a\u65b9\u6848\u3002</p>"},{"location":"zh/development-history/#_2","title":"\u5c08\u6848\u7de3\u8d77","text":"<p>\u7531\u65bc\u7b46\u8005\u9577\u671f\u6f5b\u6c34\u5728 Jserv \u8001\u5e2b\u7684\u7cfb\u7d71\u8edf\u9ad4\u793e\u5718\uff0c\u5728 sched_ext (scx) \u767c\u5c55\u7684\u521d\u671f\u5c31\u5f97\u77e5 Linux \u5c07\u652f\u63f4 eBPF-based scheduler\u3002\u5f8c\u4f86\u5728\u7db2\u8def\u4e0a\u770b\u898b Andrea Righi \u5728 Rust Lab 2024 \u7684\u6f14\u8b1b\u300cCrafting a Linux kernel scheduler in Rust\u300d\uff0c\u5f97\u77e5 scx \u5df2\u6536\u9304\u4e00\u7a2e\u5728 userspace \u9032\u884c scheduling policy decision \u7684 eBPF scheduler\u300cscx_rustland\u300d\u3002</p> <p>\u9019\u6fc0\u767c\u4e86\u4f7f\u7528 Golang \u91cd\u9020\u9019\u6b3e scheduler \u7684\u60f3\u6cd5\uff0c\u4e3b\u8981\u539f\u56e0\u5305\u62ec\uff1a</p> <ul> <li>\u5df2\u6709\u958b\u6e90\u7684 libbpfgo \u53ef\u5229\u7528</li> <li>Golang \u7684\u958b\u767c\u96e3\u5ea6\u8f03 Rust \u66f4\u4f4e</li> <li>\u4f7f\u7528 Golang \u958b\u767c K8s operator \u8f03\u70ba\u65b9\u4fbf</li> </ul>"},{"location":"zh/development-history/#_3","title":"\u57fa\u790e\u8a2d\u65bd\u5efa\u8a2d","text":"<p>\u5728\u958b\u59cb\u91cd\u5efa\u5de5\u4f5c\u4e4b\u524d\uff0c\u9700\u8981\u642d\u5efa\u4e00\u4e9b\u57fa\u790e\u8a2d\u65bd\uff1a</p> <ol> <li>libbpfgo \u652f\u63f4\u8a55\u4f30: \u80fd\u5426\u652f\u63f4 scx \u985e\u578b\u7684 eBPF program\uff1fAPI \u5be6\u4f5c\u662f\u5426\u5b8c\u5584\uff1f</li> <li>skeleton \u5de5\u5177: \u6709\u6c92\u6709\u4fbf\u6377\u7684\u65b9\u5f0f\u8b93 golang application \u4f7f\u7528 eBPF skeleton\uff1f</li> </ol> <p>\u8d77\u521d\u904e\u5ea6\u6a02\u89c0\u5730\u4ee5\u70ba\u53ea\u8981\u8b93 libbpfgo \u652f\u63f4 struct-ops map attachment \u5c31\u80fd\u5728 golang \u4e0a\u91cd\u73fe scx_rustland \u6240\u505a\u7684\u4e8b\u60c5\uff0c\u4f46\u4e8b\u5be6\u7e3d\u662f\u8ddd\u96e2\u7406\u60f3\u975e\u5e38\u9060\u3002</p>"},{"location":"zh/development-history/#_4","title":"\u6280\u8853\u8ca2\u737b\u8207\u4fee\u6b63","text":""},{"location":"zh/development-history/#patch-1-libbpfgo-struct-ops","title":"Patch #1: libbpfgo struct-ops \u652f\u63f4","text":"<p>\u9023\u7d50: feat: add AttachStructOps() #476 for aquasecurity/libbpfgo</p> <p>\u8981\u4f7f\u7528 golang \u958b\u767c scx-based scheduler \u7684\u9996\u8981\u4efb\u52d9\u5c31\u662f\u8b93 golang application \u80fd\u5920\u7ba1\u7406 struct-ops \u985e\u578b\u7684 BPF Map\u3002\u7136\u800c\uff0clibbpfgo \u4e26\u4e0d\u652f\u63f4\u76f8\u95dc\u7684 APIs\uff0c\u56e0\u6b64\u9700\u8981\u64f4\u5145 libbpfgo\u3002</p> <p>\u4e3b\u8981\u6539\u52d5\u5167\u5bb9\uff1a</p> <pre><code>func (m *BPFMap) AttachStructOps() error {\n    if m.Type().String() != MapTypeStructOps.String() {\n        return errors.New(\"Map type should be BPF_MAP_TYPE_STRUCT_OPS\")\n    }\n    linkC, errno := C.bpf_map__attach_struct_ops(m.bpfMap)\n    if linkC == nil {\n        return fmt.Errorf(\"Map attach failed: %v\", &amp;errno)\n    }\n    return nil\n}\n</code></pre> <p>\u82b1\u8cbb\u8f03\u591a\u6642\u9593\u7684\u662f\u64b0\u5beb selftest\uff0c\u9078\u64c7\u4f7f\u7528 golang \u64b0\u5beb scx-simple \u7684 user space agent \u4f5c\u70ba\u8a72 patch \u7684 selftest\u3002</p> <p>\u6b64\u5916\uff0c\u8a72\u5c08\u6848\u6240\u63a1\u7528\u7684 CI Runner \u7684 kernel \u7248\u672c\u70ba v6.8\uff0c\u4f46 scheduler extension \u9700\u8981 v6.12 \u4ee5\u4e0a\u7684\u6838\u5fc3\u3002\u7d93\u904e\u8a0e\u8ad6\u5f8c\u63a5\u53d7 arighi \u7684\u5efa\u8b70\uff0c\u5728\u6e2c\u8a66\u4e2d\u63a1\u7528 virtme-ng\u3002</p>"},{"location":"zh/development-history/#patch-2-user-ring-buffer","title":"Patch #2: user ring buffer \u652f\u63f4","text":"<p>\u9023\u7d50: support user ring buffer #480 for aquasecurity/libbpfgo</p> <p>\u5617\u8a66\u5be6\u4f5c scx_goland \u6642\u767c\u73fe libbpfgo \u4e26\u6c92\u6709\u652f\u63f4 user-ring-buffer \u985e\u578b BPF map \u7684 API\u3002</p> <p>scx_rustland_core \u7684\u67b6\u69cb\u5716\u986f\u793a\uff0cscx_goland\uff08scx_rustland\uff09\u9ad8\u5ea6\u4ef0\u8cf4 user-ring-buffer map\uff08\u4f5c\u7528\u8207 ring buffer \u4e00\u6a23\uff0c\u4f46\u50b3\u905e\u9806\u5e8f\u76f8\u53cd\uff0c\u8b93 user space application \u80fd\u5920\u50b3\u905e\u6d88\u606f\u5230 BPF program\uff09\u3002</p> <p>\u6709\u4e86\u9019\u5169\u500b Patch\uff0cgolang \u5c31\u88ab\u8ce6\u4e88\u4e86\u8f09\u5165 scx eBPF program \u548c\u50b3\u905e scheduling decision \u81f3 eBPF scheduler \u7684\u80fd\u529b\u3002</p>"},{"location":"zh/development-history/#patch-3-ebpf","title":"Patch #3: eBPF \u6587\u6a94\u4fee\u6b63","text":"<p>\u9023\u7d50: chore: update BPF_PROG_TEST_RUN.md for isovalent/ebpf-docs</p> <p>\u81ea Linux kernel v5.14 \u958b\u59cb\uff0ckernel \u652f\u63f4 <code>BPF_PROG_TYPE_SYSCALL</code> \u985e\u578b\u7684 eBPF program\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5b83\u50c5\u80fd\u900f\u904e system call \u57f7\u884c\uff0c\u5c0d\u61c9\u7684 system call \u5373 BPF system call\u3002</p> <p>\u70ba\u4e86\u57f7\u884c <code>BPF_PROG_TYPE_SYSCALL</code> \u985e\u578b\u7684 eBPF program\uff0ceBPF \u63d0\u4f9b\u4e86 <code>BPF_PROG_TEST_RUN</code>\uff0c\u8a72\u547d\u4ee4\u80fd\u5920\u8abf\u7528\u4ee5\u4e0b\u985e\u578b\u7684 eBPF program\uff1a</p> <ul> <li><code>BPF_PROG_TYPE_SOCK_OPS</code></li> <li><code>BPF_PROG_TYPE_SYSCALL</code></li> <li><code>BPF_PROG_TYPE_RAW_TRACEPOINT</code></li> <li><code>BPF_PROG_TYPE_TRACING</code></li> <li><code>BPF_PROG_TYPE_SOCKET_FILTER</code></li> <li><code>BPF_PROG_TYPE_SCHED_CLS</code></li> <li><code>BPF_PROG_TYPE_SCHED_ACT</code></li> <li><code>BPF_PROG_TYPE_XDP</code></li> <li><code>BPF_PROG_TYPE_CGROUP_SKB</code></li> <li><code>BPF_PROG_TYPE_LWT_IN</code></li> <li><code>BPF_PROG_TYPE_LWT_OUT</code></li> <li><code>BPF_PROG_TYPE_LWT_XMIT</code></li> <li><code>BPF_PROG_TYPE_LWT_SEG6LOCAL</code></li> <li><code>BPF_PROG_TYPE_FLOW_DISSECTOR</code></li> </ul> <p>\u5728 scx_goland\uff08scx_rustland\uff09\u4e2d\u4f7f\u7528 <code>BPF_PROG_TYPE_SYSCAL</code> \u985e\u578b\u7684 program\uff0c\u8b93 user-space program \u5f97\u4ee5\u547c\u53eb\u5ba2\u88fd\u5316\u7684\u51fd\u5f0f\u70ba\u525b\u559a\u9192\u7684\u4efb\u52d9\u9078\u64c7\u4e00\u500b CPU\uff08\u4e5f\u5c31\u662f scheduler_extension \u6587\u4ef6\u63d0\u5230\u7684 select_cpu hook\uff09\uff1a</p> <pre><code>/*\n * Select and wake-up an idle CPU for a specific task from the user-space\n * scheduler.\n */\nSEC(\"syscall\")\nint rs_select_cpu(struct task_cpu_arg *input)\n{\n    struct task_struct *p;\n    int cpu;\n\n    p = bpf_task_from_pid(input-&gt;pid);\n    if (!p)\n        return -EINVAL;\n\n    bpf_rcu_read_lock();\n    cpu = pick_idle_cpu(p, input-&gt;cpu);\n    bpf_rcu_read_unlock();\n\n    bpf_task_release(p);\n\n    /*\n     * Wake-up the CPU if idle. Use SCX_KICK_IDLE to prevent unecessary\n     * rescheduling events in case the CPU is already awake (since we don't\n     * know exactly what the user-space scheduler is doing we can't\n     * implicitly assume that the target CPU is idle here).\n     */\n    if (cpu &gt;= 0)\n        scx_bpf_kick_cpu(cpu, SCX_KICK_IDLE);\n\n    return cpu;\n}\n</code></pre> <p>\u91cd\u8981\u767c\u73fe: \u5728\u4f7f\u7528 <code>BPF_PROG_TEST_RUN</code> command \u6642\u7ffb\u95b1 eBPF-docs \u6587\u4ef6\u5f97\u77e5 <code>BPF_PROG_TYPE_SYSCALL</code> \u985e\u578b\u7684 eBPF program \u50c5\u9700\u8981\u50b3\u5165 <code>ctx_in</code> \u53c3\u6578\u3002\u4f46\u9019\u90e8\u5206\u7684\u8cc7\u8a0a\u662f\u932f\u8aa4\u7684\uff0c\u5be6\u969b\u4e0a <code>ctx_size_in</code> \u4e5f\u9700\u8981\u88ab\u5e36\u5165\uff0c<code>BPF_PROG_TYPE_SYSCALL</code> \u985e\u578b\u7684 eBPF program \u624d\u80fd\u9806\u5229\u57f7\u884c\u3002</p> <p>\u9019\u90e8\u5206\u8b93\u7b46\u8005\u5361\u4e86\u4e0d\u5c11\u6642\u9593\uff08\u4e00\u5ea6\u61f7\u7591\u662f libbpfgo \u6c92\u6709\u5beb\u597d\uff09\uff0c\u6700\u5f8c\u624d\u767c\u73fe\u662f\u6587\u4ef6\u7684\u554f\u984c\u3002\u76ee\u524d eBPF \u6587\u4ef6\u5c0d\u65bc <code>ctx_size_in</code> \u7684\u8ad6\u8ff0\u5df2\u5f97\u5230\u4fee\u6b63\uff0c\u5176\u4ed6\u958b\u767c\u8005\u4e5f\u53ef\u4ee5\u5c11\u8e29\u4e00\u4e9b\u5751\u3002</p>"},{"location":"zh/development-history/#_5","title":"\u79fb\u690d\u904e\u7a0b\u4e2d\u9047\u5230\u7684\u554f\u984c","text":""},{"location":"zh/development-history/#page-fault","title":"Page Fault \u554f\u984c","text":"<p>\u4fee\u6539\u57fa\u790e\u8a2d\u65bd\u96d6\u7136\u82b1\u4e0a\u4e86\u4e00\u4e9b\u6642\u9593\uff0c\u4f46 Patch \u7684\u63a8\u9032\u8207\u5426\u5176\u5be6\u4e0d\u5f71\u97ff\u958b\u767c scheduler\uff0c\u56e0\u70ba\u53ef\u4ee5\u5728 PR merged \u4e4b\u524d\u4f7f\u7528 forked repo \u66ff\u4ee3\u3002</p> <p>\u7136\u800c\uff0c\u7576\u88dc\u8db3 libbpfgo \u5fc5\u8981\u7684 APIs \u5f8c\u537b\u9047\u5230\u4e86\u7cfb\u7d71\u505c\u6eef\u7684\u554f\u984c\uff0c\u8a72\u554f\u984c\u6703\u767c\u751f\u5728 scx_goland loaded \u4e4b\u5f8c\uff0c\u7cfb\u7d71\u6703\u505c\u6eef\u7d04\u4e94\u79d2\u7684\u6642\u9593\u624d\u6062\u5fa9\u6b63\u5e38\uff08\u525b\u597d\u7b49\u65bc watch dog \u8e22\u9664\u6392\u7a0b\u5668\u7684 timeout \u8a2d\u5b9a\u503c\uff09\u3002</p> <p>\u8d77\u521d\u61f7\u7591\u662f\u81ea\u5df1\u65b0\u589e\u7684 user_ringbuffer \u6c92\u6709\u9806\u5229\u7684\u5c07 dispatched task \u50b3\u9054\u7d66 eBPF program\uff0c\u96a8\u5f8c\u900f\u904e\u55ae\u5143\u6e2c\u8a66\u9a57\u8b49\u5426\u5b9a\u4e86\u9019\u500b\u5047\u8a2d\u3002</p> <p>\u601d\u8003\u4e86\u8a31\u4e45\u5be6\u5728\u6c92\u6709\u982d\u7dd2\uff0c\u56e0\u6b64\u5411 Andrea Righi \u8acb\u6559\uff0c\u9019\u624d\u5f97\u77e5\u662f\u56e0\u70ba golang \u6240\u958b\u767c\u7684 user-space agent \u6703\u9047\u5230 page fault \u7684\u554f\u984c\uff08Andrea Righi \u6703\u9019\u9ebc\u7be4\u5b9a\u662f\u56e0\u70ba\u4ed6\u5728\u958b\u767c scx_rustland \u6642\u4e5f\u9047\u5230\u4e86\u540c\u6a23\u7684\u554f\u984c\uff0c\u4ed6\u662f\u5229\u7528 buddy allocator \u4f86\u907f\u514d page fault \u767c\u751f\uff09\u3002</p> <p>\u82e5 user-space agent \u767c\u751f page fault\uff0c\u6703\u5c0e\u81f4\u6240\u6709\u7684\u4efb\u52d9\u5206\u914d\u66ab\u505c\uff0c\u800c page fault \u53c8\u4ef0\u8cf4 kthread \u4f86\u89e3\u6c7a\uff0c\u9019\u5c31\u5c0e\u81f4\u4e86 deadlock \u767c\u751f\u3002</p> <p>\u89e3\u6c7a\u65b9\u6848\u8a55\u4f30:</p> <ol> <li>\u6539\u7528 TinyGo \u7de8\u8b6f</li> <li>\u4f9d\u6a23\u756b\u846b\u8606\uff0c\u5728 golang \u5be6\u4f5c buddy allocator</li> <li>\u8b93\u6240\u6709 kthread \u76f4\u63a5\u7531 eBPF \u6392\u7a0b</li> </ol> <p>\u524d\u5169\u8005\u6703\u9700\u8981\u66f4\u591a\u7684\u6642\u9593\u5b8c\u6210\uff0c\u8003\u616e\u5230\u6642\u9593\u6210\u672c\uff0c\u5148\u9078\u64c7\u4e86\u65b9\u6848 #3\uff1a</p> <pre><code>void BPF_STRUCT_OPS(goland_enqueue, struct task_struct *p, u64 enq_flags)\n{\n    struct queued_task_ctx *task;\n\n    // ...\n\n    /*\n     * WORKAROUND: Dispatch user-space scheduler to the shared DSQ to avoid\n     * starvation on user space scheduler goroutine(s).\n     */\n    if (is_belong_usersched_task(p)) {\n        scx_bpf_dsq_insert_vtime(p, SHARED_DSQ,\n            SCX_SLICE_INF, -1ULL, 0);\n        __sync_fetch_and_add(&amp;nr_kernel_dispatches, 1);\n        kick_task_cpu(p);\n        return;\n    }\n    // ...\n}\n</code></pre>"},{"location":"zh/development-history/#golang-runtime","title":"Golang Runtime \u8907\u96dc\u5ea6\u554f\u984c","text":"<p>\u907f\u514d\u6389 page fault \u5f8c\uff0c\u767c\u73fe\u6392\u7a0b\u5668\u4ecd\u7136\u6703\u5361\u4f4f\uff0c\u7d93\u904e\u4e86\u4e00\u6bb5\u6642\u9593\u624d\u6ce8\u610f\u5230\u662f golang runtime \u9020\u6210\u7684\u554f\u984c\u3002</p> <p>\u4ee5 scx_rustland \u70ba\u4f8b\uff0cuser space agent \u6703\u5c07\u81ea\u5df1\u7684 PID \u544a\u8a34 eBPF program\uff0c\u8b93 user space agent \u53ef\u4ee5\u4e0d\u7528\u7d93\u904e agent \u76f4\u63a5\u7531 eBPF scheduler \u9032\u884c\u6392\u7a0b\u3002\u4f46\u5728\u4f7f\u7528 golang \u91cd\u9020 agent \u6642\u537b\u5ffd\u7565\u4e86 golang runtime \u7684\u8907\u96dc\u5ea6\uff0c\u5373\u4f7f\u5c07 <code>GOMAXPROC</code> \u8a2d\u7f6e\u70ba 1 \u7684\u60c5\u6cc1\u4e0b\uff0cgolang runtime \u4ecd\u6703\u5efa\u7acb\u591a\u500b M\uff08\u4e00\u500b M \u5c0d\u61c9\u4e00\u500b Kernel Scheduling Entry\uff09\u3002</p> <p>\u56e0\u6b64\uff0c\u53ea\u6709\u55ae\u500b process \u88ab\u6392\u7a0b\u662f\u7121\u6cd5\u8b93 golang agent \u6b63\u5e38\u5de5\u4f5c\u7684\uff0c\u6211\u5011\u8981\u8b93\u76f8\u95dc\u806f\u7684 M \u90fd\u80fd\u5920\u76f4\u63a5\u88ab eBPF scheduler \u6392\u7a0b\uff1a</p> <pre><code>/*\n * Return true if the target task @p belongs to the user-space scheduler.\n */\nstatic inline bool is_belong_usersched_task(const struct task_struct *p)\n{\n    return p-&gt;tgid == usersched_pid;\n}\n</code></pre> <p>\u8a72\u51fd\u5f0f\u6703\u5224\u65b7 task \u7684 tgid \u662f\u5426\u5c6c\u65bc golang agent\uff0c\u5982\u679c\u662f\uff0c\u5247\u6703\u5728 <code>.enqueue</code> hook \u6642\u7531 eBPF scheduler \u76f4\u63a5\u6392\u7a0b\uff1a</p> <pre><code> /*\n  * WORKAROUND: Dispatch user-space scheduler to the shared DSQ to avoid\n  * starvation on user space scheduler goroutine(s).\n  */\n if (is_belong_usersched_task(p)) {\n  scx_bpf_dsq_insert_vtime(p, SHARED_DSQ,\n      SCX_SLICE_INF, -1ULL, 0);\n  __sync_fetch_and_add(&amp;nr_kernel_dispatches, 1);\n  kick_task_cpu(p);\n  return;\n }\n</code></pre>"},{"location":"zh/development-history/#_6","title":"\u6280\u8853\u67b6\u69cb\u5716","text":"<p>Golang Runtime \u7684 G-M-P \u6a21\u578b\uff1a</p> <pre><code>graph TB\n    subgraph \"Golang Runtime\"\n        G1[Goroutine 1] --&gt; M1[OS Thread 1]\n        G2[Goroutine 2] --&gt; M1\n        G3[Goroutine 3] --&gt; M2[OS Thread 2]\n        G4[Goroutine 4] --&gt; M2\n\n        M1 --&gt; P1[Processor 1]\n        M2 --&gt; P2[Processor 2]\n    end\n\n    subgraph \"eBPF Scheduler\"\n        P1 --&gt; S[SCX Scheduler]\n        P2 --&gt; S\n        S --&gt; K[Kernel Space]\n    end\n</code></pre>"},{"location":"zh/development-history/#_7","title":"\u7e3d\u7d50","text":"<p>\u7d93\u904e\u4e00\u7cfb\u5217\u7684\u52aa\u529b\uff0c\u4f7f\u7528 golang \u958b\u767c Linux \u6392\u7a0b\u5668\u7684\"\u5e7b\u60f3\"\u5f97\u4ee5\u5be6\u73fe\uff08\u96d6\u7136\u76ee\u524d\u7684\u5be6\u4f5c\u6548\u80fd\u4e0d\u4f73\uff09\uff1a</p> <p>\u5c08\u6848\u9023\u7d50: https://github.com/Gthulhu/scx_goland_core</p>"},{"location":"zh/development-history/#_8","title":"\u672a\u4f86\u8003\u91cf","text":"<p>\u6700\u521d\u5e0c\u671b scx_goland_core \u80fd\u5920\u88ab scx \u5c08\u6848\u63a5\u53d7\uff0c\u4f46\u8003\u616e\u5230\u4ee5\u4e0b\u5e7e\u9ede\uff0c\u66ab\u6642\u6253\u6d88\u4e86\u9019\u500b\u5ff5\u982d\uff1a</p> <ol> <li>\u7dad\u8b77\u8ca0\u64d4: \u8ca2\u737b\u5230 upstream \u610f\u5473\u8457\u4e4b\u5f8c\u7684\u66f4\u52d5\u90fd\u9700\u8981\u8017\u8cbb\u5927\u91cf\u6642\u9593\uff0c\u6c92\u8fa6\u6cd5\u6839\u64da\u9700\u6c42\u5feb\u901f\u7684\u63a8\u9032\u67d0\u9805 patch \u7684\u9032\u5ea6</li> <li>\u5c08\u6848\u6574\u5408: scx_goland_core \u53ea\u662f\u5be6\u73fe\u7d42\u6975\u76ee\u6a19\u7684\u4e00\u9805\u57fa\u790e\u8a2d\u65bd\uff0c\u9810\u671f\u4e4b\u5f8c\u9084\u6703\u6709\u5c0d\u61c9\u7684 golang scheduler \u5be6\u4f5c\u3001k8s operator \u6703\u653e\u5728\u540c\u4e00\u500b\u5c08\u6848\u4e0b\u3002\u9664\u975e scx \u6709\u8fa6\u6cd5\u63a5\u53d7\u6240\u6709\u884d\u4f38\u7684\u5c08\u6848\uff0c\u5426\u5247\u5728\u9019\u500b\u6642\u9593\u9ede\u8ca2\u737b\u5230 upstream \u6703\u5f71\u97ff\u4e4b\u5f8c\u958b\u767c\u7684\u9748\u6d3b\u5ea6</li> </ol>"},{"location":"zh/development-history/#_9","title":"\u6280\u8853\u6311\u6230\u6458\u8981","text":"\u6311\u6230 \u554f\u984c\u63cf\u8ff0 \u89e3\u6c7a\u65b9\u6848 \u72c0\u614b struct-ops \u652f\u63f4 libbpfgo \u7f3a\u5c11 struct-ops map \u652f\u63f4 \u8ca2\u737b PR #476 \u2705 \u5df2\u89e3\u6c7a user ring buffer \u7f3a\u5c11 user-ring-buffer API \u8ca2\u737b PR #480 \u2705 \u5df2\u89e3\u6c7a \u6587\u6a94\u932f\u8aa4 BPF_PROG_TEST_RUN \u6587\u6a94\u7f3a\u5c11 ctx_size_in \u4fee\u6b63\u5b98\u65b9\u6587\u6a94 \u2705 \u5df2\u89e3\u6c7a Page Fault Golang agent \u5f15\u8d77\u7cfb\u7d71\u505c\u6eef kthread \u76f4\u63a5 eBPF \u6392\u7a0b \u2705 \u5df2\u7de9\u89e3 Runtime \u8907\u96dc\u5ea6 Golang M:N \u6a21\u578b\u5c0e\u81f4\u6392\u7a0b\u554f\u984c tgid \u7fa4\u7d44\u6392\u7a0b \u2705 \u5df2\u89e3\u6c7a <p>\u53c3\u8207\u8ca2\u737b</p> <p>\u5982\u679c\u4f60\u5c0d\u65bc\u9019\u500b\u5c08\u6848\u611f\u8208\u8da3\uff0c\u4e5f\u53ef\u4ee5\u5617\u8a66\u63d0\u4ea4 Patch \u5594 :)</p>"},{"location":"zh/faq/","title":"\u5e38\u898b\u554f\u984c","text":"<p>\u672c\u9801\u9762\u6536\u96c6\u4e86 Gthulhu \u548c Qumun \u4f7f\u7528\u904e\u7a0b\u4e2d\u7684\u5e38\u898b\u554f\u984c\u8207\u89e3\u7b54\u3002</p>"},{"location":"zh/faq/#_2","title":"\u5b89\u88dd\u76f8\u95dc\u554f\u984c","text":""},{"location":"zh/faq/#q-sched_ext","title":"Q: \u5982\u4f55\u78ba\u8a8d\u6211\u7684\u6838\u5fc3\u652f\u63f4 sched_ext\uff1f","text":"<p>A: \u60a8\u53ef\u4ee5\u901a\u904e\u4ee5\u4e0b\u65b9\u5f0f\u6aa2\u67e5\uff1a</p> <pre><code># \u65b9\u6cd5 1: \u6aa2\u67e5\u6838\u5fc3\u914d\u7f6e\ngrep -r \"CONFIG_SCHED_CLASS_EXT\" /boot/config-$(uname -r)\n\n# \u65b9\u6cd5 2: \u6aa2\u67e5 /proc/config.gz\nzcat /proc/config.gz | grep \"CONFIG_SCHED_CLASS_EXT\"\n\n# \u65b9\u6cd5 3: \u6aa2\u67e5 sched_ext \u76ee\u9304\nls /sys/kernel/sched_ext/ 2&gt;/dev/null\n</code></pre> <p>\u5982\u679c\u8f38\u51fa\u5305\u542b <code>CONFIG_SCHED_CLASS_EXT=y</code>\uff0c\u8868\u793a\u60a8\u7684\u6838\u5fc3\u652f\u63f4 sched_ext\u3002</p>"},{"location":"zh/faq/#q-libbpf-not-found","title":"Q: \u7de8\u8b6f\u6642\u51fa\u73fe \"libbpf not found\" \u932f\u8aa4\u8a72\u600e\u9ebc\u8fa6\uff1f","text":"<p>A: \u9019\u901a\u5e38\u662f\u56e0\u70ba libbpf \u6c92\u6709\u6b63\u78ba\u5b89\u88dd\u3002\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u89e3\u6c7a\uff1a</p> <pre><code># Ubuntu/Debian\nsudo apt install libbpf-dev\n\n# CentOS/RHEL/Fedora\nsudo dnf install libbpf-devel\n\n# \u6216\u8005\u624b\u52d5\u7de8\u8b6f libbpf\ngit clone https://github.com/libbpf/libbpf.git\ncd libbpf/src\nmake\nsudo make install\n</code></pre>"},{"location":"zh/faq/#q-clang-17","title":"Q: \u70ba\u4ec0\u9ebc\u9700\u8981 Clang 17+\uff1f","text":"<p>A: Clang 17+ \u63d0\u4f9b\u4e86\u66f4\u5b8c\u6574\u7684 BPF \u652f\u63f4\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u66f4\u597d\u7684 BPF CO-RE (Compile Once, Run Everywhere) \u652f\u63f4</li> <li>\u6700\u65b0\u7684 BPF \u6307\u4ee4\u96c6\u652f\u63f4</li> <li>\u66f4\u7a69\u5b9a\u7684 BPF \u7a0b\u5f0f\u7de8\u8b6f</li> </ul> <p>\u5982\u679c\u60a8\u7684\u7cfb\u7d71\u6c92\u6709 Clang 17+\uff0c\u53ef\u4ee5\u9019\u6a23\u5b89\u88dd\uff1a</p> <pre><code># Ubuntu/Debian\nsudo apt install clang-17\n\n# \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\nexport CC=clang-17\nexport CXX=clang++-17\n</code></pre>"},{"location":"zh/faq/#_3","title":"\u57f7\u884c\u76f8\u95dc\u554f\u984c","text":""},{"location":"zh/faq/#q-operation-not-permitted","title":"Q: \u57f7\u884c\u6642\u63d0\u793a \"Operation not permitted\" \u932f\u8aa4","text":"<p>A: \u9019\u662f\u6b0a\u9650\u554f\u984c\uff0cBPF \u7a0b\u5f0f\u8f09\u5165\u9700\u8981 root \u6b0a\u9650\uff1a</p> <pre><code># \u6b63\u78ba\u7684\u57f7\u884c\u65b9\u5f0f\nsudo ./main\n\n# \u6216\u8005\u4f7f\u7528 Docker\ndocker run --privileged=true --pid host --rm gthulhu:latest /gthulhu/main\n</code></pre>"},{"location":"zh/faq/#q","title":"Q: \u8abf\u5ea6\u5668\u555f\u52d5\u5f8c\u7cfb\u7d71\u8b8a\u6162\u4e86\u600e\u9ebc\u8fa6\uff1f","text":"<p>A: \u9019\u53ef\u80fd\u662f\u7531\u65bc\u4ee5\u4e0b\u539f\u56e0\uff1a</p> <ol> <li> <p>\u8abf\u5ea6\u53c3\u6578\u4e0d\u9069\u5408\u60a8\u7684\u5de5\u4f5c\u8ca0\u8f09\uff1a <pre><code># \u6aa2\u67e5\u7cfb\u7d71\u8ca0\u8f09\ntop\nhtop\n\n# \u6aa2\u67e5\u4e0a\u4e0b\u6587\u5207\u63db\u983b\u7387\nvmstat 1\n</code></pre></p> </li> <li> <p>\u8a18\u61b6\u9ad4\u4e0d\u8db3\uff1a <pre><code># \u6aa2\u67e5\u8a18\u61b6\u9ad4\u4f7f\u7528\nfree -h\ncat /proc/meminfo\n</code></pre></p> </li> <li> <p>BPF \u7a0b\u5f0f\u6027\u80fd\u554f\u984c\uff1a <pre><code># \u6aa2\u67e5 BPF \u7a0b\u5f0f\u7d71\u8a08\nsudo bpftool prog show\nsudo bpftool prog profile\n</code></pre></p> </li> </ol> <p>\u89e3\u6c7a\u65b9\u6848\uff1a - \u66ab\u505c\u8abf\u5ea6\u5668\uff1a<code>sudo pkill -f \"./main\"</code> - \u6aa2\u67e5\u7cfb\u7d71\u65e5\u8a8c\uff1a<code>dmesg | tail -50</code> - \u8abf\u6574\u8abf\u5ea6\u53c3\u6578\u6216\u56de\u5831\u554f\u984c</p>"},{"location":"zh/faq/#q_1","title":"Q: \u5982\u4f55\u505c\u6b62\u8abf\u5ea6\u5668\uff1f","text":"<p>A: \u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u505c\u6b62\u8abf\u5ea6\u5668\uff1a</p> <pre><code># \u65b9\u6cd5 1: Ctrl+C (\u5982\u679c\u5728\u524d\u666f\u57f7\u884c)\n^C\n\n# \u65b9\u6cd5 2: \u767c\u9001 SIGTERM \u4fe1\u865f\nsudo pkill -TERM -f \"./main\"\n\n# \u65b9\u6cd5 3: \u767c\u9001 SIGINT \u4fe1\u865f\nsudo pkill -INT -f \"./main\"\n\n# \u65b9\u6cd5 4: \u5f37\u5236\u7d42\u6b62 (\u4e0d\u63a8\u85a6)\nsudo pkill -KILL -f \"./main\"\n</code></pre>"},{"location":"zh/faq/#_4","title":"\u6027\u80fd\u76f8\u95dc\u554f\u984c","text":""},{"location":"zh/faq/#q_2","title":"Q: \u5982\u4f55\u76e3\u63a7\u8abf\u5ea6\u5668\u6027\u80fd\uff1f","text":"<p>A: \u60a8\u53ef\u4ee5\u4f7f\u7528\u591a\u7a2e\u5de5\u5177\u76e3\u63a7\u8abf\u5ea6\u5668\u6027\u80fd\uff1a</p> <ol> <li> <p>\u7cfb\u7d71\u5de5\u5177\uff1a <pre><code># \u76e3\u63a7 CPU \u4f7f\u7528\u7387\nhtop\n\n# \u76e3\u63a7\u4e0a\u4e0b\u6587\u5207\u63db\nvmstat 1\n\n# \u76e3\u63a7\u8abf\u5ea6\u5ef6\u9072\nperf sched record -- sleep 10\nperf sched latency\n</code></pre></p> </li> <li> <p>BPF \u5de5\u5177\uff1a <pre><code># \u6aa2\u67e5 BPF \u7a0b\u5f0f\u72c0\u614b\nsudo bpftool prog list | grep sched\n\n# \u6aa2\u67e5 BPF map \u5167\u5bb9\nsudo bpftool map dump name task_info_map\n</code></pre></p> </li> <li> <p>\u8abf\u5ea6\u5668\u5167\u5efa\u76e3\u63a7\uff1a <pre><code># \u67e5\u770b\u8abf\u5ea6\u5668\u65e5\u8a8c\njournalctl -f -u gthulhu\n\n# \u67e5\u770b BPF \u8ffd\u8e64\u8a0a\u606f\nsudo cat /sys/kernel/debug/tracing/trace_pipe\n</code></pre></p> </li> </ol>"},{"location":"zh/faq/#q-cfs","title":"Q: \u8abf\u5ea6\u5668\u76f8\u6bd4 CFS \u6709\u4ec0\u9ebc\u512a\u52e2\uff1f","text":"<p>A: Gthulhu \u8abf\u5ea6\u5668\u7684\u4e3b\u8981\u512a\u52e2\uff1a</p> \u7279\u6027 CFS Gthulhu \u5ef6\u9072\u6700\u4f73\u5316 \u57fa\u672c \u5c08\u696d\u5316 \u4efb\u52d9\u5206\u985e \u7d71\u4e00\u8655\u7406 \u81ea\u52d5\u5206\u985e CPU \u62d3\u64b2\u611f\u77e5 \u6709\u9650 \u5b8c\u6574\u652f\u63f4 \u52d5\u614b\u8abf\u6574 \u975c\u614b\u53c3\u6578 \u5373\u6642\u8abf\u6574 \u4f7f\u7528\u8005\u7a7a\u9593\u64f4\u5c55 \u4e0d\u652f\u63f4 \u5b8c\u5168\u652f\u63f4"},{"location":"zh/faq/#q_3","title":"Q: \u5982\u4f55\u8abf\u6574\u8abf\u5ea6\u5668\u53c3\u6578\uff1f","text":"<p>A: \u76ee\u524d\u652f\u63f4\u7684\u8abf\u6574\u65b9\u5f0f\uff1a</p> <ol> <li> <p>\u74b0\u5883\u8b8a\u6578\uff1a <pre><code>export GTHULHU_DEBUG=true\nexport GTHULHU_LOG_LEVEL=DEBUG\nsudo -E ./main\n</code></pre></p> </li> <li> <p>\u7de8\u8b6f\u6642\u53c3\u6578 (\u4fee\u6539 <code>main.bpf.c</code>)\uff1a <pre><code>// \u8abf\u6574\u57fa\u790e\u6642\u9593\u7247\n#define BASE_SLICE_NS    3000000ULL  // 3ms \u800c\u4e0d\u662f 5ms\n</code></pre></p> </li> <li> <p>\u57f7\u884c\u6642 API (\u8a08\u5283\u4e2d)\uff1a <pre><code>// \u672a\u4f86\u5c07\u652f\u63f4\u52d5\u614b\u8abf\u6574\nparams := &amp;SchedulingParams{\n    BaseSliceNs: 3000000,\n    LatencyFactor: 1.5,\n}\nUpdateSchedulingParams(params)\n</code></pre></p> </li> </ol>"},{"location":"zh/faq/#_5","title":"\u9664\u932f\u76f8\u95dc\u554f\u984c","text":""},{"location":"zh/faq/#q_4","title":"Q: \u5982\u4f55\u958b\u555f\u8abf\u8a66\u6a21\u5f0f\uff1f","text":"<p>A: \u60a8\u53ef\u4ee5\u901a\u904e\u4ee5\u4e0b\u65b9\u5f0f\u958b\u555f\u8abf\u8a66\uff1a</p> <ol> <li> <p>\u74b0\u5883\u8b8a\u6578\uff1a <pre><code>export GTHULHU_DEBUG=true\nexport GTHULHU_LOG_LEVEL=DEBUG\nsudo -E ./main\n</code></pre></p> </li> <li> <p>BPF \u8ffd\u8e64\uff1a <pre><code># \u7d42\u7aef 1: \u555f\u52d5\u8abf\u5ea6\u5668\nsudo ./main\n\n# \u7d42\u7aef 2: \u67e5\u770b BPF \u8ffd\u8e64\nsudo cat /sys/kernel/debug/tracing/trace_pipe\n</code></pre></p> </li> <li> <p>\u7cfb\u7d71\u65e5\u8a8c\uff1a <pre><code># \u67e5\u770b\u6838\u5fc3\u65e5\u8a8c\ndmesg -w\n\n# \u67e5\u770b systemd \u65e5\u8a8c\njournalctl -f\n</code></pre></p> </li> </ol>"},{"location":"zh/faq/#q-bpf","title":"Q: \u9047\u5230 BPF \u9a57\u8b49\u5668\u932f\u8aa4\u600e\u9ebc\u8fa6\uff1f","text":"<p>A: BPF \u9a57\u8b49\u5668\u932f\u8aa4\u901a\u5e38\u8868\u793a\u7a0b\u5f0f\u6709\u554f\u984c\uff1a</p> <ol> <li> <p>\u6aa2\u67e5\u932f\u8aa4\u8a0a\u606f\uff1a <pre><code># \u67e5\u770b\u8a73\u7d30\u932f\u8aa4\ndmesg | grep -i bpf\n</code></pre></p> </li> <li> <p>\u5e38\u898b\u554f\u984c\uff1a</p> </li> <li>\u7121\u754c\u8ff4\u5708\uff1a\u78ba\u4fdd\u6240\u6709\u8ff4\u5708\u90fd\u6709\u660e\u78ba\u7684\u9000\u51fa\u689d\u4ef6</li> <li>\u8a18\u61b6\u9ad4\u8d8a\u754c\uff1a\u6aa2\u67e5\u9663\u5217\u5b58\u53d6\u662f\u5426\u5728\u7bc4\u570d\u5167</li> <li> <p>\u6307\u6a19\u4f7f\u7528\uff1a\u78ba\u4fdd\u6307\u6a19\u5728\u4f7f\u7528\u524d\u7d93\u904e NULL \u6aa2\u67e5</p> </li> <li> <p>\u9a57\u8b49 BPF \u7a0b\u5f0f\uff1a <pre><code># \u4f7f\u7528 bpftool \u9a57\u8b49\nsudo bpftool prog load main.bpf.o /sys/fs/bpf/test_prog\n</code></pre></p> </li> </ol>"},{"location":"zh/faq/#q_5","title":"Q: \u5982\u4f55\u56de\u5831\u554f\u984c\uff1f","text":"<p>A: \u5982\u679c\u9047\u5230\u554f\u984c\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\uff1a</p> <ol> <li> <p>\u6536\u96c6\u7cfb\u7d71\u8cc7\u8a0a\uff1a <pre><code># \u7cfb\u7d71\u8cc7\u8a0a\nuname -a\ncat /etc/os-release\n\n# \u6838\u5fc3\u7248\u672c\u548c\u914d\u7f6e\nuname -r\ngrep CONFIG_SCHED_CLASS_EXT /boot/config-$(uname -r)\n\n# Go \u7248\u672c\ngo version\n\n# Clang \u7248\u672c\nclang --version\n</code></pre></p> </li> <li> <p>\u6536\u96c6\u932f\u8aa4\u65e5\u8a8c\uff1a <pre><code># \u8abf\u5ea6\u5668\u65e5\u8a8c\nsudo ./main 2&gt;&amp;1 | tee gthulhu.log\n\n# \u7cfb\u7d71\u65e5\u8a8c\ndmesg &gt; dmesg.log\njournalctl --since \"1 hour ago\" &gt; journal.log\n</code></pre></p> </li> <li> <p>\u5728 GitHub \u63d0\u4ea4 Issue\uff1a</p> </li> <li>\u524d\u5f80 Gthulhu Issues</li> <li>\u9078\u64c7\u9069\u5408\u7684 Issue \u6a21\u677f</li> <li>\u9644\u4e0a\u7cfb\u7d71\u8cc7\u8a0a\u548c\u932f\u8aa4\u65e5\u8a8c</li> <li>\u63cf\u8ff0\u91cd\u73fe\u6b65\u9a5f</li> </ol>"},{"location":"zh/faq/#_6","title":"\u958b\u767c\u76f8\u95dc\u554f\u984c","text":""},{"location":"zh/faq/#q_6","title":"Q: \u5982\u4f55\u53c3\u8207\u958b\u767c\uff1f","text":"<p>A: \u6b61\u8fce\u53c3\u8207\u958b\u767c\uff01\u8acb\u53c3\u8003\uff1a</p> <ol> <li>\u67e5\u770b\u8ca2\u737b\u6307\u5357\uff1acontributing.md</li> <li> <p>\u4e86\u89e3\u7a0b\u5f0f\u78bc\u7d50\u69cb\uff1a <pre><code>Gthulhu/\n\u251c\u2500\u2500 main.go              # \u4e3b\u7a0b\u5f0f\n\u251c\u2500\u2500 main.bpf.c          # BPF \u7a0b\u5f0f\n\u251c\u2500\u2500 internal/sched/     # \u8abf\u5ea6\u908f\u8f2f\n\u2514\u2500\u2500 api/               # API \u670d\u52d9\n</code></pre></p> </li> <li> <p>\u8a2d\u5b9a\u958b\u767c\u74b0\u5883\uff1a <pre><code>git clone https://github.com/Gthulhu/Gthulhu.git\ncd Gthulhu\nmake dep\nmake build\nmake test\n</code></pre></p> </li> </ol>"},{"location":"zh/faq/#q_7","title":"Q: \u5982\u4f55\u65b0\u589e\u81ea\u8a02\u7684\u8abf\u5ea6\u7b56\u7565\uff1f","text":"<p>A: \u60a8\u53ef\u4ee5\u901a\u904e\u4ee5\u4e0b\u65b9\u5f0f\u5ba2\u88fd\u5316\uff1a</p> <ol> <li> <p>\u4fee\u6539 BPF \u7a0b\u5f0f (<code>main.bpf.c</code>)\uff1a <pre><code>// \u65b0\u589e\u81ea\u8a02\u7684 CPU \u9078\u64c7\u908f\u8f2f\ns32 custom_select_cpu(struct task_struct *p, s32 prev_cpu, u64 wake_flags) {\n    // \u60a8\u7684\u908f\u8f2f\n    return selected_cpu;\n}\n</code></pre></p> </li> <li> <p>\u4fee\u6539 Go \u7a0b\u5f0f (<code>main.go</code>)\uff1a <pre><code>// \u65b0\u589e\u81ea\u8a02\u7684\u4efb\u52d9\u8655\u7406\u908f\u8f2f\nfunc handleCustomTask(taskInfo *TaskInfo) {\n    // \u60a8\u7684\u908f\u8f2f\n}\n</code></pre></p> </li> <li> <p>\u4f7f\u7528 Qumun API\uff1a <pre><code>// \u5be6\u4f5c CustomScheduler \u4ecb\u9762\ntype MyScheduler struct{}\n\nfunc (s *MyScheduler) ScheduleTask(task *Task) *ScheduleDecision {\n    // \u60a8\u7684\u8abf\u5ea6\u908f\u8f2f\n    return decision\n}\n</code></pre></p> </li> </ol>"},{"location":"zh/faq/#_7","title":"\u517c\u5bb9\u6027\u554f\u984c","text":""},{"location":"zh/faq/#q-linux","title":"Q: \u652f\u63f4\u54ea\u4e9b Linux \u767c\u884c\u7248\uff1f","text":"<p>A: \u7406\u8ad6\u4e0a\u652f\u63f4\u6240\u6709\u5177\u5099\u4ee5\u4e0b\u689d\u4ef6\u7684\u767c\u884c\u7248\uff1a</p> <ul> <li>\u6838\u5fc3\u7248\u672c: 6.12+</li> <li>sched_ext \u652f\u63f4: \u5df2\u555f\u7528</li> <li>\u67b6\u69cb: x86_64</li> </ul> <p>\u5df2\u6e2c\u8a66\u7684\u767c\u884c\u7248\uff1a - Ubuntu 24.04+ - Fedora 39+ - Arch Linux (\u6700\u65b0)</p> <p>\u8a08\u5283\u652f\u63f4\uff1a - CentOS/RHEL 9+ - openSUSE Tumbleweed - Debian 13+</p>"},{"location":"zh/faq/#q_8","title":"Q: \u80fd\u5728\u5bb9\u5668\u4e2d\u57f7\u884c\u55ce\uff1f","text":"<p>A: \u53ef\u4ee5\uff0c\u4f46\u9700\u8981\u7279\u6b8a\u6b0a\u9650\uff1a</p> <pre><code># Docker \u57f7\u884c\ndocker run --privileged=true --pid host --rm gthulhu:latest\n\n# Podman \u57f7\u884c\npodman run --privileged --pid host --rm gthulhu:latest\n\n# Kubernetes \u57f7\u884c (\u9700\u8981\u7279\u6b8a\u914d\u7f6e)\n# \u8acb\u53c3\u8003 examples/kubernetes/ \u76ee\u9304\n</code></pre>"},{"location":"zh/faq/#q_9","title":"Q: \u8207\u5176\u4ed6\u8abf\u5ea6\u5668\u885d\u7a81\u55ce\uff1f","text":"<p>A: Gthulhu \u6703\u66ff\u63db\u7cfb\u7d71\u9810\u8a2d\u8abf\u5ea6\u5668\uff0c\u56e0\u6b64\uff1a</p> <ul> <li>\u4e0d\u80fd\u8207\u5176\u4ed6 sched_ext \u8abf\u5ea6\u5668\u540c\u6642\u57f7\u884c</li> <li>\u4e0d\u6703\u5f71\u97ff\u5373\u6642\u8abf\u5ea6\u985e\u5225 (SCHED_FIFO, SCHED_RR)</li> <li>\u6703\u66ff\u63db CFS \u8abf\u5ea6\u5668\u7684\u529f\u80fd</li> </ul> <p>\u554f\u984c\u6c92\u6709\u89e3\u6c7a\uff1f</p> <p>\u5982\u679c\u60a8\u7684\u554f\u984c\u6c92\u6709\u5728\u9019\u88e1\u627e\u5230\u7b54\u6848\uff0c\u8acb\uff1a</p> <ol> <li>\u67e5\u770b GitHub Issues</li> <li>\u641c\u5c0b\u73fe\u6709\u7684\u554f\u984c\u548c\u89e3\u7b54</li> <li>\u5982\u679c\u6c92\u6709\u627e\u5230\uff0c\u8acb\u5efa\u7acb\u65b0\u7684 Issue</li> </ol>"},{"location":"zh/how-it-works/","title":"\u904b\u4f5c\u539f\u7406","text":"<p>\u672c\u9801\u9762\u63d0\u4f9b\u95dc\u65bc Gthulhu \u548c Qumun \u6392\u7a0b\u5668\u7684\u6838\u5fc3\u5de5\u4f5c\u539f\u7406\u548c\u6280\u8853\u67b6\u69cb\u7684\u8a73\u7d30\u8cc7\u8a0a\u3002</p>"},{"location":"zh/how-it-works/#_2","title":"\u6574\u9ad4\u67b6\u69cb","text":""},{"location":"zh/how-it-works/#_3","title":"\u96d9\u5143\u4ef6\u8a2d\u8a08","text":"<p>Gthulhu \u6392\u7a0b\u5668\u63a1\u7528\u73fe\u4ee3\u96d9\u5143\u4ef6\u67b6\u69cb\uff1a</p> <p></p>"},{"location":"zh/how-it-works/#1-bpf-scheduler","title":"1. BPF Scheduler","text":"<p>\u57fa\u65bc Linux \u6838\u5fc3\u7684 sched_ext \u6846\u67b6\u5be6\u4f5c\u7684 BPF \u6392\u7a0b\u5668\uff0c\u8ca0\u8cac\u4f4e\u968e\u6392\u7a0b\u529f\u80fd\uff0c\u5982\u4efb\u52d9\u4f47\u5217\u7ba1\u7406\u3001CPU \u9078\u64c7\u908f\u8f2f\u548c\u57f7\u884c\u6392\u7a0b\u3002 BPF \u6392\u7a0b\u5668\u901a\u904e ring buffer \u8207 user ring buffer \u5169\u7a2e eBPF Map \u8207\u4f7f\u7528\u8005\u7a7a\u9593\u7684 Gthulhu \u6392\u7a0b\u5668\u6e9d\u901a\u3002</p>"},{"location":"zh/how-it-works/#2-gthulhu-user-space-scheduler","title":"2. Gthulhu (User Space Scheduler)","text":"<p>\u4f7f\u7528 qumun framework \u958b\u767c\u7684 Gthulhu \u6392\u7a0b\u5668\uff0c\u5b83\u6703\u63a5\u6536\u4f86\u81ea ring buffer eBPF Map \u7684\u5f85\u6392\u7a0b\u4efb\u52d9\u8cc7\u8a0a\uff0c\u4e26\u6839\u64da\u6392\u7a0b\u7b56\u7565\u9032\u884c\u6c7a\u7b56\u3002 \u6700\u5f8c\u518d\u5c07\u6392\u7a0b\u7d50\u679c\u7d93\u904e user ring buffer eBPF Map \u56de\u50b3\u7d66 BPF Scheduler\u3002</p> <p></p> <p>Gthulhu \u6392\u7a0b\u5668\u652f\u63f4\u63d2\u4ef6\u5316\u8a2d\u8a08\uff0c\u5141\u8a31\u958b\u767c\u8005\u6839\u64da\u9700\u6c42\u64f4\u5c55\u548c\u81ea\u5b9a\u7fa9\u6392\u7a0b\u7b56\u7565\u3002 Gthulhu/plugin \u76ee\u524d\u5be6\u4f5c\u4e86\u5169\u7a2e\u6392\u7a0b\u5668\uff1a</p> <ul> <li>Simple Scheduler\uff1a\u53c3\u8003 scx_simple \u5be6\u4f5c\u7684\u7c21\u6613\u6392\u7a0b\u5668\uff0c\u6838\u5fc3\u908f\u8f2f\u7d04 200 \u884c\u3002</li> <li>Gthulhu Scheduler\uff1a\u57fa\u65bc\u865b\u64ec\u57f7\u884c\u6642\u9593\u7684\u6392\u7a0b\u5668\uff0c\u4e26\u52a0\u5165\u5ef6\u9072\u654f\u611f\u512a\u5316\u548c CPU \u62d3\u64b2\u611f\u77e5\u529f\u80fd\u3002</li> </ul>"},{"location":"zh/how-it-works/#cpu","title":"CPU \u62d3\u64b2\u611f\u77e5\u6392\u7a0b","text":""},{"location":"zh/how-it-works/#cpu_1","title":"\u968e\u5c64\u5f0f CPU \u9078\u64c7","text":"<pre><code>graph TB\n    A[\u4efb\u52d9\u9700\u8981 CPU] --&gt; AA{\u50c5\u5141\u8a31\u55ae\u4e00 CPU?}\n    AA --&gt;|\u662f| AB[\u6aa2\u67e5 CPU \u662f\u5426\u7a7a\u9592]\n    AA --&gt;|\u5426| B{SMT \u7cfb\u7d71?}\n\n    AB --&gt;|\u7a7a\u9592| AC[\u4f7f\u7528\u5148\u524d\u7684 CPU]\n    AB --&gt;|\u975e\u7a7a\u9592| AD[\u8fd4\u56de EBUSY \u5931\u6557]\n\n    B --&gt;|\u662f| C{\u5148\u524d CPU \u7684\u6838\u5fc3\u5b8c\u5168\u7a7a\u9592?}\n    B --&gt;|\u5426| G{\u5148\u524d CPU \u7a7a\u9592?}\n\n    C --&gt;|\u662f| D[\u4f7f\u7528\u5148\u524d\u7684 CPU]\n    C --&gt;|\u5426| E{L2 \u5feb\u53d6\u4e2d\u6709\u5b8c\u5168\u7a7a\u9592\u7684 CPU?}\n\n    E --&gt;|\u662f| F[\u4f7f\u7528\u76f8\u540c L2 \u5feb\u53d6\u4e2d\u7684 CPU]\n    E --&gt;|\u5426| H{L3 \u5feb\u53d6\u4e2d\u6709\u5b8c\u5168\u7a7a\u9592\u7684 CPU?}\n\n    H --&gt;|\u662f| I[\u4f7f\u7528\u76f8\u540c L3 \u5feb\u53d6\u4e2d\u7684 CPU]\n    H --&gt;|\u5426| J{\u6709\u4efb\u4f55\u5b8c\u5168\u7a7a\u9592\u7684\u6838\u5fc3?}\n\n    J --&gt;|\u662f| K[\u4f7f\u7528\u4efb\u4f55\u5b8c\u5168\u7a7a\u9592\u7684\u6838\u5fc3]\n    J --&gt;|\u5426| G\n\n    G --&gt;|\u662f| L[\u4f7f\u7528\u5148\u524d\u7684 CPU]\n    G --&gt;|\u5426| M{L2 \u5feb\u53d6\u4e2d\u6709\u4efb\u4f55\u7a7a\u9592\u7684 CPU?}\n\n    M --&gt;|\u662f| N[\u4f7f\u7528\u76f8\u540c L2 \u5feb\u53d6\u4e2d\u7684 CPU]\n    M --&gt;|\u5426| O{L3 \u5feb\u53d6\u4e2d\u6709\u4efb\u4f55\u7a7a\u9592\u7684 CPU?}\n\n    O --&gt;|\u662f| P[\u4f7f\u7528\u76f8\u540c L3 \u5feb\u53d6\u4e2d\u7684 CPU]\n    O --&gt;|\u5426| Q{\u6709\u4efb\u4f55\u7a7a\u9592\u7684 CPU?}\n\n    Q --&gt;|\u662f| R[\u4f7f\u7528\u4efb\u4f55\u7a7a\u9592\u7684 CPU]\n    Q --&gt;|\u5426| S[\u8fd4\u56de EBUSY]\n</code></pre>"},{"location":"zh/how-it-works/#api","title":"API \u548c\u6392\u7a0b\u7b56\u7565\u8a2d\u8a08","text":"<p>Gthulhu \u5be6\u73fe\u4e86\u4e00\u500b\u9748\u6d3b\u7684\u6a5f\u5236\uff0c\u901a\u904e RESTful API \u4ecb\u9762\u52d5\u614b\u8abf\u6574\u5176\u6392\u7a0b\u884c\u70ba\u3002\u9019\u4f7f\u904b\u71df\u8005\u80fd\u5920\u5728\u4e0d\u91cd\u555f\u6216\u91cd\u65b0\u7de8\u8b6f\u4ee3\u78bc\u7684\u60c5\u6cc1\u4e0b\u5fae\u8abf\u6392\u7a0b\u5668\u7684\u6027\u80fd\u7279\u6027\u3002</p>"},{"location":"zh/how-it-works/#api_1","title":"API \u67b6\u69cb","text":"<p>API \u670d\u52d9\u5668\u63d0\u4f9b\u7528\u65bc\u7372\u53d6\u548c\u8a2d\u7f6e\u6392\u7a0b\u7b56\u7565\u7684\u7aef\u9ede\uff1a</p> <pre><code>graph TB\n    A[Gthulhu \u6392\u7a0b\u5668] --&gt;|\u5b9a\u671f\u8acb\u6c42| B[API \u670d\u52d9\u5668]\n    C[\u904b\u71df\u8005/\u7ba1\u7406\u54e1] --&gt;|\u914d\u7f6e\u7b56\u7565| B\n    B --&gt;|\u8fd4\u56de\u7b56\u7565| A\n    A --&gt;|\u61c9\u7528\u7b56\u7565| D[\u4efb\u52d9\u6392\u7a0b]\n\n    subgraph \"\u5916\u90e8\u7ba1\u7406\"\n        C\n    end\n\n    subgraph \"\u6392\u7a0b\u7cfb\u7d71\"\n        A\n        D\n    end\n</code></pre>"},{"location":"zh/how-it-works/#api_2","title":"API \u7aef\u9ede","text":"<p>API \u670d\u52d9\u5668\u516c\u958b\u4e86\u5169\u500b\u4e3b\u8981\u7aef\u9ede\u7528\u65bc\u6392\u7a0b\u7b56\u7565\u7ba1\u7406\uff1a</p> <ul> <li>GET /api/v1/scheduling/strategies: \u7372\u53d6\u7576\u524d\u6392\u7a0b\u7b56\u7565</li> <li>POST /api/v1/scheduling/strategies: \u8a2d\u7f6e\u65b0\u7684\u6392\u7a0b\u7b56\u7565</li> </ul>"},{"location":"zh/how-it-works/#_4","title":"\u6392\u7a0b\u7b56\u7565\u6578\u64da\u6a21\u578b","text":"<p>\u6392\u7a0b\u7b56\u7565\u4f7f\u7528\u4ee5\u4e0b\u7d50\u69cb\u8868\u793a\uff1a</p> <pre><code>{\n  \"scheduling\": [\n    {\n      \"priority\": true,\n      \"execution_time\": 20000000,\n      \"pid\": 12345\n    },\n    {\n      \"priority\": false,\n      \"execution_time\": 10000000,\n      \"selectors\": [\n        {\n          \"key\": \"tier\",\n          \"value\": \"control-plane\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>\u6392\u7a0b\u7b56\u7565\u7684\u95dc\u9375\u7d44\u4ef6\uff1a</p> <ol> <li>\u512a\u5148\u7d1a (<code>boolean</code>): \u7576\u70ba true \u6642\uff0c\u4efb\u52d9\u7684\u865b\u64ec\u57f7\u884c\u6642\u9593\u8a2d\u7f6e\u70ba\u6700\u5c0f\u503c\uff0c\u6709\u6548\u5730\u8ce6\u4e88\u5176\u6700\u9ad8\u6392\u7a0b\u512a\u5148\u7d1a</li> <li>\u57f7\u884c\u6642\u9593 (<code>uint64</code>): \u4efb\u52d9\u7684\u81ea\u5b9a\u7fa9\u6642\u9593\u7247\uff08\u4ee5\u7d0d\u79d2\u70ba\u55ae\u4f4d\uff09</li> <li>PID (<code>int</code>): \u7b56\u7565\u9069\u7528\u7684\u9032\u7a0b ID</li> <li>\u9078\u64c7\u5668 (<code>array</code>): \u53ef\u9078\u7684 Kubernetes \u6a19\u7c64\u9078\u64c7\u5668\uff0c\u7528\u65bc\u5b9a\u4f4d\u9032\u7a0b\u7d44</li> </ol>"},{"location":"zh/how-it-works/#_5","title":"\u7b56\u7565\u61c9\u7528\u6d41\u7a0b","text":"<p>\u7372\u53d6\u548c\u61c9\u7528\u6392\u7a0b\u7b56\u7565\u7684\u904e\u7a0b\u9075\u5faa\u4ee5\u4e0b\u9806\u5e8f\uff1a</p> <pre><code>sequenceDiagram\n    participant S as \u6392\u7a0b\u5668\n    participant A as API \u670d\u52d9\u5668\n    participant T as \u4efb\u52d9\u6c60\n\n    S-&gt;&gt;S: \u521d\u59cb\u5316\u6392\u7a0b\u5668\n    S-&gt;&gt;S: \u555f\u52d5\u7b56\u7565\u7372\u53d6\u5668\n\n    loop \u6bcf\u9694 interval \u79d2\n        S-&gt;&gt;A: \u8acb\u6c42\u7576\u524d\u7b56\u7565\n        A-&gt;&gt;S: \u8fd4\u56de\u7b56\u7565\u5217\u8868\n        S-&gt;&gt;S: \u66f4\u65b0\u7b56\u7565\u6620\u5c04\n    end\n\n    Note over S,T: \u4efb\u52d9\u6392\u7a0b\u671f\u9593\n    T-&gt;&gt;S: \u4efb\u52d9\u9700\u8981\u6392\u7a0b\n    S-&gt;&gt;S: \u6aa2\u67e5\u4efb\u52d9\u662f\u5426\u6709\u81ea\u5b9a\u7fa9\u7b56\u7565\n    S-&gt;&gt;S: \u5982\u9700\u8981\u5247\u61c9\u7528\u512a\u5148\u7d1a\u8a2d\u7f6e\n    S-&gt;&gt;S: \u5982\u6307\u5b9a\u5247\u61c9\u7528\u81ea\u5b9a\u7fa9\u57f7\u884c\u6642\u9593\n    S-&gt;&gt;T: \u6839\u64da\u61c9\u7528\u7684\u7b56\u7565\u6392\u7a0b\u4efb\u52d9\n</code></pre>"},{"location":"zh/how-it-works/#kubernetes","title":"Kubernetes \u96c6\u6210","text":"<p>\u5c0d\u65bc\u5bb9\u5668\u5316\u74b0\u5883\uff0cGthulhu \u53ef\u4ee5\u4f7f\u7528\u6a19\u7c64\u9078\u64c7\u5668\u5c07\u6392\u7a0b\u7b56\u7565\u6620\u5c04\u5230\u7279\u5b9a\u7684 pod\uff1a</p> <ol> <li>\u6a19\u7c64\u9078\u64c7\u5668\u89e3\u6790: API \u670d\u52d9\u5668\u901a\u904e\u6383\u63cf\u7cfb\u7d71\u4e2d\u5339\u914d\u7684 pod \u5c07\u6a19\u7c64\u9078\u64c7\u5668\u8f49\u63db\u70ba\u7279\u5b9a\u7684 PID</li> <li>PID \u6620\u5c04: \u8b58\u5225\u6bcf\u500b pod \u7684\u9032\u7a0b\u4e26\u5c07\u5176\u8207\u9069\u7576\u7684\u6392\u7a0b\u7b56\u7565\u76f8\u95dc\u806f</li> <li>\u52d5\u614b\u66f4\u65b0: \u96a8\u8457 pod \u7684\u5275\u5efa\u3001\u92b7\u6bc0\u6216\u79fb\u52d5\uff0c\u6392\u7a0b\u5668\u901a\u904e\u5b9a\u671f\u5237\u65b0\u5176\u7b56\u7565\u4f86\u9069\u61c9\u8b8a\u5316</li> </ol>"},{"location":"zh/how-it-works/#_6","title":"\u7b56\u7565\u512a\u5148\u7d1a\u908f\u8f2f","text":"<p>\u61c9\u7528\u6392\u7a0b\u7b56\u7565\u6642\uff0cGthulhu \u9075\u5faa\u4ee5\u4e0b\u898f\u5247\uff1a</p> <ol> <li>\u76f4\u63a5 PID \u5339\u914d: \u660e\u78ba\u6307\u5b9a PID \u7684\u7b56\u7565\u5177\u6709\u6700\u9ad8\u512a\u5148\u7d1a</li> <li>\u6a19\u7c64\u9078\u64c7\u5668\u5339\u914d: \u4f7f\u7528\u6a19\u7c64\u9078\u64c7\u5668\u7684\u7b56\u7565\u9069\u7528\u65bc\u6240\u6709\u5339\u914d\u7684\u9032\u7a0b</li> <li>\u9ed8\u8a8d\u884c\u70ba: \u6c92\u6709\u7279\u5b9a\u7b56\u7565\u7684\u9032\u7a0b\u4f7f\u7528\u6a19\u6e96\u6392\u7a0b\u6f14\u7b97\u6cd5</li> </ol>"},{"location":"zh/how-it-works/#_7","title":"\u914d\u7f6e\u53c3\u6578","text":"<p>\u7b56\u7565\u7372\u53d6\u884c\u70ba\u53ef\u4ee5\u901a\u904e\u6392\u7a0b\u5668\u7684\u914d\u7f6e\u6587\u4ef6\u9032\u884c\u914d\u7f6e\uff1a</p> <pre><code>api:\n  url: \"http://api-server:8080\"   # API \u670d\u52d9\u5668\u7aef\u9ede\n  interval: 10                    # \u5237\u65b0\u9593\u9694\uff08\u79d2\uff09\n</code></pre> <p>\u9019\u7a2e\u67b6\u69cb\u5141\u8a31\u5728\u4e0d\u4e2d\u65b7\u6392\u7a0b\u5668\u64cd\u4f5c\u7684\u60c5\u6cc1\u4e0b\u5c0d\u6392\u7a0b\u884c\u70ba\u9032\u884c\u52d5\u614b\u3001\u7d30\u7c92\u5ea6\u7684\u63a7\u5236\u3002</p>"},{"location":"zh/how-it-works/#bpf","title":"BPF \u548c\u7528\u6236\u7a7a\u9593\u901a\u4fe1","text":""},{"location":"zh/how-it-works/#_8","title":"\u901a\u4fe1\u6a5f\u5236","text":"<pre><code>sequenceDiagram\n    participant K as BPF (\u6838\u5fc3\u7a7a\u9593)\n    participant U as Go (\u7528\u6236\u7a7a\u9593)\n\n    K-&gt;&gt;U: \u4efb\u52d9\u5275\u5efa\u4e8b\u4ef6\n    U-&gt;&gt;U: \u5206\u6790\u4efb\u52d9\u7279\u6027\n    U-&gt;&gt;K: \u8a2d\u7f6e\u6392\u7a0b\u53c3\u6578\n    K-&gt;&gt;K: \u61c9\u7528\u6392\u7a0b\u6c7a\u7b56\n    K-&gt;&gt;U: \u7d71\u8a08\u66f4\u65b0\n    U-&gt;&gt;U: \u52d5\u614b\u7b56\u7565\u8abf\u6574\n</code></pre>"},{"location":"zh/how-it-works/#_9","title":"\u8abf\u8a66\u548c\u76e3\u63a7","text":""},{"location":"zh/how-it-works/#bpf_1","title":"BPF \u8ffd\u8e2a","text":"<pre><code># \u76e3\u63a7 BPF \u7a0b\u5f0f\u57f7\u884c\nsudo cat /sys/kernel/debug/tracing/trace_pipe\n\n# \u6aa2\u67e5 BPF \u7d71\u8a08\u6578\u64da\nsudo bpftool prog show\nsudo bpftool map dump name task_info_map\n</code></pre>"},{"location":"zh/how-it-works/#cfs","title":"\u8207 CFS \u7684\u5dee\u7570","text":"\u529f\u80fd CFS (\u5b8c\u5168\u516c\u5e73\u6392\u7a0b\u5668) Gthulhu \u6392\u7a0b\u7b56\u7565 \u57fa\u65bc\u865b\u64ec\u57f7\u884c\u6642\u9593 \u865b\u64ec\u57f7\u884c\u6642\u9593 + \u5ef6\u9072\u512a\u5316 \u4efb\u52d9\u5206\u985e \u7d71\u4e00\u8655\u7406 \u81ea\u52d5\u5206\u985e\u512a\u5316 CPU \u9078\u64c7 \u57fa\u672c\u8ca0\u8f09\u5e73\u8861 \u62d3\u64b2\u611f\u77e5 + \u5feb\u53d6\u89aa\u548c\u6027 \u52d5\u614b\u8abf\u6574 \u6709\u9650 \u5168\u9762\u81ea\u9069\u61c9\u8abf\u6574 \u53ef\u64f4\u5c55\u6027 \u6838\u5fc3\u5167\u5efa \u7528\u6236\u7a7a\u9593\u53ef\u64f4\u5c55"},{"location":"zh/how-it-works/#_10","title":"\u672a\u4f86\u767c\u5c55\u65b9\u5411","text":"<ol> <li>\u6a5f\u5668\u5b78\u7fd2\u96c6\u6210: \u4f7f\u7528 ML \u6a21\u578b\u9810\u6e2c\u4efb\u52d9\u884c\u70ba</li> <li>\u5bb9\u5668\u611f\u77e5\u6392\u7a0b: \u91dd\u5c0d\u5bb9\u5668\u5316\u74b0\u5883\u7684\u512a\u5316</li> <li>\u80fd\u6e90\u512a\u5316: \u96c6\u6210\u96fb\u6e90\u7ba1\u7406\u8003\u91cf</li> <li>\u5be6\u6642\u4efb\u52d9\u652f\u6301: \u652f\u6301\u786c\u5be6\u6642\u4efb\u52d9\u6392\u7a0b</li> </ol> <p>\u6df1\u5165\u4e86\u89e3</p> <p>\u6709\u95dc\u66f4\u591a\u5be6\u73fe\u7d30\u7bc0\uff0c\u8acb\u53c3\u95b1 API \u53c3\u8003 \u548c\u6e90\u4ee3\u78bc\u8a3b\u91cb\u3002</p>"},{"location":"zh/installation/","title":"\u5b89\u88dd\u6307\u5357","text":"<p>\u672c\u6307\u5357\u5c07\u5354\u52a9\u60a8\u5b8c\u6210 Gthulhu \u548c Qumun \u7684\u5b89\u88dd\u8207\u8a2d\u5b9a\u3002</p>"},{"location":"zh/installation/#_2","title":"\u7cfb\u7d71\u9700\u6c42","text":""},{"location":"zh/installation/#_3","title":"\u786c\u9ad4\u9700\u6c42","text":"<ul> <li>CPU: x86_64 \u67b6\u69cb\u8655\u7406\u5668</li> <li>\u8a18\u61b6\u9ad4: \u81f3\u5c11 4GB RAM</li> <li>\u5132\u5b58\u7a7a\u9593: \u81f3\u5c11 10GB \u53ef\u7528\u7a7a\u9593</li> </ul>"},{"location":"zh/installation/#_4","title":"\u8edf\u9ad4\u9700\u6c42","text":"<p>\u6838\u5fc3\u7248\u672c\u9700\u6c42</p> <p>Linux \u6838\u5fc3 6.12+ \u4e14\u652f\u63f4 sched_ext \u662f\u5fc5\u8981\u689d\u4ef6\u3002\u8acb\u78ba\u8a8d\u60a8\u7684\u6838\u5fc3\u7248\u672c\u7b26\u5408\u9700\u6c42\u3002</p>"},{"location":"zh/installation/#_5","title":"\u5fc5\u8981\u5957\u4ef6","text":"\u5957\u4ef6 \u7248\u672c\u9700\u6c42 \u7528\u9014 Go 1.22+ \u4f7f\u7528\u8005\u7a7a\u9593\u8abf\u5ea6\u5668\u958b\u767c LLVM/Clang 17+ BPF \u7a0b\u5f0f\u7de8\u8b6f libbpf \u6700\u65b0\u7248\u672c BPF \u7a0b\u5f0f\u5eab make - \u5efa\u7f6e\u5de5\u5177 git - \u7248\u672c\u63a7\u5236"},{"location":"zh/installation/#_6","title":"\u6aa2\u67e5\u6838\u5fc3\u652f\u63f4","text":"<pre><code># \u6aa2\u67e5\u6838\u5fc3\u7248\u672c\nuname -r\n\n# \u6aa2\u67e5 sched_ext \u652f\u63f4\ngrep -r \"CONFIG_SCHED_CLASS_EXT\" /boot/config-$(uname -r) || \\\ncat /proc/config.gz | gunzip | grep \"CONFIG_SCHED_CLASS_EXT\"\n\n# \u6aa2\u67e5 BPF \u652f\u63f4\ngrep -r \"CONFIG_BPF\" /boot/config-$(uname -r) | head -5\n</code></pre>"},{"location":"zh/installation/#ubuntu-2504-gthulhu","title":"\u5728 Ubuntu 25.04 \u4e0a\u5b89\u88dd Gthulhu","text":"<p>\u200b \u70ba\u4e86\u7bc0\u7701\u5404\u4f4d\u7684\u6642\u9593\uff0c\u6211\u5011\u76f4\u63a5\u8df3\u904e\u7de8\u8b6f kernel \u8207\u5b89\u88dd kernel \u7684\u904e\u7a0b\uff0c\u4f7f\u7528\u76f4\u63a5\u652f\u63f4 sched_ext \u7684 Ubuntu 25.04 \u3002 \u200b \u8b80\u8005\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4ee5\u4e0b\u8173\u672c\u5b89\u88dd\u5fc5\u8981\u7684\u5957\u4ef6\uff1a</p> <pre><code>sudo apt-get update\nsudo apt-get install --yes bsdutils\nsudo apt-get install --yes build-essential\nsudo apt-get install --yes pkgconf\nsudo apt-get install --yes llvm-17 clang-17 clang-format-17\nsudo apt-get install --yes libbpf-dev libelf-dev libzstd-dev zlib1g-dev\nsudo apt-get install --yes virtme-ng\nsudo apt-get install --yes gcc-multilib\nsudo apt-get install --yes systemtap-sdt-dev\nsudo apt-get install --yes python3 python3-pip ninja-build\nsudo apt-get install --yes libseccomp-dev protobuf-compiler\nsudo apt-get install --yes meson cmake\nfor tool in \"clang\" \"clang-format\" \"llc\" \"llvm-strip\"\ndo\n  sudo rm -f /usr/bin/$tool\n  sudo ln -s /usr/bin/$tool-17 /usr/bin/$tool\ndone\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env\n</code></pre> <p>\u9019\u4e9b\u5957\u4ef6\u5305\u542b\u4e86\u6240\u6709\u7de8\u8b6f scx \u7684\u5fc5\u8981\u5957\u4ef6\u3002 \u200b \u5728\u7de8\u8b6f Gthulhu \u4e4b\u524d\uff0c\u6211\u5011\u9084\u9700\u8981\u5b89\u88dd golang\uff1a</p> <p><pre><code>wget https://go.dev/dl/go1.24.2.linux-amd64.tar.gz\nsudo tar -C /usr/local -xzf go1.24.2.linux-amd64.tar.gz\n</code></pre> \u200b \u65b0\u589e\u4ee5\u4e0b\u5167\u5bb9\u81f3 <code>~/.profile</code>\uff1a</p> <p><pre><code>export GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$GOROOT/bin:$GOPATH/bin:$PATH\n</code></pre> \u200b \u65b0\u589e\u5f8c\uff0c\u8a18\u5f97\u4f7f\u7528 <code>source ~/.profile</code> \u8b93\u8b8a\u66f4\u7684\u5167\u5bb9\u751f\u6548\u3002 \u200b \u5b89\u88dd\u5b8c\u5fc5\u8981\u5957\u4ef6\u5f8c\uff0c\u5b89\u88dd Gthulhu\uff1a</p> <p><pre><code>git clone https://github.com/Gthulhu/Gthulhu.git\ncd Gthulhu\nmake dep\ngit submodule init\ngit submodule sync\ngit submodule update\ncd scx\nmeson setup build --prefix ~\nmeson compile -C build\ncd ..\ncd libbpfgo\nmake\ncd ..\nmake\n</code></pre> \u200b \u7de8\u8b6f\u5b8c\u6210\u5f8c\uff0cGthulhu \u7406\u61c9\u80fd\u9806\u5229\u57f7\u884c\u5728\u4f60\u7684\u7cfb\u7d71\u4e0a\uff1a \u200b  \u200b \u6211\u5011\u53ef\u4ee5\u89c0\u5bdf Gthulhu \u7684\u8f38\u51fa\u5f97\u77e5\u76ee\u524d\u5df2\u6709\u591a\u5c11\u4efb\u52d9\u662f\u900f\u904e Gthulhu \u9032\u884c\u8abf\u5ea6\u7684\u3002</p>"},{"location":"zh/installation/#_7","title":"\u5e38\u898b\u554f\u984c\u6392\u89e3","text":""},{"location":"zh/installation/#undefined-reference-to-eu_search_tree_init","title":"\u554f\u984c\u4e00\uff1a<code>undefined reference to eu_search_tree_init</code>","text":"<p>\u200b \u5982\u679c\u4f60\u9047\u5230\u4e86\u985e\u4f3c\u7684\u554f\u984c\uff0c\u662f\u56e0\u70ba\u76ee\u524d\u7cfb\u7d71\u4f7f\u7528\u7684\u662f elfutils \u7248\u7684 libelf\uff0c\u4f60\u53ef\u4ee5\u81ea\u884c\u4e0b\u8f09\u8207\u7de8\u8b6f libelf \u4f86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff1a <pre><code>sudo apt remove --purge elfutils libelf-dev\ncd ~\ngit clone https://github.com/arachsys/libelf.git\ncd libelf\nmake\nsudo make install\n</code></pre> \u200b</p>"},{"location":"zh/installation/#error-program-clang-not-found-or-not-executable","title":"\u554f\u984c\u4e8c\uff1a<code>ERROR: Program 'clang' not found or not executable</code>","text":"<p>\u200b \u5982\u679c\u4f60\u5728\u57f7\u884c <code>meson setup build --prefix ~</code> \u547d\u4ee4\u6642\u9047\u5230\u8a72\u554f\u984c\uff0c\u53ef\u4ee5\u5617\u8a66\u4ee5\u4e0b\u547d\u4ee4\uff1a <pre><code>sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-17 100\nsudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-17 100\n</code></pre></p>"},{"location":"zh/installation/#_8","title":"\u4e0b\u4e00\u6b65","text":"<p>\u5b89\u88dd\u5b8c\u6210\u5f8c\uff0c\u60a8\u53ef\u4ee5\uff1a</p> <ul> <li>\ud83d\udcd6 \u95b1\u8b80 \u5de5\u4f5c\u539f\u7406 \u4e86\u89e3\u8abf\u5ea6\u5668\u904b\u4f5c\u6a5f\u5236</li> <li>\ud83c\udfaf \u67e5\u770b \u5c08\u6848\u76ee\u6a19 \u4e86\u89e3\u8a2d\u8a08\u7406\u5ff5</li> <li>\ud83d\udd27 \u53c3\u8003 API \u6587\u6a94 \u9032\u884c\u5ba2\u88fd\u5316\u958b\u767c</li> </ul> <p>\u5b89\u88dd\u5b8c\u6210</p> <p>\u606d\u559c\uff01\u60a8\u5df2\u6210\u529f\u5b89\u88dd Gthulhu \u8abf\u5ea6\u5668\u3002\u5982\u679c\u9047\u5230\u4efb\u4f55\u554f\u984c\uff0c\u8acb\u67e5\u770b \u5e38\u898b\u554f\u984c \u6216\u5728 GitHub \u63d0\u4ea4 Issue\u3002</p>"},{"location":"zh/k8s/","title":"\u4f7f\u7528 Kubernetes \u90e8\u7f72 Gthulhu","text":"<p>\u672c\u7bc7\u6587\u4ef6\u4ecb\u7d39\u5982\u4f55\u5728 Kubernetes \u74b0\u5883\u4e2d\u90e8\u7f72 Gthulhu \u6392\u7a0b\u5668\u4ee5\u53ca API server\u3002</p>"},{"location":"zh/k8s/#_1","title":"\u524d\u63d0\u689d\u4ef6","text":"<ul> <li>\u5b8c\u6210 Microk8s \u7684\u5b89\u88dd\u8207\u8a2d\u5b9a\uff0c\u4e26\u78ba\u4fdd <code>kubectl</code> \u53ef\u6b63\u5e38\u4f7f\u7528\u3002</li> <li>\u555f\u7528 Microk8s \u5167\u5efa\u7684 container registry\uff0c\u8a73\u60c5\u8acb\u53c3\u8003\uff1aHow to use the built-in registry\u3002</li> <li>\u4f7f\u7528 <code>microk8s enable rbac</code> \u555f\u7528 Microk8s \u7684 RBAC \u529f\u80fd</li> </ul>"},{"location":"zh/k8s/#gthulhu-docker","title":"\u5efa\u7acb Gthulhu Docker \u6620\u50cf\u6a94","text":"<p>\u9996\u5148\uff0c\u53d6\u5f97 Gthluhu \u5c08\u6848\u7684\u539f\u59cb\u7a0b\u5f0f\u78bc\uff1a <pre><code>$ git clone --recursive https://github.com/Gthulhu/Gthulhu.git\n</code></pre></p> <p>\u63a5\u8457\uff0c\u53c3\u8003 Gthulhu \u5b89\u88dd\u6587\u4ef6 \u5b8c\u6210 Gthulhu \u7684\u7de8\u8b6f\u3002 \u5b8c\u6210\u5f8c\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7de8\u8b6f\u4e26\u63a8\u9001 Docker \u6620\u50cf\u6a94\u5230\u672c\u5730\u7684 Microk8s registry\uff1a</p> <pre><code>$ make image\n$ cd api\n$ make image\n$ cd ..\n$ docker push 127.0.0.1:32000/gthulhu-api:latest\n$ docker push 127.0.0.1:32000/gthulhu:latest\n</code></pre>"},{"location":"zh/k8s/#gthulhu-kubernetes","title":"\u90e8\u7f72 Gthulhu \u5230 Kubernetes","text":"<p>\u63a5\u4e0b\u4f86\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5c07 Gthulhu \u90e8\u7f72\u5230 Kubernetes \u53e2\u96c6\uff1a</p> <pre><code>$ cd chart\n$ helm install gthulhu gthulhu\n</code></pre> <p>\u82e5\u6c92\u6709\u51fa\u73fe\u4efb\u4f55\u932f\u8aa4\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7406\u61c9\u53ef\u4ee5\u770b\u5230 Gthulhu \u7684 Pod \u5df2\u6210\u529f\u555f\u52d5\uff1a</p> <pre><code>$ kubectl get po | grep gthulhu\ngthulhu-api-72ts9                              1/1     Running   0              9s\ngthulhu-scheduler-lph8h                        1/1     Running   0              9s\n</code></pre> <p>\u67e5\u770b scheduler \u7684\u65e5\u8a8c\uff0c\u78ba\u8a8d\u5176\u904b\u4f5c\u6b63\u5e38\uff1a</p> <pre><code>$ kubectl logs gthulhu-scheduler-lph8h\n2025/09/22 13:15:09 Scheduler config: SLICE_NS_DEFAULT=5000000, SLICE_NS_MIN=500000\n2025/09/22 13:15:09 Debug mode enabled\n2025/09/22 13:15:09 Early processing disabled\nlibbpf: struct_ops goland: member priv not found in kernel, skipping it as it's set to zero\nmap: cpu_ctx_stor, type: BPF_MAP_TYPE_PERCPU_ARRAY, fd: 3\nmap: task_ctx_stor, type: BPF_MAP_TYPE_TASK_STORAGE, fd: 7\nmap: queued, type: BPF_MAP_TYPE_RINGBUF, fd: 8\nmap: dispatched, type: BPF_MAP_TYPE_USER_RINGBUF, fd: 9\nmap: priority_tasks, type: BPF_MAP_TYPE_HASH, fd: 10\nmap: running_task, type: BPF_MAP_TYPE_HASH, fd: 11\nmap: usersched_timer, type: BPF_MAP_TYPE_ARRAY, fd: 12\nmap: main_bpf.rodata, type: BPF_MAP_TYPE_ARRAY, fd: 13\nmap: .data.uei_dump, type: BPF_MAP_TYPE_ARRAY, fd: 14\nmap: main_bpf.data, type: BPF_MAP_TYPE_ARRAY, fd: 15\nmap: main_bpf.bss, type: BPF_MAP_TYPE_ARRAY, fd: 16\nmap: goland, type: BPF_MAP_TYPE_STRUCT_OPS, fd: 17\n2025/09/22 13:15:09 Topology: map[L2:map[0-1:[0 1] 10-11:[10 11] 12-13:[12 13] 14-15:[14 15] 16-19:[16 17 18 19] 2-3:[2 3] 4-5:[4 5] 6-7:[6 7] 8-9:[8 9]] L3:map[0-19:[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]]]\n2025/09/22 13:15:09 UserSched's Pid: 2716543\n2025/09/22 13:15:09 API config: URL=http://gthulhu-api:80/api/v1/scheduling/strategies, Interval=5 seconds\n2025/09/22 13:15:09 Started scheduling strategy fetcher with JWT authentication, interval 5 seconds\n2025/09/22 13:15:09 scheduler started\n2025/09/22 13:15:09 Failed to fetch initial scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:14 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:19 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:19 bss data: {\"usersched_last_run_at\":3212826452599740,\"nr_queued\":0,\"nr_scheduled\":0,\"nr_running\":1,\"nr_online_cpus\":20,\"nr_user_dispatches\":90846,\"nr_kernel_dispatches\":5,\"nr_cancel_dispatches\":0,\"nr_bounce_dispatches\":0,\"nr_failed_dispatches\":0,\"nr_sched_congested\":0}\n2025/09/22 13:15:19 Failed to send metrics: failed to send metrics request: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:24 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:29 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:29 bss data: {\"usersched_last_run_at\":3212826452599740,\"nr_queued\":1,\"nr_scheduled\":0,\"nr_running\":2,\"nr_online_cpus\":20,\"nr_user_dispatches\":174142,\"nr_kernel_dispatches\":9,\"nr_cancel_dispatches\":0,\"nr_bounce_dispatches\":0,\"nr_failed_dispatches\":0,\"nr_sched_congested\":0}\n2025/09/22 13:15:29 Failed to send metrics: failed to send metrics request: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:34 Failed to fetch scheduling strategies: failed to obtain JWT token: failed to send token request: Post \"http://gthulhu-api:80/api/v1/auth/token\": dial tcp 10.152.183.54:80: connect: connection refused\n2025/09/22 13:15:39 bss data: {\"usersched_last_run_at\":3212826452599740,\"nr_queued\":0,\"nr_scheduled\":0,\"nr_running\":2,\"nr_online_cpus\":20,\"nr_user_dispatches\":263151,\"nr_kernel_dispatches\":11,\"nr_cancel_dispatches\":0,\"nr_bounce_dispatches\":0,\"nr_failed_dispatches\":0,\"nr_sched_congested\":0}\n2025/09/22 13:15:39 Successfully sent metrics to API server\n2025/09/22 13:15:45 Scheduling strategies updated: 4 strategies\n2025/09/22 13:15:45 Updated strategy map with 4 strategies\n2025/09/22 13:15:45 Scheduling strategies updated: 4 strategies\n2025/09/22 13:15:45 Updated strategy map with 4 strategies\n2025/09/22 13:15:49 bss data: {\"usersched_last_run_at\":3212826452599740,\"nr_queued\":0,\"nr_scheduled\":0,\"nr_running\":9,\"nr_online_cpus\":20,\"nr_user_dispatches\":367610,\"nr_kernel_dispatches\":15,\"nr_cancel_dispatches\":0,\"nr_bounce_dispatches\":0,\"nr_failed_dispatches\":0,\"nr_sched_congested\":0}\n2025/09/22 13:15:49 Successfully sent metrics to API server\n2025/09/22 13:15:49 Scheduling strategies updated: 4 strategies\n</code></pre> <p>\u82e5\u80fd\u5920\u770b\u5230\u985e\u4f3c\u4e0a\u8ff0\u7684\u65e5\u8a8c\uff0c\u8868\u793a Gthulhu \u5df2\u6210\u529f\u904b\u884c\u65bc Kubernetes \u53e2\u96c6\u4e4b\u4e2d\u3002</p> <p>\u6df1\u5165\u4e86\u89e3</p> <p>Gthulhu \u63d0\u4f9b\u7684 helm chart \u7686\u4f7f\u7528 DaemonSet \u4f5c\u70ba pod generator\uff0c\u4ee5\u6b64\u78ba\u4fdd\u6bcf\u500b\u7bc0\u9ede\u7686\u6703\u904b\u884c\u4e00\u500b Gthulhu \u6392\u7a0b\u5668\u670d\u52d9\u3002</p>"},{"location":"zh/mentioned/","title":"@ \u4efb\u4f55\u63d0\u53ca","text":"<p>\u672c\u9801\u9762\u6536\u96c6\u4e86\u5404\u7a2e\u5a92\u9ad4\u3001\u90e8\u843d\u683c\u548c\u7db2\u7ad9\u4e2d\u63d0\u53ca Gthulhu \u548c Qumun \u5c08\u6848\u7684\u6587\u7ae0\u548c\u5831\u5c0e\u3002</p>"},{"location":"zh/mentioned/#_2","title":"\u6703\u8b70\u6f14\u8b1b","text":""},{"location":"zh/mentioned/#coscup-2025-golang-linux-scheduler","title":"COSCUP 2025\uff1a\u4f7f\u7528 Golang \u958b\u767c Linux Scheduler\uff01","text":"<p>\u767c\u5e03\u65e5\u671f: 2025\u5e74 \u4f5c\u8005: Ian Chen\uff08Gthulhu \u5275\u59cb\u4eba\uff09 \u5e73\u53f0: COSCUP Official Website \u9023\u7d50: COSCUP 2025</p>"},{"location":"zh/mentioned/#_3","title":"\u65b0\u805e\u5831\u5c0e","text":""},{"location":"zh/mentioned/#jdon","title":"Jdon","text":"<p>\u767c\u5e03\u65e5\u671f: 2025\u5e74 \u4f5c\u8005: banq \u5e73\u53f0: Jdon Blog \u9023\u7d50: www.jdon.com</p>"},{"location":"zh/mentioned/#echo-news-93","title":"Echo News #93","text":"<p>\u767c\u5e03\u65e5\u671f: 2025\u5e74 \u4f5c\u8005: Bill Mulligan \u5e73\u53f0: LinkedIn \u9023\u7d50: Echo News #93</p> <p>Echo News \u7b2c93\u671f\u4e2d\u63d0\u53ca\u4e86 Gthulhu MCP \u5c08\u6848\uff0c\u4ecb\u7d39\u4e86\u6211\u5011\u5728 Linux \u8abf\u5ea6\u5668\u9818\u57df\u7684\u5275\u65b0\u5de5\u4f5c\u3002</p>"},{"location":"zh/mentioned/#echo-news-85","title":"Echo News #85","text":"<p>\u767c\u5e03\u65e5\u671f: 2025\u5e74 \u4f5c\u8005: Bill Mulligan \u5e73\u53f0: LinkedIn \u548c eBPF.io \u5feb\u5831 \u9023\u7d50: Echo News #85 https://ebpf.io/newsletter/</p> <p>Echo News \u7b2c85\u671f\u4e2d\u63d0\u53ca\u4e86 Gthulhu \u5c08\u6848\uff0c\u4ecb\u7d39\u4e86\u6211\u5011\u5728 Linux \u8abf\u5ea6\u5668\u9818\u57df\u7684\u5275\u65b0\u5de5\u4f5c\u3002</p>"},{"location":"zh/mentioned/#_4","title":"\u6280\u8853\u90e8\u843d\u683c","text":""},{"location":"zh/mentioned/#free5gc","title":"free5GC \u5c08\u6848\u90e8\u843d\u683c","text":""},{"location":"zh/mentioned/#hands-on-with-sched_ext-building-custom-ebpf-cpu-schedulers","title":"\u6587\u7ae0\u4e00\uff1aHands-On with sched_ext: Building Custom eBPF CPU Schedulers","text":"<p>\u767c\u5e03\u65e5\u671f: 2025\u5e745\u67089\u65e5 \u5e73\u53f0: free5GC \u5b98\u65b9\u90e8\u843d\u683c \u9023\u7d50: Hands-On with sched_ext: Building Custom eBPF CPU Schedulers</p>"},{"location":"zh/mentioned/#exploring-sched_ext-bpf-powered-cpu-schedulers-in-the-linux-kernel","title":"\u6587\u7ae0\u4e8c\uff1aExploring sched_ext: BPF-Powered CPU Schedulers in the Linux Kernel","text":"<p>\u767c\u5e03\u65e5\u671f: 2025\u5e743\u67085\u65e5 \u5e73\u53f0: free5GC \u5b98\u65b9\u90e8\u843d\u683c \u9023\u7d50: Exploring sched_ext: BPF-Powered CPU Schedulers in the Linux Kernel</p>"},{"location":"zh/mentioned/#improving-network-performance-with-custom-ebpf-based-schedulers","title":"\u6587\u7ae0\u4e09\uff1aImproving Network Performance with Custom eBPF-based Schedulers","text":"<p>\u767c\u5e03\u65e5\u671f: July 25, 2025 \u5e73\u53f0: The free5GC Official Blog \u9023\u7d50: Improving Network Performance with Custom eBPF-based Schedulers</p>"},{"location":"zh/mentioned/#_5","title":"\u793e\u7fa4\u53cd\u994b","text":"<p>\u5206\u4eab\u60a8\u7684\u5167\u5bb9</p> <p>\u5982\u679c\u60a8\u5728\u4efb\u4f55\u5730\u65b9\u770b\u5230\u63d0\u53ca Gthulhu \u5c08\u6848\u7684\u5167\u5bb9\uff0c\u6b61\u8fce\u900f\u904e\u4ee5\u4e0b\u65b9\u5f0f\u8b93\u6211\u5011\u77e5\u9053\uff1a</p> <ul> <li>\u5728 GitHub \u4e0a\u958b\u555f Issue</li> <li>\u767c\u9001\u90f5\u4ef6\u81f3\u5c08\u6848\u7dad\u8b77\u8005</li> <li>\u5728 GitHub Discussions \u4e2d\u5206\u4eab</li> </ul>"},{"location":"zh/mentioned/#_6","title":"\u5f15\u7528\u683c\u5f0f","text":"<p>\u5982\u679c\u60a8\u60f3\u5728\u5b78\u8853\u8ad6\u6587\u3001\u6280\u8853\u6587\u7ae0\u6216\u90e8\u843d\u683c\u4e2d\u5f15\u7528 Gthulhu \u5c08\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f\uff1a</p>"},{"location":"zh/mentioned/#bibtex","title":"BibTeX \u683c\u5f0f","text":"<pre><code>@misc{gthulhu2025,\n  title={Gthulhu: A Cloud-Native Linux Scheduler based on sched\\_ext},\n  author={Gthulhu Development Team},\n  year={2025},\n  url={https://github.com/Gthulhu/Gthulhu},\n  note={\u958b\u6e90 Linux \u8abf\u5ea6\u5668\u5c08\u6848}\n}\n</code></pre>"},{"location":"zh/mentioned/#ieee","title":"IEEE \u683c\u5f0f","text":"<pre><code>Gthulhu Development Team, \"Gthulhu: A Cloud-Native Linux Scheduler based on sched_ext,\" 2025. [Online]. Available: https://github.com/Gthulhu/Gthulhu\n</code></pre>"},{"location":"zh/mentioned/#apa","title":"APA \u683c\u5f0f","text":"<pre><code>Gthulhu Development Team. (2025). Gthulhu: A Cloud-Native Linux Scheduler based on sched_ext. Retrieved from https://github.com/Gthulhu/Gthulhu\n</code></pre>"},{"location":"zh/mentioned/#_7","title":"\u5a92\u9ad4\u8cc7\u6e90","text":"<p>\u5982\u679c\u60a8\u662f\u8a18\u8005\u3001\u90e8\u843d\u683c\u4f5c\u8005\u6216\u5167\u5bb9\u5275\u4f5c\u8005\uff0c\u5e0c\u671b\u5831\u5c0e Gthulhu \u5c08\u6848\uff0c\u6211\u5011\u5f88\u6a02\u610f\u70ba\u60a8\u63d0\u4f9b\uff1a</p> <ul> <li>\ud83d\uddbc\ufe0f \u5c08\u6848\u6a19\u8a8c\u548c\u5716\u7247\u8cc7\u6e90</li> <li>\ud83d\udcca \u6280\u8853\u7c21\u5831\u548c\u8cc7\u6599</li> <li>\ud83c\udfa4 \u5c08\u6848\u5718\u968a\u8a2a\u8ac7\u6a5f\u6703</li> <li>\ud83d\udcdd \u5b98\u65b9\u8072\u660e\u548c\u65b0\u805e\u7a3f</li> </ul> <p>\u8acb\u900f\u904e GitHub Issues \u6216\u9805\u76ee\u7dad\u8b77\u8005\u806f\u7d61\u6211\u5011\u3002</p> <p>\u4fdd\u6301\u66f4\u65b0</p> <p>\u6b64\u9801\u9762\u6703\u5b9a\u671f\u66f4\u65b0\uff0c\u65b0\u589e\u6700\u65b0\u7684\u5a92\u9ad4\u5831\u5c0e\u548c\u793e\u7fa4\u63d0\u53ca\u3002\u60a8\u4e5f\u53ef\u4ee5\u8ffd\u8e64\u6211\u5011\u7684 GitHub \u5c08\u6848 \u7372\u5f97\u6700\u65b0\u6d88\u606f\u3002</p>"},{"location":"zh/project-goals/","title":"\u5c08\u6848\u76ee\u6a19","text":"<p>\u672c\u9801\u9762\u4ecb\u7d39 Gthulhu \u548c Qumun \u5c08\u6848\u7684\u8a2d\u8a08\u7406\u5ff5\u3001\u767c\u5c55\u76ee\u6a19\u8207\u672a\u4f86\u9858\u666f\u3002</p>"},{"location":"zh/project-goals/#_2","title":"\u5c08\u6848\u9858\u666f","text":"<p>\u53d7\u5230 scx_rustland \u7684\u555f\u767c\uff0cIan \u4f7f\u7528 Golang \u91cd\u9020\u4e86\u9019\u6b3e eBPF-based scheduler\uff0c\u4e26\u547d\u540d\u70ba Gthulhu\u3002 Gthulhu \u7684\u76ee\u6a19\u662f\u6210\u70ba\u4e00\u500b\u9748\u6d3b\u4e14\u9ad8\u6548\u7684 CPU \u8abf\u5ea6\u5668\uff0c\u4e00\u822c\u4f7f\u7528\u8005\u80fd\u5920\u85c9\u7531\u914d\u7f6e Configuration \u7684\u65b9\u5f0f\u4f86\u6700\u4f73\u5316\u61c9\u7528\u7a0b\u5f0f\u7684\u5ef6\u9072\u8868\u73fe\u6216\u662f\u541e\u5410\u91cf\u3002\u5c0d\u65bc\u9032\u968e\u958b\u767c\u8005\u4f86\u8aaa\uff0cGthulhu \u63d0\u4f9b plugin \u6a5f\u5236\uff0c\u8b93\u958b\u767c\u8005\u80fd\u5920\u5728 User-Space \u5be6\u4f5c\u81ea\u8a02\u7684\u8abf\u5ea6\u7b56\u7565\uff0c\u4e26\u4e14\u900f\u904e eBPF \u7a0b\u5f0f\u5c07\u6c7a\u7b56\u50b3\u905e\u7d66 Linux Kernel\u3002\u4f7f Linux \u8abf\u5ea6\u5668\u80fd\u5920\u66f4\u597d\u5730\u9069\u61c9\u73fe\u4ee3\u5316\u7684\u5de5\u4f5c\u8ca0\u8f09\u9700\u6c42\u3002</p>"},{"location":"zh/project-goals/#_3","title":"\u958b\u767c\u539f\u5247","text":"<ol> <li>\u4fdd\u6301\u8207 scx \u7684\u540c\u6b65\uff1ascx \u662f Linux Kernel \u4e2d\u7684\u6392\u7a0b\u5668\u64f4\u5c55\u6846\u67b6\uff0cGthulhu \u5c07\u6301\u7e8c\u8ddf\u9032 scx \u7684\u767c\u5c55\uff0c\u78ba\u4fdd\u8207\u6700\u65b0\u7684 Kernel \u7248\u672c\u76f8\u5bb9\u3002\u4e0d\u50c5\u5982\u6b64\uff0cGthulhu \u4e5f\u6703\u5229\u7528\u793e\u7fa4\u7684\u529b\u91cf\uff0c\u8b93\u6392\u7a0b\u5668\u5be6\u4f5c\u80fd\u5920\u66f4\u5bb9\u6613\u5730\u88ab\u5206\u4eab\u8207\u91cd\u7528\u3002</li> <li>\u76e1\u53ef\u80fd\u5bec\u9b06\u7684\u6388\u6b0a\u65b9\u5f0f\uff1aGthulhu \u50c5\u5728\u5fc5\u8981\u7684\u90e8\u5206\u4f7f\u7528 GPL \u6388\u6b0a\uff0c\u5176\u4ed6\u90e8\u5206\u5247\u4f7f\u7528\u66f4\u5bec\u9b06\u7684 Apache \u6388\u6b0a\uff0c\u8b93\u958b\u767c\u8005\u80fd\u5920\u66f4\u81ea\u7531\u5730\u4f7f\u7528\u548c\u4fee\u6539\u7a0b\u5f0f\u78bc\u3002</li> <li>\u6613\u65bc\u64f4\u5c55\u8207\u5ba2\u88fd\u5316\uff1aGthulhu \u7684\u8a2d\u8a08\u8003\u91cf\u5230\u4e0d\u540c\u61c9\u7528\u5834\u666f\u7684\u9700\u6c42\uff0c\u63d0\u4f9b\u591a\u7a2e\u914d\u7f6e\u9078\u9805\u548c plugin \u6a5f\u5236\uff0c\u8b93\u4f7f\u7528\u8005\u80fd\u5920\u6839\u64da\u81ea\u5df1\u7684\u9700\u6c42\u6392\u7a0b\u7b56\u7565\u3002</li> <li>\u96f2\u539f\u751f\u70ba\u5c0e\u5411\uff1aGthulhu \u5c08\u6ce8\u65bc\u652f\u63f4\u96f2\u539f\u751f\u61c9\u7528\u7a0b\u5f0f\uff0c\u7279\u5225\u662f\u5bb9\u5668\u5316\u5de5\u4f5c\u8ca0\u8f09\uff0c\u4e26\u4e14\u8207 Kubernetes \u7b49\u5bb9\u5668\u7de8\u6392\u5e73\u53f0\u7121\u7e2b\u6574\u5408\u3002</li> </ol>"},{"location":"zh/project-goals/#_4","title":"\u76ee\u6a19\u61c9\u7528\u5834\u666f","text":"<ol> <li>\u4f4e\u5ef6\u9072\u61c9\u7528\u7a0b\u5f0f\uff1aGthulhu \u80fd\u5920\u6700\u4f73\u5316\u4f4e\u5ef6\u9072\u61c9\u7528\u7a0b\u5f0f\u7684\u6548\u80fd\uff0c\u4f8b\u5982\u901a\u8a0a\u7cfb\u7d71 [1]\u3001\u904a\u6232\u548c\u91d1\u878d\u4ea4\u6613\u7cfb\u7d71\u3002</li> <li>\u9ad8\u541e\u5410\u91cf\u5de5\u4f5c\u8ca0\u8f09\uff1aGthulhu \u652f\u63f4\u9ad8\u541e\u5410\u91cf\u7684\u5de5\u4f5c\u8ca0\u8f09\uff0c\u4f8b\u5982\u5927\u6578\u64da\u8655\u7406\u548c\u6a5f\u5668\u5b78\u7fd2\u4efb\u52d9\uff0c\u78ba\u4fdd\u9019\u4e9b\u61c9\u7528\u7a0b\u5f0f\u80fd\u5920\u5145\u5206\u5229\u7528\u7cfb\u7d71\u8cc7\u6e90\u3002</li> <li>\u591a\u7bc0\u9ede\u5206\u6563\u5f0f\u7cfb\u7d71\uff1aGthulhu \u80fd\u5920\u5728\u591a\u7bc0\u9ede\u7684\u5206\u6563\u5f0f\u7cfb\u7d71\u4e2d\u5354\u8abf\u8cc7\u6e90\u5206\u914d\uff0c\u63d0\u5347\u6574\u9ad4\u7cfb\u7d71\u7684\u6548\u80fd\u548c\u7a69\u5b9a\u6027\u3002</li> </ol> <p>\u5c08\u6848\u4f7f\u547d</p> <p>\u6211\u5011\u76f8\u4fe1\uff0c\u901a\u904e\u6301\u7e8c\u7684\u6280\u8853\u5275\u65b0\u548c\u958b\u653e\u7684\u793e\u7fa4\u5354\u4f5c\uff0cGthulhu \u5c07\u6210\u70ba Linux \u8abf\u5ea6\u5668\u9818\u57df\u7684\u91cd\u8981\u529b\u91cf\uff0c\u70ba\u73fe\u4ee3\u61c9\u7528\u63d0\u4f9b\u66f4\u597d\u7684\u6548\u80fd\u548c\u9ad4\u9a57\u3002</p> <p>\u53c3\u8207\u8ca2\u737b</p> <p>\u5982\u679c\u60a8\u8a8d\u540c\u6211\u5011\u7684\u76ee\u6a19\u548c\u9858\u666f\uff0c\u6b61\u8fce\u52a0\u5165\u6211\u5011\u7684\u958b\u767c\u8005\u793e\u7fa4\uff01\u67e5\u770b \u8ca2\u737b\u6307\u5357 \u4e86\u89e3\u5982\u4f55\u53c3\u8207\u5c08\u6848\u958b\u767c\u3002</p>"}]}