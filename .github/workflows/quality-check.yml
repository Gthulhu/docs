name: Documentation Quality Check

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/**'

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
          pip install markdown-link-check
          
      - name: üîç Lint MkDocs configuration
        run: |
          echo "üîß Checking MkDocs configuration..."
          mkdocs config
          python -c "
          import yaml
          with open('mkdocs.yml', 'r', encoding='utf-8') as f:
              config = yaml.safe_load(f)
          print('‚úÖ MkDocs configuration is valid YAML')
          print(f'üìä Found {len(config.get(\"nav\", []))} navigation items')
          "
          
      - name: üìù Check Markdown files
        run: |
          echo "üìÑ Checking Markdown files for common issues..."
          
          # Ê™¢Êü•ÊòØÂê¶ÊúâÁ©∫ÁöÑ Markdown Ê™îÊ°à
          find docs/ -name "*.md" -size 0 | while read file; do
            echo "‚ö†Ô∏è  Empty file found: $file"
          done
          
          # Ê™¢Êü•Ê™îÊ°àÂêçÁ®±‰∏ÄËá¥ÊÄß
          echo "üî§ Checking filename consistency..."
          for file in docs/*.md; do
            if [[ "$file" != *".en.md" ]]; then
              base=$(basename "$file" .md)
              if [[ ! -f "docs/$base.en.md" ]]; then
                echo "‚ö†Ô∏è  Missing English version for: $file"
              fi
            fi
          done
          
          # Áµ±Ë®àÊñáÊ™îÊï∏Èáè
          zh_files=$(find docs/ -name "*.md" ! -name "*.en.md" | wc -l)
          en_files=$(find docs/ -name "*.en.md" | wc -l)
          echo "üìä Documentation statistics:"
          echo "   Chinese files: $zh_files"
          echo "   English files: $en_files"
          
      - name: üîó Check internal links
        run: |
          echo "üîó Building docs to check internal links..."
          mkdocs build --strict
          
      - name: üìä Generate documentation report
        run: |
          echo "üìã Documentation Report" > doc_report.md
          echo "======================" >> doc_report.md
          echo "" >> doc_report.md
          echo "## üìà Statistics" >> doc_report.md
          echo "- Total Markdown files: $(find docs/ -name "*.md" | wc -l)" >> doc_report.md
          echo "- Chinese files: $(find docs/ -name "*.md" ! -name "*.en.md" | wc -l)" >> doc_report.md
          echo "- English files: $(find docs/ -name "*.en.md" | wc -l)" >> doc_report.md
          echo "- Generated HTML files: $(find site/ -name "*.html" | wc -l)" >> doc_report.md
          echo "- Site size: $(du -sh site/ | cut -f1)" >> doc_report.md
          echo "" >> doc_report.md
          echo "## üìÅ File Structure" >> doc_report.md
          echo "\`\`\`" >> doc_report.md
          tree docs/ >> doc_report.md
          echo "\`\`\`" >> doc_report.md
          
          cat doc_report.md
          
      - name: üéØ Validate navigation consistency
        run: |
          echo "üß≠ Checking navigation consistency..."
          python -c "
          import yaml
          with open('mkdocs.yml', 'r', encoding='utf-8') as f:
              config = yaml.safe_load(f)
          
          nav = config.get('nav', [])
          missing_files = []
          
          def check_nav_item(item, path=''):
              if isinstance(item, dict):
                  for key, value in item.items():
                      if isinstance(value, str):
                          if not value.startswith('http') and not os.path.exists(f'docs/{value}'):
                              missing_files.append(f'docs/{value}')
                      elif isinstance(value, list):
                          for subitem in value:
                              check_nav_item(subitem, f'{path}/{key}')
                      elif isinstance(value, dict):
                          check_nav_item(value, f'{path}/{key}')
          
          import os
          for item in nav:
              check_nav_item(item)
          
          if missing_files:
              print('‚ùå Missing files referenced in navigation:')
              for file in missing_files:
                  print(f'   - {file}')
              exit(1)
          else:
              print('‚úÖ All navigation files exist')
          "

  spell-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üî§ Spell check
        uses: streetsidesoftware/cspell-action@v2
        with:
          files: 'docs/**/*.md'
          config: '.cspell.json'
          strict: false
